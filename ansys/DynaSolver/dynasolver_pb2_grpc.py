# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import dynasolver_pb2 as dynasolver__pb2


class DynaSolverCommStub(object):
  """Defines the service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendRequest = channel.unary_unary(
        '/dynasolver.DynaSolverComm/sendRequest',
        request_serializer=dynasolver__pb2.DynaSolverRelay.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverRelay.FromString,
        )
    self.uploadFile = channel.stream_unary(
        '/dynasolver.DynaSolverComm/uploadFile',
        request_serializer=dynasolver__pb2.DynaSolverFileData.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverStatus.FromString,
        )
    self.downloadFile = channel.unary_stream(
        '/dynasolver.DynaSolverComm/downloadFile',
        request_serializer=dynasolver__pb2.DynaSolverFileRequest.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverFileData.FromString,
        )
    self.tailFile = channel.unary_stream(
        '/dynasolver.DynaSolverComm/tailFile',
        request_serializer=dynasolver__pb2.DynaSolverTailRequest.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverFileData.FromString,
        )
    self.listFiles = channel.unary_unary(
        '/dynasolver.DynaSolverComm/listFiles',
        request_serializer=dynasolver__pb2.DynaSolverFileRequest.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverFileList.FromString,
        )
    self.startSolver = channel.unary_unary(
        '/dynasolver.DynaSolverComm/startSolver',
        request_serializer=dynasolver__pb2.DynaSolverStart.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverStatus.FromString,
        )
    self.quitServer = channel.unary_unary(
        '/dynasolver.DynaSolverComm/quitServer',
        request_serializer=dynasolver__pb2.QuitServer.SerializeToString,
        response_deserializer=dynasolver__pb2.DynaSolverStatus.FromString,
        )


class DynaSolverCommServicer(object):
  """Defines the service
  """

  def sendRequest(self, request, context):
    """Function invoked to send the request
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def uploadFile(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def downloadFile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def tailFile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listFiles(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def startSolver(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def quitServer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DynaSolverCommServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendRequest': grpc.unary_unary_rpc_method_handler(
          servicer.sendRequest,
          request_deserializer=dynasolver__pb2.DynaSolverRelay.FromString,
          response_serializer=dynasolver__pb2.DynaSolverRelay.SerializeToString,
      ),
      'uploadFile': grpc.stream_unary_rpc_method_handler(
          servicer.uploadFile,
          request_deserializer=dynasolver__pb2.DynaSolverFileData.FromString,
          response_serializer=dynasolver__pb2.DynaSolverStatus.SerializeToString,
      ),
      'downloadFile': grpc.unary_stream_rpc_method_handler(
          servicer.downloadFile,
          request_deserializer=dynasolver__pb2.DynaSolverFileRequest.FromString,
          response_serializer=dynasolver__pb2.DynaSolverFileData.SerializeToString,
      ),
      'tailFile': grpc.unary_stream_rpc_method_handler(
          servicer.tailFile,
          request_deserializer=dynasolver__pb2.DynaSolverTailRequest.FromString,
          response_serializer=dynasolver__pb2.DynaSolverFileData.SerializeToString,
      ),
      'listFiles': grpc.unary_unary_rpc_method_handler(
          servicer.listFiles,
          request_deserializer=dynasolver__pb2.DynaSolverFileRequest.FromString,
          response_serializer=dynasolver__pb2.DynaSolverFileList.SerializeToString,
      ),
      'startSolver': grpc.unary_unary_rpc_method_handler(
          servicer.startSolver,
          request_deserializer=dynasolver__pb2.DynaSolverStart.FromString,
          response_serializer=dynasolver__pb2.DynaSolverStatus.SerializeToString,
      ),
      'quitServer': grpc.unary_unary_rpc_method_handler(
          servicer.quitServer,
          request_deserializer=dynasolver__pb2.QuitServer.FromString,
          response_serializer=dynasolver__pb2.DynaSolverStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dynasolver.DynaSolverComm', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
