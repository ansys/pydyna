





:class:`Mat213`
===============


.. py:class:: mat_213.Mat213(**kwargs)

   Bases: :py:obj:`ansys.dyna.core.lib.keyword_base.KeywordBase`


   
   DYNA MAT_213 keyword
















   ..
       !! processed by numpydoc !!


.. py:currentmodule:: Mat213

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mid`
            - Get or set the Material identification. A unique number or label must be specified.
          * - :py:attr:`~ro`
            - Get or set the Mass density.
          * - :py:attr:`~ea`
            - Get or set the Ea, Young's modulus in a-direction.
          * - :py:attr:`~eb`
            - Get or set the Ea, Young's modulus in b-direction.
          * - :py:attr:`~ec`
            - Get or set the Ea, Young's modulus in c-direction.
          * - :py:attr:`~prba`
            - Get or set the (elastic) Poisson's ratio, ba.
          * - :py:attr:`~prca`
            - Get or set the (elastic) Poisson's ratio, ca.
          * - :py:attr:`~prcb`
            - Get or set the (elastic) Poisson's ratio, cb.
          * - :py:attr:`~gab`
            - Get or set the Shear modulus, ab.
          * - :py:attr:`~gbc`
            - Get or set the Shear modulus, bc.
          * - :py:attr:`~gca`
            - Get or set the Shear modulus, ca.
          * - :py:attr:`~ptol`
            - Get or set the Yield function tolerance used during plastic multiplier calculations.
          * - :py:attr:`~aopt`
            - Get or set the Material axes option (see MAT_OPTIONTROPIC_ELASTIC for a more complete description):
          * - :py:attr:`~macf`
            - Get or set the Material axes change flag for brick elements:
          * - :py:attr:`~filt`
            - Get or set the Factor for strain rate filtering
          * - :py:attr:`~vevp`
            - Get or set the Flag to control viscoelastic, viscoplastic behavior:
          * - :py:attr:`~xp`
            - Get or set the Coordinates of point p for AOPT = 1 and 4.
          * - :py:attr:`~yp`
            - Get or set the Coordinates of point p for AOPT = 1 and 4.
          * - :py:attr:`~zp`
            - Get or set the Coordinates of point p for AOPT = 1 and 4.
          * - :py:attr:`~a1`
            - Get or set the Components of vector a for AOPT = 2.
          * - :py:attr:`~a2`
            - Get or set the Components of vector a for AOPT = 2.
          * - :py:attr:`~a3`
            - Get or set the Components of vector a for AOPT = 2.
          * - :py:attr:`~v1`
            - Get or set the Components of vector v for AOPT = 3 and 4.
          * - :py:attr:`~v2`
            - Get or set the Components of vector v for AOPT = 3 and 4.
          * - :py:attr:`~v3`
            - Get or set the Components of vector v for AOPT = 3 and 4.
          * - :py:attr:`~d1`
            - Get or set the Components of vector d for AOPT = 2.
          * - :py:attr:`~d2`
            - Get or set the Components of vector d for AOPT = 2.
          * - :py:attr:`~d3`
            - Get or set the Components of vector d for AOPT = 2.
          * - :py:attr:`~beta`
            - Get or set the Angle in degrees of a material rotation about the c-axis, available for AOPT = 0 (shells only) and AOPT = 3 (all element types).  This angle may be overridden on the element card; see *ELEMENT_‌SHELL_‌BETA and *ELEMENT_‌SOLID_‌ORTHO.
          * - :py:attr:`~tcsym`
            - Get or set the Flag for handling tension-compression asymmetry in all three material directions:
          * - :py:attr:`~h11`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h22`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h33`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h12`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h23`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h13`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h44`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h55`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~h66`
            - Get or set the Plastic flow rule coefficients. See Remark (1).
          * - :py:attr:`~lt1`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt2`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt3`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt4`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt5`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt6`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt7`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt8`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt9`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt10`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt11`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~lt12`
            - Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
          * - :py:attr:`~ysc`
            - Get or set the Load curve ID containing the stress-strain curve ID's and associated initial yield strain values. See Remark (3).
          * - :py:attr:`~dflag`
            - Get or set the Damage formulation flag:
          * - :py:attr:`~dc`
            - Get or set the Curve ID that specifies which components of the damage model are active.
          * - :py:attr:`~ftype`
            - Get or set the Failure criterion type (see Remarks 5 and 6):
          * - :py:attr:`~beta11`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 1-direction (default = 0.001)
          * - :py:attr:`~beta22`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 2-direction (default = 0.001).
          * - :py:attr:`~beta33`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 3-direction (default = 0.001)
          * - :py:attr:`~beta44`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 12-shear (default = 0.001).
          * - :py:attr:`~beta55`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 23-shear (default = 0.001)
          * - :py:attr:`~beta66`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 13-shear (default = 0.001)
          * - :py:attr:`~beta12`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law 12-coupling (default = (BETA11 + BETA22)/2).
          * - :py:attr:`~beta23`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law 23-coupling (default = (BETA22 + BETA33)/2)
          * - :py:attr:`~beta13`
            - Get or set the Decay constant for the relaxation matrix of the visco-elastic law 13-coupling (default = (BETA11 + BETA33)/2)
          * - :py:attr:`~cp`
            - Get or set the Specific heat capacity (per unit mass)
          * - :py:attr:`~tqc`
            - Get or set the Taylor-Quinney Coefficient
          * - :py:attr:`~temp`
            - Get or set the This is the reference (or, initial) temperature used to obtain the corresponding stress-strain curves
          * - :py:attr:`~pmacc`
            - Get or set the Plastic multiplier computational accuracy
          * - :py:attr:`~title`
            - Get or set the Additional title line


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~keyword`
            - 
          * - :py:attr:`~subkeyword`
            - 
          * - :py:attr:`~option_specs`
            - Get the card format type.






Import detail
-------------

.. code-block:: python

    from mat_213 import Mat213

Property detail
---------------

.. py:property:: mid
   :type: Optional[int]


   
   Get or set the Material identification. A unique number or label must be specified.
















   ..
       !! processed by numpydoc !!

.. py:property:: ro
   :type: Optional[float]


   
   Get or set the Mass density.
















   ..
       !! processed by numpydoc !!

.. py:property:: ea
   :type: Optional[float]


   
   Get or set the Ea, Young's modulus in a-direction.
















   ..
       !! processed by numpydoc !!

.. py:property:: eb
   :type: Optional[float]


   
   Get or set the Ea, Young's modulus in b-direction.
















   ..
       !! processed by numpydoc !!

.. py:property:: ec
   :type: Optional[float]


   
   Get or set the Ea, Young's modulus in c-direction.
















   ..
       !! processed by numpydoc !!

.. py:property:: prba
   :type: Optional[float]


   
   Get or set the (elastic) Poisson's ratio, ba.
















   ..
       !! processed by numpydoc !!

.. py:property:: prca
   :type: Optional[float]


   
   Get or set the (elastic) Poisson's ratio, ca.
















   ..
       !! processed by numpydoc !!

.. py:property:: prcb
   :type: Optional[float]


   
   Get or set the (elastic) Poisson's ratio, cb.
















   ..
       !! processed by numpydoc !!

.. py:property:: gab
   :type: Optional[float]


   
   Get or set the Shear modulus, ab.
















   ..
       !! processed by numpydoc !!

.. py:property:: gbc
   :type: Optional[float]


   
   Get or set the Shear modulus, bc.
















   ..
       !! processed by numpydoc !!

.. py:property:: gca
   :type: Optional[float]


   
   Get or set the Shear modulus, ca.
















   ..
       !! processed by numpydoc !!

.. py:property:: ptol
   :type: float


   
   Get or set the Yield function tolerance used during plastic multiplier calculations.
















   ..
       !! processed by numpydoc !!

.. py:property:: aopt
   :type: float


   
   Get or set the Material axes option (see MAT_OPTIONTROPIC_ELASTIC for a more complete description):
   EQ.0.0: Locally orthotropic with material axes determined by element nodes.For shells only, the material axes are then rotated about the normal vector to the surface of the shell by the angle BETA.
   EQ.1.0 : Locally orthotropic with material axes determined by a point, P, in spaceand the global location of the element center.This option is for solid elements only.
   EQ.2.0 : Globally orthotropic with material axes determined by vectors defined below
   EQ.3.0 : Locally orthotropic material axes determined by a vector v and the normal vector to the plane of the element.The plane of a solid element is the midsurface between the inner surface and outer surface defined by the first four nodes and the last four nodes of the connectivity of the element, respectively.Thus, for solid elements, AOPT = 3 is only available for hexahedrons.a is determined by taking the cross product of v with the normal vector, b is determined by taking the cross product of the normal vector with a,and c is the normal vector.Then aand b are rotated about c by an angle BETA.BETA may be set in the keyword input for the element or in the input for this keyword.Note that for solids, the material axes may be switched depending on the choice of MACF.The switch may occur before or after applying BETA depending on the value of MACF.
   EQ.4.0 : Locally orthotropic in cylindrical coordinate system with the material axes determined by a vector, v,and an originating point, P, defining the centerline axis.This option is for solid elements only.
   LT.0.0 : The absolute value of AOPT is a coordinate system ID number(CID on * DEFINE_COORDINATE_NODES, *DEFINE_COORDINATE_SYSTEM or *DEFINE - _COORDINATE_VECTOR).
















   ..
       !! processed by numpydoc !!

.. py:property:: macf
   :type: int


   
   Get or set the Material axes change flag for brick elements:

   EQ. - 4:        Switch material axes b and c before BETA rotation
   EQ. - 3 : Switch material axes a and c before BETA rotation
   EQ. - 2 : Switch material axes a and b before BETA rotation
   EQ.1 : No change, default
   EQ.2 : Switch material axes a and b after BETA rotation
   EQ.3 : Switch material axes a and c after BETA rotation
   EQ.4 : Switch material axes b and c after BETA rotation
   Figure Error!Reference source not found.indicates when LS - DYNA applies MACF during the process to obtain the final material axes.If BETA on * ELEMENT_SOLID_{ OPTION } is defined, then that BETA is used for the rotation for all AOPT options.Otherwise, if AOPT‌ = 3, the BETA input on Card 3 rotates the axes.For all other values of AOPT, the material axes will be switched as specified by MACF, but no BETA rotation will be performed.















   ..
       !! processed by numpydoc !!

.. py:property:: filt
   :type: float


   
   Get or set the Factor for strain rate filtering
















   ..
       !! processed by numpydoc !!

.. py:property:: vevp
   :type: int


   
   Get or set the Flag to control viscoelastic, viscoplastic behavior:
   EQ.0:   Viscoplastic only with no rate effects in elastic region(default)
   EQ.1 : Viscoelastic, viscoplastic
   EQ.2 : Viscoelastic only.
















   ..
       !! processed by numpydoc !!

.. py:property:: xp
   :type: Optional[float]


   
   Get or set the Coordinates of point p for AOPT = 1 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: yp
   :type: Optional[float]


   
   Get or set the Coordinates of point p for AOPT = 1 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: zp
   :type: Optional[float]


   
   Get or set the Coordinates of point p for AOPT = 1 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: a1
   :type: Optional[float]


   
   Get or set the Components of vector a for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: a2
   :type: Optional[float]


   
   Get or set the Components of vector a for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: a3
   :type: Optional[float]


   
   Get or set the Components of vector a for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: v1
   :type: Optional[float]


   
   Get or set the Components of vector v for AOPT = 3 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: v2
   :type: Optional[float]


   
   Get or set the Components of vector v for AOPT = 3 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: v3
   :type: Optional[float]


   
   Get or set the Components of vector v for AOPT = 3 and 4.
















   ..
       !! processed by numpydoc !!

.. py:property:: d1
   :type: Optional[float]


   
   Get or set the Components of vector d for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: d2
   :type: Optional[float]


   
   Get or set the Components of vector d for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: d3
   :type: float


   
   Get or set the Components of vector d for AOPT = 2.
















   ..
       !! processed by numpydoc !!

.. py:property:: beta
   :type: float


   
   Get or set the Angle in degrees of a material rotation about the c-axis, available for AOPT = 0 (shells only) and AOPT = 3 (all element types).  This angle may be overridden on the element card; see *ELEMENT_‌SHELL_‌BETA and *ELEMENT_‌SOLID_‌ORTHO.
















   ..
       !! processed by numpydoc !!

.. py:property:: tcsym
   :type: int


   
   Get or set the Flag for handling tension-compression asymmetry in all three material directions:
   EQ.0:   Do not adjust user - defined data.
   EQ.1 : Compute and use average of tension and compression elastic moduli in adjusting the stress - strain curve.See Remark 7.
   EQ.2 : Use compression modulus as user - defined tension modulus in adjusting the stress - strain curve.See Remark 7.
   EQ.3 : Use tension modulus as user - defined compression modulus in adjusting the stress - strain curve.See Remark 7.
   EQ.4 : Use user - defined tensile curve as the compressive curve overriding the user - defined compressive curve.This implies that the normal stress - strain curves are symmetric including yield values.
   EQ.5 : Use user - defined compressive curve as the tensile curve overriding the user - defined tensile curve.This implies that the normal stress - strain curves are symmetric including yield values.
















   ..
       !! processed by numpydoc !!

.. py:property:: h11
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h22
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h33
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h12
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h23
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h13
   :type: Optional[float]


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h44
   :type: float


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h55
   :type: float


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: h66
   :type: float


   
   Get or set the Plastic flow rule coefficients. See Remark (1).
















   ..
       !! processed by numpydoc !!

.. py:property:: lt1
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT1-3: Tension 1,2,3 directions
















   ..
       !! processed by numpydoc !!

.. py:property:: lt2
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT1-3: Tension 1,2,3 directions.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt3
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT1-3: Tension 1,2,3 directions.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt4
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT4-6: Compression  1,2,3 directions.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt5
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT4-6: Compression  1,2,3 directions.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt6
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT4-6: Compression  1,2,3 directions.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt7
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT7: Shear 1-2 plane.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt8
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT8: Shear 2-3 plane.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt9
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT9: Shear 1-3 plane.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt10
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT10: 45 degree Off-axis 1-2 plane TensionorCompression.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt11
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT10: 45 degree Off-axis 2-3 plane TensionorCompression.
















   ..
       !! processed by numpydoc !!

.. py:property:: lt12
   :type: Optional[int]


   
   Get or set the TABLE_3D ID's containing temperature and strain rate dependent stress-strain input curves for the 12
   separate tests (LT: 3D Load Tables). LT10: 45 degree Off-axis 1-3 plane TensionorCompression.
















   ..
       !! processed by numpydoc !!

.. py:property:: ysc
   :type: Optional[int]


   
   Get or set the Load curve ID containing the stress-strain curve ID's and associated initial yield strain values. See Remark (3).
















   ..
       !! processed by numpydoc !!

.. py:property:: dflag
   :type: int


   
   Get or set the Damage formulation flag:
   EQ.0:   Based on effective stress(default)
   EQ.1 : Based on corrected plastic strain.
















   ..
       !! processed by numpydoc !!

.. py:property:: dc
   :type: Optional[int]


   
   Get or set the Curve ID that specifies which components of the damage model are active.
   It contains the damage parameter ID and the corresponding damage versus total strain ID.
   Set this value to zero if damage should not be included in the analysis. See Remark (4).
















   ..
       !! processed by numpydoc !!

.. py:property:: ftype
   :type: int


   
   Get or set the Failure criterion type (see Remarks 5 and 6):
   EQ.0:   No failure considered(default)
   EQ.1 : Puck Failure Criterion(PFC) (solid elements only)
   EQ.2 : Tsai - Wu Failure Criterion(TWFC) (solid elements only)
   EQ.3 : Generalized Tabulated Failure Criterion(GTFC)
















   ..
       !! processed by numpydoc !!

.. py:property:: beta11
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 1-direction (default = 0.001)
















   ..
       !! processed by numpydoc !!

.. py:property:: beta22
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 2-direction (default = 0.001).
   Value must be greater than or equal to zero
















   ..
       !! processed by numpydoc !!

.. py:property:: beta33
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 3-direction (default = 0.001)
   NOT required for shell element.
   Value must be greater than or equal to zero.
















   ..
       !! processed by numpydoc !!

.. py:property:: beta44
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 12-shear (default = 0.001).
   Value must be greater than or equal to zero.
















   ..
       !! processed by numpydoc !!

.. py:property:: beta55
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 23-shear (default = 0.001)
   NOT required for shell element.
   Value must be greater than or equal to zero.
















   ..
       !! processed by numpydoc !!

.. py:property:: beta66
   :type: float


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law in 13-shear (default = 0.001)
   NOT required for shell element
















   ..
       !! processed by numpydoc !!

.. py:property:: beta12
   :type: Optional[float]


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law 12-coupling (default = (BETA11 + BETA22)/2).
   Value must be greater than or equal to zero.
















   ..
       !! processed by numpydoc !!

.. py:property:: beta23
   :type: Optional[float]


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law 23-coupling (default = (BETA22 + BETA33)/2)
   NOT required for shell element.
   Value must be greater than or equal to zero
















   ..
       !! processed by numpydoc !!

.. py:property:: beta13
   :type: Optional[float]


   
   Get or set the Decay constant for the relaxation matrix of the visco-elastic law 13-coupling (default = (BETA11 + BETA33)/2)
   NOT required for shell element.
   Value must be greater than or equal to zero.
















   ..
       !! processed by numpydoc !!

.. py:property:: cp
   :type: Optional[float]


   
   Get or set the Specific heat capacity (per unit mass)
















   ..
       !! processed by numpydoc !!

.. py:property:: tqc
   :type: Optional[float]


   
   Get or set the Taylor-Quinney Coefficient
















   ..
       !! processed by numpydoc !!

.. py:property:: temp
   :type: Optional[float]


   
   Get or set the This is the reference (or, initial) temperature used to obtain the corresponding stress-strain curves
















   ..
       !! processed by numpydoc !!

.. py:property:: pmacc
   :type: Optional[float]


   
   Get or set the Plastic multiplier computational accuracy
   EQ. 0: Use up to a maximum of 1000 increments(default)
   EQ.N : Specify a positive value N greater than 1 as the maximum number of increments.An error message is issued if a converged solution cannot be found
















   ..
       !! processed by numpydoc !!

.. py:property:: title
   :type: Optional[str]


   
   Get or set the Additional title line
















   ..
       !! processed by numpydoc !!



Attribute detail
----------------

.. py:attribute:: keyword
   :value: 'MAT'


.. py:attribute:: subkeyword
   :value: '213'


.. py:attribute:: option_specs

   
   Get the card format type.
















   ..
       !! processed by numpydoc !!





