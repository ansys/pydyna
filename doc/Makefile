# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    = -j auto
SPHINXBUILD   = sphinx-build
SOURCEDIR     = source
BUILDDIR      = _build
APIDIR        = api
KEYWORDDIR    = $(SOURCEDIR)/keywordclasses
KEYWORDBUILD   = $(KEYWORDDIR)/_build/html

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help html Makefile clean pdf

html:
ifdef KEYWORDS
	@echo "üîß Building keywordclasses..."
	$(MAKE) -C "$(KEYWORDDIR)" html "$(KEYWORDBUILD)" $(SPHINXOPTS) $(O)

else
	@echo "‚ö†Ô∏è  Skipping keywordclasses build"

endif
    @echo "üîß Building main documentation..."
	$(SPHINXBUILD) -b html "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

ifdef KEYWORDS
	@echo "replacing keywordclasses build..."
	rm -rf $(BUILDDIR)/html/api/ansys/dyna/core/keywords
	cp -r $(KEYWORDBUILD)/html/api/ansys/dyna/core/keywords $(BUILDDIR)/html/api/ansys/dyna/core/
endif

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

clean:
	rm -rf $(BUILDDIR)/*
	rm -rf source/examples/gallery_examples
	find . -type d -name $(APIDIR) -exec rm -rf {} +

pdf:
	@$(SPHINXBUILD) -M latex "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
	cd $(BUILDDIR)/latex && latexmk -r latexmkrc -pdf *.tex -interaction=nonstopmode || true
	(test -f $(BUILDDIR)/latex/*.pdf && echo pdf exists) || exit 1
