:py:mod:`ansys.dyna.core.pre.dynanvh`
=====================================

.. py:module:: ansys.dyna.core.pre.dynanvh

.. autoapi-nested-parse::

   NVH API
   ==========

   Module for creating an NVH Dyna input deck.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.dyna.core.pre.dynanvh.DynaNVH
   ansys.dyna.core.pre.dynanvh.ExcitationDOF
   ansys.dyna.core.pre.dynanvh.ExcitationType
   ansys.dyna.core.pre.dynanvh.ResponseDOF
   ansys.dyna.core.pre.dynanvh.ResponseType
   ansys.dyna.core.pre.dynanvh.FrequencyDomain




.. py:class:: DynaNVH


   Bases: :py:obj:`ansys.dyna.core.pre.dynabase.DynaBase`

   
   Contains methods for creating a keyword related to NVH.
















   ..
       !! processed by numpydoc !!
   .. py:method:: save_file()

      
      Save keyword files.



      :Returns:

          :ref:`bool <python:bltin-boolean-values>`
              ``True`` when successful, ``False`` when failed.













      ..
          !! processed by numpydoc !!


.. py:class:: ExcitationDOF


   Bases: :py:obj:`ansys.dyna.core.pre.dynabase.Enum`

   
   Generic enumeration.

   Derive from this class to define new enumerations.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: VECTOR
      :value: 0

      

   .. py:attribute:: X
      :value: 1

      

   .. py:attribute:: Y
      :value: 2

      

   .. py:attribute:: Z
      :value: 3

      


.. py:class:: ExcitationType


   Bases: :py:obj:`ansys.dyna.core.pre.dynabase.Enum`

   
   Generic enumeration.

   Derive from this class to define new enumerations.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: BASE_VELOCITY
      :value: 0

      

   .. py:attribute:: BASE_ACCELERATION
      :value: 1

      

   .. py:attribute:: BASE_DISPLACEMENT
      :value: 2

      

   .. py:attribute:: NODAL_FORCE
      :value: 3

      


.. py:class:: ResponseDOF


   Bases: :py:obj:`ansys.dyna.core.pre.dynabase.Enum`

   
   Generic enumeration.

   Derive from this class to define new enumerations.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: VECTOR
      :value: 0

      

   .. py:attribute:: X
      :value: 1

      

   .. py:attribute:: Y
      :value: 2

      

   .. py:attribute:: Z
      :value: 3

      


.. py:class:: ResponseType


   Bases: :py:obj:`ansys.dyna.core.pre.dynabase.Enum`

   
   Generic enumeration.

   Derive from this class to define new enumerations.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: BASE_VELOCITY
      :value: 0

      

   .. py:attribute:: BASE_ACCELERATION
      :value: 1

      

   .. py:attribute:: BASE_DISPLACEMENT
      :value: 2

      

   .. py:attribute:: NODAL_FORCE
      :value: 3

      


.. py:class:: FrequencyDomain


   
   Provides a way of defining and solving frequency domain vibration and acoustic problems.
















   ..
       !! processed by numpydoc !!
   .. py:method:: set_frequency_response_function(excitation_input_set=None, excitation_input_dof=ExcitationDOF.VECTOR, excitation_input_type=ExcitationType.NODAL_FORCE, max_natural_frequency=0, modal_damping_coefficient=0, modal_damping_coefficient_curve=None, modal_damping_coefficient_curve_type=0, response_output_set=None, response_output_dof=ResponseDOF.Y, response_output_type=ResponseType.BASE_VELOCITY, frf_output_min_frequency=0, frf_output_max_frequency=0, frf_output_num_frequency=0)

      
      Compute frequency response functions due to nodal excitations.


      :Parameters:

          **excitation_input_set**
              ..

          **excitation_input_dof**
              ..

          **excitation_input_type**
              ..

          **max_natural_frequency**
              ..

          **modal_damping_coefficient**
              ..

          **modal_damping_coefficient_curve**
              ..

          **modal_damping_coefficient_curve_type**
              ..

          **response_output_set**
              ..

          **response_output_dof**
              ..

          **response_output_type**
              ..

          **frf_output_min_frequency**
              ..

          **frf_output_max_frequency**
              ..

          **frf_output_num_frequency**
              ..














      ..
          !! processed by numpydoc !!

   .. py:method:: create()

      
      Define a frequency domain vibration and acoustic problem.
















      ..
          !! processed by numpydoc !!


