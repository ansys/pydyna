
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Airbag/airbag_deploy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Airbag_airbag_deploy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Airbag_airbag_deploy.py:


Airbag deploy
-------------
This example shows how to create an airbag deploy model with the PyDNYA ``pre`` service.
The executable file for LS-DYNA is ``ls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe``.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Peform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 12-32

.. code-block:: default


    import os
    import sys


    from ansys.dyna.core.pre.dynasolution import DynaSolution
    from ansys.dyna.core.pre.dynamech import (
        DynaMech,
        Airbag,
        PartSet,
        Curve,
        Point,
        RigidwallPlanar,
        Contact,
        ContactSurface,
        ContactCategory,
        ShellPart,
        ShellFormulation,
    )








.. GENERATED FROM PYTHON SOURCE LINES 33-44

Manually start the ``pre`` service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Copy the ``pyDyna/src/ansys/dyna/core/pre/Server``folder to a desired location.
Start the ``pre`` service at this location by running this command:

``python kwserver.py``

Once the ``pre`` servic is running, you can connect a client to it using
the hostname and the port. This example uses the default local host and port
(``"localhost"`` and ``"50051"`` respectively).


.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: default

    from ansys.dyna.core.pre.dynamaterial import MatRigid, MatFabric
    from ansys.dyna.core.pre import examples

    hostname = "localhost"
    if len(sys.argv) > 1:
        hostname = sys.argv[1]








.. GENERATED FROM PYTHON SOURCE LINES 53-58

Start the solution workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ``DynaSolution`` class is like a workflow orchestrator.
It inherits methods from other classes and helps create a complete workflow.


.. GENERATED FROM PYTHON SOURCE LINES 58-65

.. code-block:: default

    airbag_solution = DynaSolution(hostname)
    fns = []
    # path = sys.path[0] + os.sep + "input" + os.sep + "airbag_deploy" + os.sep
    path = examples.airbag_deploy + os.sep
    fns.append(path + "airbag_deploy.k")
    airbag_solution.open_files(fns)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-11 02:29:25 :  Connected to kwServer...
    2023-08-11 02:29:25 :  /opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/ansys/dyna/core/pre/examples/airbag/airbag_deploy/airbag_deploy.k uploaded to server...

    ret: true




.. GENERATED FROM PYTHON SOURCE LINES 66-74

Create standard explicit control cards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This code uses the ``set_termination`` method to set the termination time
to ``0.03`` in *CONTROL_TERMINATION*. The ``DynaMech`` class
automatically generates the common control cards used in
explicit problems. ``CONTROL_ACCURACY``, ``CONTACT``, ``BULK VISCOCITY``,
and ``CONTACT``are all automatically generated.


.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: default

    airbag_solution.set_termination(0.03)

    airbagdeploy = DynaMech()
    airbag_solution.add(airbagdeploy)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-11 02:29:25 :  Setting termination time ...




.. GENERATED FROM PYTHON SOURCE LINES 80-87

Define *AIRBAG_SIMPLE_AIRBAG_MODEL* as a keyword
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Use the ``Airbag`` function in the ``DynaMech`` class to define
*AIRBAG_SIMPLE_AIRBAG_MODEL* as a keyword. While LS-DYNA has many different
airbag models, PyDYNA currently supports only one airbag model,
SIMPLE_AIRBAG_MODEL. If you have an urgent need for PyDYNA to support
another airbag model, email `pyansys.core@ansys.com <mailto:pyansys.core@ansys.com>`_.

.. GENERATED FROM PYTHON SOURCE LINES 87-100

.. code-block:: default


    airbag = Airbag(
        set=PartSet([3]),
        heat_capacity_at_constant_volume=1.736e3,
        heat_capacity_at_constant_pressure=2.43e3,
        input_gas_temperature=1.2e3,
        input_mass_flow_rate=Curve(x=[0, 0.032, 0.045, 0.08], y=[0, 26, 0.6, 0.1]),
        shape_factor_for_exit_hole=0.7,
        ambient_pressure=14.7,
        ambient_density=3.821e-6,
    )
    airbagdeploy.add(airbag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-11 02:29:25 :  Curve 1 defined...




.. GENERATED FROM PYTHON SOURCE LINES 101-106

Generate an infinite planar rigid wall
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To generate an infinite planar rigidwall, define the coordinates of the heat
vector and the tail vector of the plane.


.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default

    rigidwall = RigidwallPlanar(Point(0, 0, 0), Point(0, 1, 0), coulomb_friction_coefficient=0.5)
    airbagdeploy.add(rigidwall)








.. GENERATED FROM PYTHON SOURCE LINES 110-114

Define a node-to-surface contact
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Define a node-to-surface contact by passing a master part set and a slave
part set.

.. GENERATED FROM PYTHON SOURCE LINES 114-124

.. code-block:: default


    contact = Contact(category=ContactCategory.NODES_TO_SURFACE)
    contact.set_friction_coefficient(static=0.5, dynamic=0.5)
    surf1 = ContactSurface(PartSet([3]))
    surf2 = ContactSurface(PartSet([2]))
    surf2.set_penalty_stiffness_scale_factor(0.06667)
    contact.set_slave_surface(surf1)
    contact.set_master_surface(surf2)
    airbagdeploy.contacts.add(contact)








.. GENERATED FROM PYTHON SOURCE LINES 125-135

Define material cards
~~~~~~~~~~~~~~~~~~~~~
LS-DYNA has over 300 materials that are used for varied applications.
Whlie PyDYNA does not yet support all material cards, it does support some
of the most commonly used materials, including ``FABRIC``, `MAT_ELASTIC``,
``PIECEWISE_LINEAR_PLASTICITY``, and ``RIGID``. All supported materials
are accessed from the ``dynamaterial`` class. In the following code,
``MAT_RIGID`` is defined as the material  for the cylindrical tube and the
bottom plate. ``MAT_FABRIC`` is defined as the material for the airbag volume.
Note that ``platemat`` has contraints defined as well.

.. GENERATED FROM PYTHON SOURCE LINES 135-151

.. code-block:: default


    platemat = MatRigid(
        mass_density=7.84e-4,
        young_modulus=30e6,
        center_of_mass_constraint=1,
        translational_constraint=7,
        rotational_constraint=7,
    )
    cylindermat = MatRigid(mass_density=1.96e-4, young_modulus=30e6)
    airbagmat = MatFabric(
        mass_density=1e-4,
        young_modulus_longitudinal_direction=2e6,
        young_modulus_transverse_direction=2e6,
        shear_modulus=1.53e6,
    )








.. GENERATED FROM PYTHON SOURCE LINES 152-159

Define sectional properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following code defines the sectional properties of the parts. This example
has three shell parts. Each shell part is initialized as ``ShellPart`` with a
unique ID and an appropriate shell formulation is assigned. Again,
PyDYNA does not yet support all element formulations. You can find the
supported formulations in ``dynabase`` class.

.. GENERATED FROM PYTHON SOURCE LINES 159-179

.. code-block:: default


    plate = ShellPart(1)
    plate.set_material(platemat)
    plate.set_element_formulation(ShellFormulation.BELYTSCHKO_TSAY)
    plate.set_thickness(0.5)
    airbagdeploy.parts.add(plate)

    cylinder = ShellPart(2)
    cylinder.set_material(cylindermat)
    cylinder.set_element_formulation(ShellFormulation.BELYTSCHKO_TSAY)
    cylinder.set_thickness(0.5)
    airbagdeploy.parts.add(cylinder)

    airbagpart = ShellPart(3)
    airbagpart.set_material(airbagmat)
    airbagpart.set_element_formulation(ShellFormulation.FULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE)
    airbagpart.set_thickness(0.015)
    airbagpart.set_integration_points(4)
    airbagdeploy.parts.add(airbagpart)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-11 02:29:25 :  Material RIGID Created...
    2023-08-11 02:29:25 :  Material RIGID Created...
    2023-08-11 02:29:25 :  Material Fabric Created...




.. GENERATED FROM PYTHON SOURCE LINES 180-185

Define database outputs
~~~~~~~~~~~~~~~~~~~~~~~
Use the ``set_output_database()`` and ``create_database_binary()`` methods to define the
output frequency of the ASCII and binary D3PLOT files. Then, use the ``save_file()``
method to write out the model as an input DYNA key file.

.. GENERATED FROM PYTHON SOURCE LINES 185-191

.. code-block:: default


    airbag_solution.set_output_database(
        abstat=2.0e-4, glstat=2.0e-4, matsum=2.0e-4, rcforc=2.0e-4, rbdout=2.0e-4, rwforc=2.0e-4
    )
    airbag_solution.create_database_binary(dt=5e-4, ieverp=1)
    airbag_solution.save_file()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-11 02:29:25 :  Output Setting...
    2023-08-11 02:29:25 :  DB Binary Created...
    2023-08-11 02:29:25 :  Control Accuracy Created...
    2023-08-11 02:29:25 :  Control Bulk Viscosity Created...
    2023-08-11 02:29:25 :  Control Energy Created...
    2023-08-11 02:29:25 :  Control Hourglass Created...
    2023-08-11 02:29:25 :  Control Shell Created...
    2023-08-11 02:29:25 :  Control Contact Created...
    2023-08-11 02:29:25 :  Contact  Created...
    2023-08-11 02:29:25 :  Airbag Model Created...
    2023-08-11 02:29:25 :  Rigidwall Planar Created...
    2023-08-11 02:29:25 :  airbag_deploy.k is outputed...

    '/server/output'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.178 seconds)


.. _sphx_glr_download_examples_Airbag_airbag_deploy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: airbag_deploy.py <airbag_deploy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: airbag_deploy.ipynb <airbag_deploy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
