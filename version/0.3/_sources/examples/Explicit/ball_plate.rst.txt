
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Explicit/ball_plate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Explicit_ball_plate.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Explicit_ball_plate.py:


Ball Plate
==========
This example shows how to use the PyDYNA ``pre`` service to create
a ball plate model. The executable file for LS-DYNA is
``ls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe``.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Peform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 13-38

.. code-block:: default

    import os
    import sys


    from ansys.dyna.core.pre.dynasolution import DynaSolution
    from ansys.dyna.core.pre.dynamech import (
        DynaMech,
        Velocity,
        PartSet,
        ShellPart,
        SolidPart,
        NodeSet,
        Contact,
        ContactSurface,
        ShellFormulation,
        SolidFormulation,
        ContactType,
        AnalysisType
    )
    from ansys.dyna.core.pre.dynamaterial import (
        MatRigid,
        MatPiecewiseLinearPlasticity,
    )
    from ansys.dyna.core.pre import examples








.. GENERATED FROM PYTHON SOURCE LINES 40-44

Start the ``pre`` service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Prerequisite: make sure the ``pre`` service docker have been started.
Refer to: https://dyna.docs.pyansys.com/version/stable/getting-started/index.html

.. GENERATED FROM PYTHON SOURCE LINES 44-54

.. code-block:: default


    # Once the ``pre`` servic is running, you can connect a client to it using
    # the host name and the port. This example uses the default local host and port
    # (``"localhost"`` and ``"50051"`` respectively).
    #
    hostname = "localhost"
    if len(sys.argv) > 1:
        hostname = sys.argv[1]
    solution = DynaSolution(hostname)








.. GENERATED FROM PYTHON SOURCE LINES 55-61

Start the solution workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~
NODES and ELEMENTS are read in from the ``ball_plate.k`` file. This file
also has the *PART* defined in it, but the section and material fields are
empty to begin with.


.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default

    fns = []
    path = examples.ball_plate + os.sep
    fns.append(path+"ball_plate.k")
    solution.open_files(fns)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ret: true




.. GENERATED FROM PYTHON SOURCE LINES 67-71

Create database and control cards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For the D3plots, set simulation termination time, simulation timestep, and
output frequency. 

.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: default


    solution.set_termination(termination_time=10)

    ballplate = DynaMech(AnalysisType.NONE)
    solution.add(ballplate)








.. GENERATED FROM PYTHON SOURCE LINES 78-82

Define materials
~~~~~~~~~~~~~~~~
The ``dynamaterials`` class
are used to define these materials: ``MAT_RIGID``, ``MAT_PIECEWISE_LINEAR_PLASTICITY``,

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default


    matrigid = MatRigid(mass_density=7.83e-6, young_modulus=207, poisson_ratio=0.3)
    matplastic = MatPiecewiseLinearPlasticity(mass_density=7.83e-6, young_modulus=207, yield_stress=0.2, tangent_modulus=2)
 








.. GENERATED FROM PYTHON SOURCE LINES 88-95

Define section properties and assign materials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that you have materials with the material ID corresponding to
the Part ID, you can assign these materials to the
parts. also define the section properties, element
formulations, and constraints.


.. GENERATED FROM PYTHON SOURCE LINES 95-109

.. code-block:: default


    plate = ShellPart(1)
    plate.set_element_formulation(ShellFormulation.BELYTSCHKO_TSAY)
    plate.set_material(matplastic)
    plate.set_thickness(1)
    plate.set_integration_points(5)
    ballplate.parts.add(plate)

    ball = SolidPart(2)
    ball.set_material(matrigid)
    ball.set_element_formulation(SolidFormulation.CONSTANT_STRESS_SOLID_ELEMENT)
    ballplate.parts.add(ball)









.. GENERATED FROM PYTHON SOURCE LINES 110-113

Define surface-to-surface contacts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Define single-surface contact between predefined part set.

.. GENERATED FROM PYTHON SOURCE LINES 113-119

.. code-block:: default


    selfcontact = Contact(type=ContactType.AUTOMATIC)
    surf1 = ContactSurface(PartSet([1, 2]))
    selfcontact.set_slave_surface(surf1)
    ballplate.contacts.add(selfcontact)








.. GENERATED FROM PYTHON SOURCE LINES 120-123

Define nodal single point constraints.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Constrain the nodes in the spc list

.. GENERATED FROM PYTHON SOURCE LINES 123-131

.. code-block:: default


    spc = [34,35,51,52,68,69,85,86,102,103,119,120,136,137,153,154,170,171,187,188,204,205,221,222,238,239,255,256]
    for i in range(1,19):
        spc.append(i)
    for i in range(272,290):
        spc.append(i)
    ballplate.boundaryconditions.create_spc(NodeSet(spc),rx=False,ry=False,rz=False)








.. GENERATED FROM PYTHON SOURCE LINES 132-136

Define initial condition.
~~~~~~~~~~~~~~~~~~~~~~~~~
Use the ``create_velocity_node`` method 
to initialize the velocity components in the desired direction.

.. GENERATED FROM PYTHON SOURCE LINES 136-139

.. code-block:: default

    for i in range(1,1652):
        ballplate.initialconditions.create_velocity_node(i,trans=Velocity(0, 0, -10))








.. GENERATED FROM PYTHON SOURCE LINES 140-144

Define database outputs
~~~~~~~~~~~~~~~~~~~~~~~
Define the frequency for the D3PLOT file and write out the input file.


.. GENERATED FROM PYTHON SOURCE LINES 144-148

.. code-block:: default

    solution.set_output_database(glstat=0.1, matsum=0.1, sleout=0.1)
    solution.create_database_binary(dt=1)
    serverpath = solution.save_file()








.. GENERATED FROM PYTHON SOURCE LINES 149-152

Download output file
~~~~~~~~~~~~~~~~~~~~
Download output file from service docker to local <working directory>/output/.

.. GENERATED FROM PYTHON SOURCE LINES 152-159

.. code-block:: default


    serveroutfile = '/'.join((serverpath,"ball_plate.k"))
    downloadpath = os.path.join(os.getcwd(), "output")
    if not os.path.exists(downloadpath):
        os.makedirs(downloadpath)
    downloadfile = os.path.join(downloadpath,"ball_plate.k")
    solution.download(serveroutfile,downloadfile)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.336 seconds)


.. _sphx_glr_download_examples_Explicit_ball_plate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ball_plate.py <ball_plate.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ball_plate.ipynb <ball_plate.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
