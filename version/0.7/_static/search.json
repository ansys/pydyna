[
    {
        "objectID": "examples/John_Reid_Pipe/sg_execution_times",
        "href": "examples/John_Reid_Pipe/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:08.158 total execution time for 1 file from examples/John_Reid_Pipe:\nExample\nTime\nMem (MB)\nsphx_glr_examples_John_Reid_Pipe_plot_john_pipe.py (plot_john_pipe.py)\n00:08.158\n0.0\nComputation times\nplot_john_pipe.py"
    },
    {
        "objectID": "examples/Explicit/index",
        "href": "examples/Explicit/index.html#explicit-examples",
        "title": "Explicit examples",
        "section": "Explicit examples",
        "text": "These examples show how to create and use explicit models.\nsphx_glr_examples_Explicit_ball_plate.py\nsphx_glr_examples_Explicit_belted_dummy.py\nExplicit examples"
    },
    {
        "objectID": "examples/Taylor_Bar/sg_execution_times",
        "href": "examples/Taylor_Bar/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:48.127 total execution time for 1 file from examples/Taylor_Bar:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Taylor_Bar_plot_taylor_bar.py (plot_taylor_bar.py)\n00:48.127\n0.0\nComputation times\nplot_taylor_bar.py"
    },
    {
        "objectID": "examples/ICFD/icfd_strong_fsi",
        "href": "examples/ICFD/icfd_strong_fsi.html#strong-fsi",
        "title": "Strong FSI",
        "section": "Strong FSI",
        "text": "This example shows a simple FSI (fluid-structure interaction) coupling problem\nusing strong FSI. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.043 seconds)\nDownload Jupyter notebook: icfd_strong_fsi.ipynb\nDownload Python source code: icfd_strong_fsi.py\nDownload zipped: icfd_strong_fsi.zip\nGallery generated by Sphinx-Gallery\nStrong FSI\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_strong_fsi.ipynb\nDownload Python source code: icfd_strong_fsi.py\nDownload zipped: icfd_strong_fsi.zip"
    },
    {
        "objectID": "examples/EM/em_resistive_heating_2d",
        "href": "examples/EM/em_resistive_heating_2d.html#resistive-heating-2d",
        "title": "Resistive heating 2D",
        "section": "Resistive heating 2D",
        "text": "This example of a simple metal bar imposes potential on both ends. The executable\nfile for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.033 seconds)\nDownload Jupyter notebook: em_resistive_heating_2d.ipynb\nDownload Python source code: em_resistive_heating_2d.py\nDownload zipped: em_resistive_heating_2d.zip\nGallery generated by Sphinx-Gallery\nResistive heating 2D\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_resistive_heating_2d.ipynb\nDownload Python source code: em_resistive_heating_2d.py\nDownload zipped: em_resistive_heating_2d.zip"
    },
    {
        "objectID": "examples/ICFD/icfd_imposed_move",
        "href": "examples/ICFD/icfd_imposed_move.html#imposed-move",
        "title": "Imposed move",
        "section": "Imposed move",
        "text": "This example shows how to impose displacements on fluid nodes through the\nuse of the ICFD_CONTROL_IMPOSED_MOVE keyword. The executable file for\nLS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.033 seconds)\nDownload Jupyter notebook: icfd_imposed_move.ipynb\nDownload Python source code: icfd_imposed_move.py\nDownload zipped: icfd_imposed_move.zip\nGallery generated by Sphinx-Gallery\nImposed move\nICFD_CONTROL_IMPOSED_MOVE\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_imposed_move.ipynb\nDownload Python source code: icfd_imposed_move.py\nDownload zipped: icfd_imposed_move.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansysdynacorepremodel",
        "title": "ansys.dyna.core.pre.model",
        "section": "ansys.dyna.core.pre.model",
        "text": "Module containing the managing logic of the PyDYNA model.\nansys.dyna.core.pre.model"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#classes",
        "title": "ansys.dyna.core.pre.model > Classes",
        "section": "Classes",
        "text": "Model\nContains all information about Ansys PyDYNA Model.\nClasses\nModel"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#module-contents",
        "title": "ansys.dyna.core.pre.model > Module Contents",
        "section": "Module Contents",
        "text": "Contains all information about Ansys PyDYNA Model.\nAdd boundary spc nodes.\nAdd initial velocity nodes.\nAdd rigidwall data.\nGet the solid elements.\nsolid element connectivity,list = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\nGet the shell elements.\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\nGet nodes.\nnode coordinates,list = [[x1,y1,z1],[x2,y2,z2],…]\nGet the part by ID.\nID of the part.\nPart or None if the given part ID doesn’t exist.\nGet initial velocity data.\nGet boundary spc data.\nGet rigidwall data.\nGet the list of parts for the model.\nList of parts for the model.\nModule Contents\nList\npython:list\npython:list\npython:int\nPart\nNone\nList\nPart"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model",
        "title": "ansys.dyna.core.pre.model > Module Contents > Model",
        "section": "Module Contents > Model",
        "text": "class ansys.dyna.core.pre.model.Model(stub)\n\nContains all information about Ansys PyDYNA Model.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nadd_bdy_spc(nodes)\n\nAdd boundary spc nodes.\n\n!! processed by numpydoc !!\n\n\n\nadd_init_velocity(nodes)\n\nAdd initial velocity nodes.\n\n!! processed by numpydoc !!\n\n\n\nadd_rigidwall(data: List)\n\nAdd rigidwall data.\n\n!! processed by numpydoc !!\n\n\n\nget_solid_elements() -> List\n\nGet the solid elements.\n\nReturns\n\nList\n\nsolid element connectivity,list = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\n\n!! processed by numpydoc !!\n\n\n\nget_shell_elements() -> List\n\nGet the shell elements.\n\nReturns\n\npython:list\n\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\n\n!! processed by numpydoc !!\n\n\n\nget_nodes() -> List\n\nGet nodes.\n\nReturns\n\npython:list\n\nnode coordinates,list = [[x1,y1,z1],[x2,y2,z2],…]\n\n!! processed by numpydoc !!\n\n\n\nget_part(id: int) -> ansys.dyna.core.pre.part.Part\n\nGet the part by ID.\n\nParameters\n\nid\n\npython:int\n\nID of the part.\n\nReturns\n\nPart\n\nPart or None if the given part ID doesn’t exist.\n\n!! processed by numpydoc !!\n\n\n\nget_init_velocity() -> List\n\nGet initial velocity data.\n\n!! processed by numpydoc !!\n\n\n\nget_bdy_spc() -> List\n\nGet boundary spc data.\n\n!! processed by numpydoc !!\n\n\n\nget_rigidwall(id)\n\nGet rigidwall data.\n\n!! processed by numpydoc !!\n\n\n\nproperty parts: List[ansys.dyna.core.pre.part.Part]\n\nGet the list of parts for the model.\n\nReturns\n\nList[Part]\n\nList of parts for the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.stub",
        "title": "ansys.dyna.core.pre.model > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.add_bdy_spc",
        "title": "ansys.dyna.core.pre.model > Module Contents > add_bdy_spc",
        "section": "Module Contents > add_bdy_spc",
        "text": "add_bdy_spc(nodes)\n\nAdd boundary spc nodes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.add_init_velocity",
        "title": "ansys.dyna.core.pre.model > Module Contents > add_init_velocity",
        "section": "Module Contents > add_init_velocity",
        "text": "add_init_velocity(nodes)\n\nAdd initial velocity nodes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.add_rigidwall",
        "title": "ansys.dyna.core.pre.model > Module Contents > add_rigidwall",
        "section": "Module Contents > add_rigidwall",
        "text": "add_rigidwall(data: List)\n\nAdd rigidwall data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_solid_elements",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_solid_elements",
        "section": "Module Contents > get_solid_elements",
        "text": "get_solid_elements() -> List\n\nGet the solid elements.\n\nReturns\n\nList\n\nsolid element connectivity,list = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_shell_elements",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_shell_elements",
        "section": "Module Contents > get_shell_elements",
        "text": "get_shell_elements() -> List\n\nGet the shell elements.\n\nReturns\n\npython:list\n\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_nodes",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_nodes",
        "section": "Module Contents > get_nodes",
        "text": "get_nodes() -> List\n\nGet nodes.\n\nReturns\n\npython:list\n\nnode coordinates,list = [[x1,y1,z1],[x2,y2,z2],…]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_part",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_part",
        "section": "Module Contents > get_part",
        "text": "get_part(id: int) -> ansys.dyna.core.pre.part.Part\n\nGet the part by ID.\n\nParameters\n\nid\n\npython:int\n\nID of the part.\n\nReturns\n\nPart\n\nPart or None if the given part ID doesn’t exist.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_init_velocity",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_init_velocity",
        "section": "Module Contents > get_init_velocity",
        "text": "get_init_velocity() -> List\n\nGet initial velocity data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_bdy_spc",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_bdy_spc",
        "section": "Module Contents > get_bdy_spc",
        "text": "get_bdy_spc() -> List\n\nGet boundary spc data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.get_rigidwall",
        "title": "ansys.dyna.core.pre.model > Module Contents > get_rigidwall",
        "section": "Module Contents > get_rigidwall",
        "text": "get_rigidwall(id)\n\nGet rigidwall data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/model/index",
        "href": "autoapi/ansys/dyna/core/pre/model/index.html#ansys.dyna.core.pre.model.Model.parts",
        "title": "ansys.dyna.core.pre.model > Module Contents > parts",
        "section": "Module Contents > parts",
        "text": "property parts: List[ansys.dyna.core.pre.part.Part]\n\nGet the list of parts for the model.\n\nReturns\n\nList[Part]\n\nList of parts for the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#airbag-deploy-postprocessing",
        "title": "Airbag deploy postprocessing",
        "section": "Airbag deploy postprocessing",
        "text": "This example shows how to animate the d3plot and display the stress on the airbag.\nAirbag deploy postprocessing"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#perform-required-imports",
        "title": "Airbag deploy postprocessing > Perform required imports",
        "section": "Perform required imports",
        "text": "Import  required imports.\nfrom ansys.dpf import core as dpf\nPerform required imports"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#connect-to-dpf-server",
        "title": "Airbag deploy postprocessing > Connect to DPF Server",
        "section": "Connect to DPF Server",
        "text": "Connect to the DPF Server.\ndpf.connect_to_server()\nConnect to DPF Server"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#load-model",
        "title": "Airbag deploy postprocessing > Load model",
        "section": "Load model",
        "text": "Load the model and print the contents of the model. All parts in the model\nare shell parts. Model information includes the result components and the\nnumber of states available in the d3plot.\nLoad model"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#extract-stress-on-all-parts",
        "title": "Airbag deploy postprocessing > Extract stress on all parts",
        "section": "Extract stress on all parts",
        "text": "Extract the stress on all the parts. The stress fields container is scoped to\nall time frequencies to be able to animate the change in stress on the\nairbag fabric.\nExtract stress on all parts"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#extract-stress-on-mid-integration-point",
        "title": "Airbag deploy postprocessing > Extract stress on mid integration point",
        "section": "Extract stress on mid integration point",
        "text": "In the d3plot file, the shell stress is reported at three through-thickness\npoints by default. Extract the stress on the mid integration point.\nExtract stress on mid integration point"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#plot-deformed-state",
        "title": "Airbag deploy postprocessing > Plot deformed state",
        "section": "Plot deformed state",
        "text": "Plot the deformed state at 9 milliseconds.\nPlot deformed state"
    },
    {
        "objectID": "examples/Airbag/airbag_post",
        "href": "examples/Airbag/airbag_post.html#display-stress-field-and-set-mesh",
        "title": "Airbag deploy postprocessing > Display stress field and set mesh",
        "section": "Display stress field and set mesh",
        "text": "Display the stress field and set the mesh to deform by the displacement of\nthe nodes.\nTotal running time of the script: (0 minutes 0.001 seconds)\nDownload Jupyter notebook: airbag_post.ipynb\nDownload Python source code: airbag_post.py\nDownload zipped: airbag_post.zip\nGallery generated by Sphinx-Gallery\nDisplay stress field and set mesh\nDownload Jupyter notebook: airbag_post.ipynb\nDownload Python source code: airbag_post.py\nDownload zipped: airbag_post.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansysdynacorepredynabase",
        "title": "ansys.dyna.core.pre.dynabase",
        "section": "ansys.dyna.core.pre.dynabase",
        "text": "Module for creating a DYNA input deck.\nansys.dyna.core.pre.dynabase"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#classes",
        "title": "ansys.dyna.core.pre.dynabase > Classes",
        "section": "Classes",
        "text": "Motion\nCreate a collection of name/value pairs.\nRWMotion\nCreate a collection of name/value pairs.\nDOF\nCreate a collection of name/value pairs.\nSwitch\nCreate a collection of name/value pairs.\nInvariantNode\nCreate a collection of name/value pairs.\nEnergyFlag\nCreate a collection of name/value pairs.\nHourglassControl\nCreate a collection of name/value pairs.\nBulkViscosity\nCreate a collection of name/value pairs.\nCaseType\nCreate a collection of name/value pairs.\nOutputEcho\nCreate a collection of name/value pairs.\nBox\nDefines a box-shaped volume.\nCurve\nDefines a curve as a function of time.\nFunction\nDefines a function that can be referenced by a limited number of keyword options.\nTable2D\nDefine a table,a curve ID is specified for each value defined in the table.\nPoint\nDefines a point.\nDirection\nDefines a direction.\nTransform\nDefines a transformation.\nVelocity\nDefines a translational velocity.\nRotVelocity\nDefines a rotational velocity.\nBaseObj\nDefine the base object.\nParameterType\nContains the parameter types.\nDynaBase\nContains methods for creating a general LS-DYNA keyword.\nBaseSet\nDefines the base class for all set classes.\nNodeSet\nDefines a nodal set with some identical or unique attributes.\nSetType\nContains the enums for setting types.\nNodesetGeneral\nIncludes nodal points of element sets.\nNodeSetBox\ninclude the nodes inside boxes.\nPartSet\nDefines a set of parts with optional attributes.\nSegmentSet\nDefines a set of segments with optional identical or unique attributes.\nBeamFormulation\nCreate a collection of name/value pairs.\nShellFormulation\nCreate a collection of name/value pairs.\nIGAFormulation\nCreate a collection of name/value pairs.\nSolidFormulation\nCreate a collection of name/value pairs.\nHourglassType\nCreate a collection of name/value pairs.\nBeamSection\nDefines cross-sectional properties for beams, trusses, discrete beams, and cable elements.\nShellSection\nDefines section properties for shell elements.\nIGASection\nDefines section properties for isogeometric shell elements.\nPart\nDefines the part object.\nBeamPart\nDefines a beam part.\nShellPart\nDefines a shell part.\nIGAPart\nDefines an isogeometric shell part.\nSolidPart\nDefines a solid part.\nDRO\nCreate a collection of name/value pairs.\nDiscretePart\nDefines a discrete part.\nParts\nStores the part list.\nAnalysisType\nCreate a collection of name/value pairs.\nTimestepCtrol\nCreate a collection of name/value pairs.\nIntegration\nCreate a collection of name/value pairs.\nImplicitAnalysis\nActivates implicit analysis and defines associated control parameters.\nThermalAnalysisType\nCreate a collection of name/value pairs.\nThermalAnalysisTimestep\nCreate a collection of name/value pairs.\nThermalAnalysis\nActivates thermal analysis and defines associated control parameters.\nContactCategory\nCreate a collection of name/value pairs.\nContactType\nCreate a collection of name/value pairs.\nOffsetType\nCreate a collection of name/value pairs.\nContactFormulation\nCreate a collection of name/value pairs.\nSBOPT\nCreate a collection of name/value pairs.\nContactSurface\nDefines a contact interface.\nContact\nProvide a way of treating interaction between disjoint parts.\nContactGroup\nCreate a contact group.\nConstraint\nProvides a way of constraining degrees of freedom to move together in some way.\nBoundaryCondition\nProvides a way of defining imposed motions on boundary nodes.\nInitialCondition\nProvides a way of initializing velocities and detonation points.\nRigidwallCylinder\nDefines a rigid wall with a cylinder form.\nRigidwallSphere\nDefines a rigid wall with a sphere form.\nRigidwallPlanar\nDefines planar rigid walls with either finite or infinite size.\nGravityOption\nCreate a collection of name/value pairs.\nGravity\nDefines body force loads using global axes directions.\nClasses\nMotion\nRWMotion\nDOF\nSwitch\nInvariantNode\nEnergyFlag\nHourglassControl\nBulkViscosity\nCaseType\nOutputEcho\nBox\nCurve\nFunction\nTable2D\nPoint\nDirection\nTransform\nVelocity\nRotVelocity\nBaseObj\nParameterType\nDynaBase\nBaseSet\nNodeSet\nSetType\nNodesetGeneral\nNodeSetBox\nPartSet\nSegmentSet\nBeamFormulation\nShellFormulation\nIGAFormulation\nSolidFormulation\nHourglassType\nBeamSection\nShellSection\nIGASection\nPart\nBeamPart\nShellPart\nIGAPart\nSolidPart\nDRO\nDiscretePart\nParts\nAnalysisType\nTimestepCtrol\nIntegration\nImplicitAnalysis\nThermalAnalysisType\nThermalAnalysisTimestep\nThermalAnalysis\nContactCategory\nContactType\nOffsetType\nContactFormulation\nSBOPT\nContactSurface\nContact\nContactGroup\nConstraint\nBoundaryCondition\nInitialCondition\nRigidwallCylinder\nRigidwallSphere\nRigidwallPlanar\nGravityOption\nGravity"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents",
        "section": "Module Contents",
        "text": "Bases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines a box-shaped volume.\nCreate box.\nDefines a curve as a function of time.\nFor example, load (ordinate value).\nCreate a curve.\nDefines a function that can be referenced by a limited number of keyword options.\nCreate function.\nDefine a table,a curve ID is specified for each value defined in the table.\nCreate Table2D.\nDefines a point.\nDefines a direction.\nDefines a transformation.\nDefines a transformation matrix.\nCreate a transformation.\nDefines a translational velocity.\nDefines a rotational velocity.\nDefine the base object.\nGet the data of the object.\nBases: enum.Enum\nContains the parameter types.\nContains methods for creating a general LS-DYNA keyword.\nGet the stub of the DynaBase object.\nSet the structural time step size control using different options.\nScale factor for computed time step. The default is 0.9.\nBasis of the time size calculation for four-node shell elements.\nThe default is 0.\nTime step size for mass scaled solutions. The default is 0.0.\nLoad curve that limits the maximum time step size. The default\nis None.\nTrue when successful, False when failed.\nDefine control parameters that can improve the accuracy of the calculation.\nGlobal flag for 2nd order objective stress updates.\nInvariant node numbering for shell and solid elements.\nPart set ID for objective stress updates. The default is 0.\nImplicit accuracy flag.\nExplicit accuracy parameter.\nEQ.0.0: Off\nGT.0.0: On\nTrue when successful, False when failed.\nProvide controls for energy dissipation options.\nHourglass energy calculation option.\nRigidwall energy dissipation option.\nEQ.1: Energy dissipation is not computed.\nEQ.2: Energy dissipation is computed.\nSliding interface energy dissipation option.\nEQ.1: Energy dissipation is not computed.\nEQ.2: Energy dissipation is computed.\nRayleigh energy dissipation option.\nEQ.1: Energy dissipation is not computed.\nEQ.2: Energy dissipation is computed.\nInitial reference geometry energy option.\nEQ.1: Initial reference geometry energy is not computed.\nEQ.2: Initial reference geometry energy is computed.\nTrue when successful, False when failed.\nSet miscellaneous output parameters.\nWhether to suppress printing during the input phase flag for the D3HSP file.\nThe default is True, which means that none of these are printed: nodal\ncoordinates, element connectivities, rigid wall definitions, nodal SPCs,\ninitial velocities, initial strains, adaptive constraints, and SPR2/SPR3\nconstraints. If False, no suppression occurs.\nPrint suppression setting during the input phase flag for the echo file.\nOptions are:\nALL_DATA_PRINTED: All data is printed.\nSUPPRESSED_NODAL_PRINTING: Nodal printing is suppressed.\nSUPPRESSED_ELEMENT_PRINTING: Element printing is suppressed.\nSUPPRESSED_NODAL_AND_ELEMENT_PRINTING : Both nodal and element printing is suppressed.\nRedefine the default values for the hourglass control type and coefficient.\nDefault hourglass control type.\nDefault hourglass coefficient. The default is 0..\nTrue when successful, False when failed.\nReset the default values of the bulk viscosity coefficients globally.\nDefault quadratic viscosity coefficient. The default is 1.5.\nDefault linear viscosity coefficient. The default is 0.06.\nDefault bulk viscosity type.\nTrue when successful, False when failed.\nDefine initial nodal point temperatures on all nodes.\nTemperature at node. The default is 0.\nTrue when successful, False when failed.\nProvide controls for computing shell response.\nShell element warpage angle in degrees. The default is 20.\nSorting of triangular shell elements to automatically switch\ndegenerate quadrilateral shell formulations to more suitable\ntriangular shell formulations. The default is 0.\nShell normal update option. The default is 1.\nShell thickness change option for deformable shells. The\ndefault is 0.\nDefault shell formulation. The default is 2.\nWarping stiffness for Belytschko-Tsay shells. The\ndefault is 2.\nPlane stress plasticity option. The default is 1.\nProjection method for the warping stiffness in the Belytschko-Tsay\nshell and the Belytschko-Wong-Chiang elements. The default is\n0.\nIn-plane integration rule for the eight-node quadratic shell element.\nThe default is 0.\nEQ.2: 2*2 Gauss quadrature\nEQ.3: 3*3 Gauss quadrature\nTrue when successful, False when failed.\nProvide controls for a solid element response.\nAutomatic sorting of tetrahedral and pentahedral elements to avoid\nuse of degenerate formulations for these shapes. The default is 0.\nEQ.0: No sorting\nEQ.1: Sort\nMethod to use in the calculation of the deformation gradient matrix.\nThe default is 1.\nNumber of integration points used in the quadratic tetrahedron elements.\nThe default is 4.\nOutput option for stresses in solid elements used as spot welds with\nmaterial \\*MAT_SPOTWELD. The default is 1.\nSolid element erosion from negative volume is limited only to solid elements in\nthe part set indicated by PSFAIL. The default is 0.\nTolerance for Jacobian in four-point, 10-noded quadratic tetrahedra. The\ndefault is 0.0.\nBreaking LS-DYNA convention ICOH is interpreted digit-wise. The default\nis 0.\nFlag for whether to invoke a consistent tangent stiffness matrix\nfor the pressure averaged tetrahedron. The default is 0, in which\ncase this matrix is not invoked. If this parameter is set to 1,\nthis matrix is invoked.\nTrue when successful, False when failed.\nChange defaults for computation with contact surfaces.\nScale factor for rigid wall penalties, which treat nodal points interacting\nwith rigid walls.\nFlag for whether to consider shell thickness offsets in non-automatic\nsurface-to-surface and non-automatic nodes-to-surface type contacts.\nThe default is 0, in which case these offsets are not considered.\nIf this parameter is set to 1, these offsets are considered.\nFlag for whether to automatically reorient contact interface segments\nduring initialization. The default is 1, in which case reorientation\nautomatically occurs. If this parameter is set to 0, reorientation\ndoes not occur.\nFlag for whether to determine default contact thickness for shells in single\nsurface contact types. The default is 0, in which case default contact\nthickness is not determined. If this parameter is set to 1, default\ncontact thickness is determined.\nFlag for whether to ignore initial penetrations in the \\*CONTACT_AUTOMATIC\noptions. The default is 0, in which case initial penetrations are ignored.\nIf this parameter is set to 1, initial penetrations are not ignored.\nFlag for whether to use isogeometric shells for contact detection when the\ncontact involves isogeometric shells. The default is 0, which means\nisogeometric shells are not used. If this parameter is set to 1, isogeometric\nshells are used.\nTrue when successful, False when failed.\nDefine mass-weighted nodal damping.\nMass-weighted nodal damping applies globally to the\nnodes of deformable bodies and to the mass center of\nrigid bodies.\nLoad curve ID, which specifies the system damping constant\nversus the time. The default is 0.\nSystem damping constant. The default is 0.0.\nTrue when successful, False when failed.\nGet solid elements.\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\nlist[1],node coordinates,list[1] = [[x1,y1,z1],[x2,y2,z2],…]\nCreate general keyword.\nKeyword card name.\nKeyword data.\nCreate a \\*INITIAL_VELOCITY keyword.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n*INITIAL_VELOCITY\n&       vx        vy        vz       vxr       vyr       vzr\n1.480E+01 0.000E+00 0.000E+00 0.000E+00 0.000E+00 0.000E+00\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nopcode = “INITIAL_VELOCITY”\nkeyworddata = “0\ncreate_general_keyword(opcode = opcode,keyworddata=keyworddata)\nAdd entities to an object.\nInclude independent input files containing model data, allow for node, element, and set\nIDs to be offset and for coordinates and constitutive parameters to be transformed and scaled.\nName of file to include in the keyword file.\nOffset to node ID.\nOffset to element ID.\nOffset to part ID.\nOffset to material ID.\nOffset to set ID.\nOffset to function ID, table ID, and curve ID.\nDefinition for the transformation.\nSave keyword files.\nTrue when successful, False when failed.\nDefines the base class for all set classes.\nDefines a nodal set with some identical or unique attributes.\nCreate a node set.\nGet the number of nodes in the node set.\nGet the node ID by position.\nGet the node ID.\nBases: enum.Enum\nContains the enums for setting types.\nBases: BaseSet\nIncludes nodal points of element sets.\nElement sets are defined by SET_XXXX_LIST,\nwhere XXXX can be SHELL, SOLID, BEAM,\nTSHELL or DISCRETE.\nCreate a node set.\nBases: BaseSet\ninclude the nodes inside boxes.\nA list of BOX.\nCreate a node set.\nBases: BaseSet\nDefines a set of parts with optional attributes.\nCreate a part set.\nGet the number of parts in the part set.\nGet a part ID by position.\nGet the part ID.\nBases: BaseSet\nDefines a set of segments with optional identical or unique attributes.\nDefine segments.\nCreate a segment set.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines cross-sectional properties for beams, trusses, discrete beams, and cable elements.\nDefines section properties for shell elements.\nDefines section properties for isogeometric shell elements.\nDefines the part object.\nSet the material.\nSet the element formulation.\nSet the stiffness damping coefficient.\nSet extra nodes for the rigid body.\nExtra nodes list.\nSet initial translational and rotational velocities for the rigid body.\nInitial translational and rotational velocities are set\nat the center of gravity for a rigid body or a nodal rigid body.\nSet properties for the part.\nBases: Part\nDefines a beam part.\nA beam part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\nSet the type for the cross section.\nSet the outer diameter for the cross section.\nSet properties for the beam part.\nBases: Part\nDefines a shell part.\nA shell part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\nSet the hourglass type, which identifies the bulk viscosity.\nDefault hourglass control type.\nDefault hourglass coefficient. The default is 0..\nSet the shear correction factor, which scales the transverse shear stress.\nSet the number of through thickness integration points.\nSet the printout option.\nSet the shell thickness.\nGenerate and place discrete element sphere (DES) elements on the surface of shell elements.\nPart ID for the generated DES elements. The default is 0.\nSection ID for the generated DES elements. The default is 0.\nNumber of equally spaced DES elements to create on a shell element in each local shell direction.\nThe default is 1.\nIf defined, this card creates a node set with ID NSID for the nodes generated by this card.\nThe default is 0.\nScale factor for determining the DES radius. The default is 1.\nSet properties for the shell part.\nBases: Part\nDefines an isogeometric shell part.\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\nSet the shear correction factor, which scales the transverse shear stress.\nSet the shell thickness.\nSet properties for the IGA part.\nBases: Part\nDefines a solid part.\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\nSet the hourglass type, which identifies the bulk viscosity.\nDefault hourglass control type.\nDefault hourglass coefficient. The default is 0..\nSet the properties for the solid part.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: Part\nDefines a discrete part.\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\nSet the displacement, which defines the rotation.\nSet properties for the discrete part.\nStores the part list.\nAdd a part to the part list.\nGet the number of shell parts.\nSet properties for added parts.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nActivates implicit analysis and defines associated control parameters.\nDefine the initial time step size.\nDefine parameters for automatic time step control during implicit analysis.\nAutomatic time step control flag.\nOptimum equilibrium iteration count per time step. The default is 11.\nTrue when successful, False when failed.\nActivate implicit dynamic analysis and define time integration constants.\nImplicit analysis type.\nNewmark time integration constant. The default is 0.5.\nNewmark time integration constant. The default is 0.25.\nTrue when successful, False when failed.\nActivate implicit eigenvalue analysis and define associated input parameters.\nNumber of eigenvalues to extract. The default is 0.\nShift scale. The default is 0.\nTrue when successful, False when failed.\nSpecify whether a linear or nonlinear solution is desired.\nSolution method for implicit analysis. The default is 12.\nIteration limit between automatic stiffness reformations.\nThe default is 11.\nStiffness reformation limit per time step. The default is\n55.\nAbsolute convergence tolerance. The default is 1e-10.\nTrue when successful, False when failed.\nUse the consistent mass matrix in implicit dynamics and eigenvalue solutions.\nCreate an implicit analysis.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: BaseObj\nActivates thermal analysis and defines associated control parameters.\nSet time step controls for the thermal solution in a thermal only or coupled structural/thermal analysis.\nTime step control.\nInitial thermal time step. The default is 0.\nSet options for the thermal solution in a thermal only or coupled structural-thermal analysis.\nThermal analysis type.\nSet parameters for a nonlinear thermal or coupled structural/thermal analysis.\nConvergence tolerance for temperature.\nDivergence control parameter.\nCreate a thermal analysis.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines a contact interface.\nInclude in the contact definition only those SURFA nodes/segments within a box.\nBox-shaped volume.\nSet the contact thickness for the SURFA surface.\nContact thickness.\nSet the scale factor on the default surface penalty stiffness.\nScale factor. The default is 1.0.\nProvide a way of treating interaction between disjoint parts.\nSet the mortar contact.\nA mort contact is a segment-to-segment, penalty-based contact.\nSet the contact allow for failure.\nA tieback is a special case of this. After failure, the contact\nusually becomes a normal one-way, two-way, or single surface version.\nSet the coefficient of friction.\nStatic coefficient of friction. The default is 0.\nDynamic coefficient of friction.  The default is 0.\nSet the birth and death time to active and deactivate the contact.\nTime to activate the contact. The default is 0.\nTime to deactivate the contact. The default is 1e20.\nIgnore initial penetrations.\nSet the slave contact interface.\nSet the master contact interface.\nSet the contact formulation.\nCreate a contact.\nCreate a contact group.\nAdd a contact in the group.\nCreate contacts.\nGet the number of contact objects.\nProvides a way of constraining degrees of freedom to move together in some way.\nDefine massless spot welds between non-contiguous nodal pairs.\nID for the first node.\nID for the second node.\nTrue when successful, False when failed.\nCreate a nodal rigid body, which is a rigid body that consists of defined nodes.\nNode set that defines the rigid body.\nTrue when successful, False when failed.\nCreate a joint between two rigid bodies.\nList of nodes for creating the joint.\nRelative penalty stiffness. The default is 1.0.\nDamping scale factor on the default damping value.\nThe default is 1.0.\nMerge two rigid bodies.\nOne rigid body, called the constrained rigid body,\nis merged into another rigid body, called the lead rigid body.\nPart ID for the lead rigid body. The default is 0.\nPart ID for the constrained rigid body. The default is 0.\nCreate a constraint.\nProvides a way of defining imposed motions on boundary nodes.\nDefine nodal single point constraints.\nNode set.\nTranslational constraint in local x/y/z-direction.\nRotational constraint about local x/y/z-axis.\nCreate an imposed nodal motion on a node or set of nodes.\nAn imposed nodal motion can be a velocity, acceleration, or displacement.\nPart set.\nCurve ID or function ID to describe the motion value as a function of time.\nVelocity/Acceleration/Displacement flag.\nApplicable degrees of freedom.\nLoad curve scale factor. The default is 1.\nCreate temperature boundary conditions for a thermal or coupled thermal/structural analysis.\nNode set.\nTemperature, T, specification. The default is None.\nTemperature, T, curve multiplier. The default is 1.\nApply a convection boundary condition on SEGMENT_SET for a thermal analysis.\nSegment set.\nConvection heat transfer coefficient.\nCurve multiplier for convection heat transfer coefficient.\nEnvironment temperature.\nCurve multiplier for environment temperature.\nCreate a boundary condition.\nProvides a way of initializing velocities and detonation points.\nCreate initial velocities for rotating and/or translating bodies.\nDefine initial nodal point velocities for a node.\nCreate an initial nodal point temperature.\nCreate an initial condition.\nBases: BaseObj\nDefines a rigid wall with a cylinder form.\nCoordinates of the tail of the normal vector.\nThe default is (0, 0, 0).\nCoordinates of the head of the normal vector.\nThe default is (0, 0, 0).\nRadius of the cylinder. The default is 1.\nLength of cylinder. The default is 10.\nSet the prescribed motion.\nGet the rigidwall data.\nCreate a rigidwall cylinder.\nBases: BaseObj\nDefines a rigid wall with a sphere form.\nThe center of sphere.\nThe default is (0, 0, 0).\nVector n determines the orintation of the rigidwall,the center define the tail of normal n,\nthe orient define the head of normal n.\nThe default is (0, 0, 0).\nRadius of the sphere. The default is 1.\nSet the prescribed motion.\nGet the rigidwall data.\nCreate a rigidwall sphere.\nBases: BaseObj\nDefines planar rigid walls with either finite or infinite size.\nCoordinate of the tail of the normal vector.\nThe default is (0, 0, 0).\nCoordinate of the head of the normal vector.\nThe default is (0, 0, 0).\nFriction coefficieint in coulomb units. The default is 0.5.\nGet the rigidwall data.\nCreate planar rigid walls.\nBases: enum.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: BaseObj\nDefines body force loads using global axes directions.\nBody force loads are due to a prescribed base acceleration or\nangular velocity.\nDefine a body force.\nModule Contents\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nload (ordinate value)\nenum.Enum\nDynaBase\npython:float\noptional\n0.9\npython:int\noptional\n0\npython:float\noptional\n0.0\nCurve\noptional\nNone\nTrue\nFalse\npython:int\npython:int\npython:int\noptional\n0\npython:int\npython:float\nTrue\nFalse\nenum\npython:int\npython:int\npython:int\npython:int\nTrue\nFalse\noptional\nTrue\nFalse\nOutputEcho\nenum\npython:float\noptional\n0.\nTrue\nFalse\npython:float\noptional\n1.5\npython:float\noptional\n0.06\nenum\nTrue\nFalse\npython:float\noptional\n0\nTrue\nFalse\npython:int\noptional\n20\npython:int\n0\npython:int\noptional\n1\npython:int\noptional\n0\npython:int\noptional\n2\npython:int\noptional\n2\npython:int\noptional\n1\npython:int\noptional\n0\npython:int\noptional\n0\nTrue\nFalse\npython:int\noptional\n0\npython:int\noptional\n1\npython:int\noptional\n4\npython:int\noptional\n\\*MAT_SPOTWELD\n1\npython:int\noptional\n0\npython:float\noptional\n0.0\npython:int\noptional\n0\npython:int\noptional\n0\n1\nTrue\nFalse\npython:float\npython:int\noptional\n0\n1\npython:int\noptional\n1\n0\npython:int\noptional\n0\n1\npython:int\noptional\n\\*CONTACT_AUTOMATIC\n0\n1\npython:int\noptional\n0\n1\nTrue\nFalse\npython:int\noptional\n0\npython:float\noptional\n0.0\nTrue\nFalse\npython:list\npython:str\n\\*INITIAL_VELOCITY\npython:str\npython:int\npython:int\npython:int\npython:int\npython:int\npython:int\nTransform\nTrue\nFalse\nenum.Enum\nBaseSet\nSET_XXXX_LIST\nXXXX\nSHELL\nSOLID\nBEAM\nTSHELL\nDISCRETE\nBaseSet\npython:list\nBaseSet\nBaseSet\npython:list\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nNodeSet\nPart\nPart\nenum\npython:float\noptional\n0.\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\noptional\n1\npython:int\noptional\n0\npython:float\noptional\n1\nPart\nPart\nenum\npython:float\noptional\n0.\nenum.Enum\nPart\nenum.Enum\nenum.Enum\nenum.Enum\npython:int\npython:int\noptional\n11\nTrue\nFalse\nenum\npython:float\noptional\n0.5\npython:float\noptional\n0.25\nTrue\nFalse\npython:int\noptional\n0\npython:float\noptional\n0\nTrue\nFalse\npython:int\noptional\n12\npython:int\noptional\n11\npython:int\noptional\n55\npython:float\noptional\n1e-10\nTrue\nFalse\nenum.Enum\nenum.Enum\nBaseObj\nThermalAnalysisTimestep\npython:float\noptional\n0\nImplicitAnalysis\npython:float\npython:float\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nenum.Enum\nBox\npython:float\npython:int\noptional\n1.0\npython:float\noptional\n0\npython:float\noptional\n0\npython:int\noptional\n0\npython:float\noptional\n1e20\npython:int\npython:int\nTrue\nFalse\nNodeSet\nTrue\nFalse\npython:list\npython:int\noptional\n1.0\npython:int\noptional\n1.0\npython:int\noptional\n0\npython:int\n0\npython:int\npython:int\nCurve\nenum\nenum\npython:int\noptional\n1\npython:int\noptional\nCurve\noptional\nNone\npython:float\noptional\n1\nCurve\npython:float\nCurve\npython:float\nBaseObj\nPoint\noptional\n(0, 0, 0)\nPoint\noptional\n(0, 0, 0)\npython:float\noptional\n1\npython:float\noptional\n10\nBaseObj\nPoint\noptional\n(0, 0, 0)\nPoint\noptional\n(0, 0, 0)\npython:float\noptional\n1\nBaseObj\nPoint\n(0, 0, 0)\nPoint\n(0, 0, 0)\npython:float\noptional\n0.5\nenum.Enum\nBaseObj"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Motion",
        "section": "Module Contents > Motion",
        "text": "class ansys.dyna.core.pre.dynabase.Motion(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nVELOCITY = 0\n\n\n\n\n\nACCELERATION = 1\n\n\n\n\n\nDISPLACEMENT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Motion.VELOCITY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > VELOCITY",
        "section": "Module Contents > VELOCITY",
        "text": "VELOCITY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Motion.ACCELERATION",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ACCELERATION",
        "section": "Module Contents > ACCELERATION",
        "text": "ACCELERATION = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Motion.DISPLACEMENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DISPLACEMENT",
        "section": "Module Contents > DISPLACEMENT",
        "text": "DISPLACEMENT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RWMotion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RWMotion",
        "section": "Module Contents > RWMotion",
        "text": "class ansys.dyna.core.pre.dynabase.RWMotion(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nVELOCITY = 0\n\n\n\n\n\nDISPLACEMENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RWMotion.VELOCITY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > VELOCITY",
        "section": "Module Contents > VELOCITY",
        "text": "VELOCITY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RWMotion.DISPLACEMENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DISPLACEMENT",
        "section": "Module Contents > DISPLACEMENT",
        "text": "DISPLACEMENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DOF",
        "section": "Module Contents > DOF",
        "text": "class ansys.dyna.core.pre.dynabase.DOF(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nX_TRANSLATIONAL = 1\n\n\n\n\n\nY_TRANSLATIONAL = 2\n\n\n\n\n\nZ_TRANSLATIONAL = 3\n\n\n\n\n\nX_ROTATIONAL = 5\n\n\n\n\n\nY_ROTATIONAL = 6\n\n\n\n\n\nZ_ROTATIONAL = 7\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.X_TRANSLATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > X_TRANSLATIONAL",
        "section": "Module Contents > X_TRANSLATIONAL",
        "text": "X_TRANSLATIONAL = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.Y_TRANSLATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Y_TRANSLATIONAL",
        "section": "Module Contents > Y_TRANSLATIONAL",
        "text": "Y_TRANSLATIONAL = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.Z_TRANSLATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Z_TRANSLATIONAL",
        "section": "Module Contents > Z_TRANSLATIONAL",
        "text": "Z_TRANSLATIONAL = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.X_ROTATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > X_ROTATIONAL",
        "section": "Module Contents > X_ROTATIONAL",
        "text": "X_ROTATIONAL = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.Y_ROTATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Y_ROTATIONAL",
        "section": "Module Contents > Y_ROTATIONAL",
        "text": "Y_ROTATIONAL = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DOF.Z_ROTATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Z_ROTATIONAL",
        "section": "Module Contents > Z_ROTATIONAL",
        "text": "Z_ROTATIONAL = 7\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Switch",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Switch",
        "section": "Module Contents > Switch",
        "text": "class ansys.dyna.core.pre.dynabase.Switch(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nOFF = 0\n\n\n\n\n\nON = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Switch.OFF",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > OFF",
        "section": "Module Contents > OFF",
        "text": "OFF = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Switch.ON",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ON",
        "section": "Module Contents > ON",
        "text": "ON = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InvariantNode",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > InvariantNode",
        "section": "Module Contents > InvariantNode",
        "text": "class ansys.dyna.core.pre.dynabase.InvariantNode(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nOFF = 1\n\n\n\n\n\nON_FOR_SHELL_TSHELL = 2\n\n\n\n\n\nON_FOR_SOLID = 3\n\n\n\n\n\nON_FOR_SHELL_TSHELL_SOLID = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InvariantNode.OFF",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > OFF",
        "section": "Module Contents > OFF",
        "text": "OFF = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InvariantNode.ON_FOR_SHELL_TSHELL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ON_FOR_SHELL_TSHELL",
        "section": "Module Contents > ON_FOR_SHELL_TSHELL",
        "text": "ON_FOR_SHELL_TSHELL = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InvariantNode.ON_FOR_SOLID",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ON_FOR_SOLID",
        "section": "Module Contents > ON_FOR_SOLID",
        "text": "ON_FOR_SOLID = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InvariantNode.ON_FOR_SHELL_TSHELL_SOLID",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ON_FOR_SHELL_TSHELL_SOLID",
        "section": "Module Contents > ON_FOR_SHELL_TSHELL_SOLID",
        "text": "ON_FOR_SHELL_TSHELL_SOLID = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.EnergyFlag",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EnergyFlag",
        "section": "Module Contents > EnergyFlag",
        "text": "class ansys.dyna.core.pre.dynabase.EnergyFlag(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nNOT_COMPUTED = 1\n\n\n\n\n\nCOMPUTED = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.EnergyFlag.NOT_COMPUTED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NOT_COMPUTED",
        "section": "Module Contents > NOT_COMPUTED",
        "text": "NOT_COMPUTED = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.EnergyFlag.COMPUTED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > COMPUTED",
        "section": "Module Contents > COMPUTED",
        "text": "COMPUTED = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassControl",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > HourglassControl",
        "section": "Module Contents > HourglassControl",
        "text": "class ansys.dyna.core.pre.dynabase.HourglassControl(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTANDARD_VISCOSITY_FORM = 1\n\n\n\n\n\nFLANAGAN_BELYTSCHKO_INTEGRATION_SOLID = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassControl.STANDARD_VISCOSITY_FORM",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STANDARD_VISCOSITY_FORM",
        "section": "Module Contents > STANDARD_VISCOSITY_FORM",
        "text": "STANDARD_VISCOSITY_FORM = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassControl.FLANAGAN_BELYTSCHKO_INTEGRATION_SOLID",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FLANAGAN_BELYTSCHKO_INTEGRATION_SOLID",
        "section": "Module Contents > FLANAGAN_BELYTSCHKO_INTEGRATION_SOLID",
        "text": "FLANAGAN_BELYTSCHKO_INTEGRATION_SOLID = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BulkViscosity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BulkViscosity",
        "section": "Module Contents > BulkViscosity",
        "text": "class ansys.dyna.core.pre.dynabase.BulkViscosity(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTANDARD_BULK_VISCOSITY = 1\n\n\n\n\n\nRICHARDS_WILKINS_BULK_VISCOSITY = 2\n\n\n\n\n\nCOMPUTE_INTERNAL_ENERGY_DISSIPATED = -2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BulkViscosity.STANDARD_BULK_VISCOSITY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STANDARD_BULK_VISCOSITY",
        "section": "Module Contents > STANDARD_BULK_VISCOSITY",
        "text": "STANDARD_BULK_VISCOSITY = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BulkViscosity.RICHARDS_WILKINS_BULK_VISCOSITY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RICHARDS_WILKINS_BULK_VISCOSITY",
        "section": "Module Contents > RICHARDS_WILKINS_BULK_VISCOSITY",
        "text": "RICHARDS_WILKINS_BULK_VISCOSITY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BulkViscosity.COMPUTE_INTERNAL_ENERGY_DISSIPATED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > COMPUTE_INTERNAL_ENERGY_DISSIPATED",
        "section": "Module Contents > COMPUTE_INTERNAL_ENERGY_DISSIPATED",
        "text": "COMPUTE_INTERNAL_ENERGY_DISSIPATED = -2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > CaseType",
        "section": "Module Contents > CaseType",
        "text": "class ansys.dyna.core.pre.dynabase.CaseType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTRUCTURE = 1\n\n\n\n\n\nICFD = 2\n\n\n\n\n\nSALE = 3\n\n\n\n\n\nEM = 4\n\n\n\n\n\nIGA = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType.STRUCTURE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STRUCTURE",
        "section": "Module Contents > STRUCTURE",
        "text": "STRUCTURE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType.ICFD",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ICFD",
        "section": "Module Contents > ICFD",
        "text": "ICFD = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType.SALE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SALE",
        "section": "Module Contents > SALE",
        "text": "SALE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType.EM",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EM",
        "section": "Module Contents > EM",
        "text": "EM = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.CaseType.IGA",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IGA",
        "section": "Module Contents > IGA",
        "text": "IGA = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OutputEcho",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > OutputEcho",
        "section": "Module Contents > OutputEcho",
        "text": "class ansys.dyna.core.pre.dynabase.OutputEcho(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nALL_DATA_PRINTED = 0\n\n\n\n\n\nSUPPRESSED_NODAL_PRINTING = 1\n\n\n\n\n\nSUPPRESSED_ELEMENT_PRINTING = 2\n\n\n\n\n\nSUPPRESSED_NODAL_AND_ELEMENT_PRINTING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OutputEcho.ALL_DATA_PRINTED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ALL_DATA_PRINTED",
        "section": "Module Contents > ALL_DATA_PRINTED",
        "text": "ALL_DATA_PRINTED = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OutputEcho.SUPPRESSED_NODAL_PRINTING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SUPPRESSED_NODAL_PRINTING",
        "section": "Module Contents > SUPPRESSED_NODAL_PRINTING",
        "text": "SUPPRESSED_NODAL_PRINTING = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OutputEcho.SUPPRESSED_ELEMENT_PRINTING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SUPPRESSED_ELEMENT_PRINTING",
        "section": "Module Contents > SUPPRESSED_ELEMENT_PRINTING",
        "text": "SUPPRESSED_ELEMENT_PRINTING = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OutputEcho.SUPPRESSED_NODAL_AND_ELEMENT_PRINTING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SUPPRESSED_NODAL_AND_ELEMENT_PRINTING",
        "section": "Module Contents > SUPPRESSED_NODAL_AND_ELEMENT_PRINTING",
        "text": "SUPPRESSED_NODAL_AND_ELEMENT_PRINTING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Box",
        "section": "Module Contents > Box",
        "text": "class ansys.dyna.core.pre.dynabase.Box(xmin=0, xmax=0, ymin=0, ymax=0, zmin=0, zmax=0)\n\nDefines a box-shaped volume.\n\n!! processed by numpydoc !!\n\n\n\nxmin = 0\n\n\n\n\n\nxmax = 0\n\n\n\n\n\nymin = 0\n\n\n\n\n\nymax = 0\n\n\n\n\n\nzmin = 0\n\n\n\n\n\nzmax = 0\n\n\n\n\n\ncreate(stub)\n\nCreate box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.xmin",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > xmin",
        "section": "Module Contents > xmin",
        "text": "xmin = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.xmax",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > xmax",
        "section": "Module Contents > xmax",
        "text": "xmax = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.ymin",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ymin",
        "section": "Module Contents > ymin",
        "text": "ymin = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.ymax",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ymax",
        "section": "Module Contents > ymax",
        "text": "ymax = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.zmin",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > zmin",
        "section": "Module Contents > zmin",
        "text": "zmin = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.zmax",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > zmax",
        "section": "Module Contents > zmax",
        "text": "zmax = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Box.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Curve",
        "section": "Module Contents > Curve",
        "text": "class ansys.dyna.core.pre.dynabase.Curve(sfo=1, x=[], y=[], func=None, title='')\n\nDefines a curve as a function of time.\n\nFor example, load (ordinate value).\n\n!! processed by numpydoc !!\n\n\n\nsfo = 1\n\n\n\n\n\nabscissa = []\n\n\n\n\n\nordinate = []\n\n\n\n\n\nfunc = None\n\n\n\n\n\ntitle = ''\n\n\n\n\n\ncreate(stub=None)\n\nCreate a curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.sfo",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > sfo",
        "section": "Module Contents > sfo",
        "text": "sfo = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.abscissa",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > abscissa",
        "section": "Module Contents > abscissa",
        "text": "abscissa = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.ordinate",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ordinate",
        "section": "Module Contents > ordinate",
        "text": "ordinate = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.func",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > func",
        "section": "Module Contents > func",
        "text": "func = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.title",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > title",
        "section": "Module Contents > title",
        "text": "title = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Curve.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub=None)\n\nCreate a curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Function",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Function",
        "section": "Module Contents > Function",
        "text": "class ansys.dyna.core.pre.dynabase.Function(Function=None)\n\nDefines a function that can be referenced by a limited number of keyword options.\n\n!! processed by numpydoc !!\n\n\n\nfunction = None\n\n\n\n\n\ntabulated = False\n\n\n\n\n\nset_tabulated(heading='', function='', x=[], y=[])\n\n\n\n\n\ncreate(stub)\n\nCreate function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Function.function",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > function",
        "section": "Module Contents > function",
        "text": "function = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Function.tabulated",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > tabulated",
        "section": "Module Contents > tabulated",
        "text": "tabulated = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Function.set_tabulated",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_tabulated",
        "section": "Module Contents > set_tabulated",
        "text": "set_tabulated(heading='', function='', x=[], y=[])\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Function.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Table2D",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Table2D",
        "section": "Module Contents > Table2D",
        "text": "class ansys.dyna.core.pre.dynabase.Table2D(title='')\n\nDefine a table,a curve ID is specified for each value defined in the table.\n\n!! processed by numpydoc !!\n\n\n\ntitle = ''\n\n\n\n\n\nvaluecurvelist = []\n\n\n\n\n\nappend(value=0, curve=None)\n\n\n\n\n\ncreate(stub=None)\n\nCreate Table2D.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Table2D.title",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > title",
        "section": "Module Contents > title",
        "text": "title = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Table2D.valuecurvelist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > valuecurvelist",
        "section": "Module Contents > valuecurvelist",
        "text": "valuecurvelist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Table2D.append",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > append",
        "section": "Module Contents > append",
        "text": "append(value=0, curve=None)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Table2D.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub=None)\n\nCreate Table2D.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Point",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Point",
        "section": "Module Contents > Point",
        "text": "class ansys.dyna.core.pre.dynabase.Point(x=0, y=0, z=0)\n\nDefines a point.\n\n!! processed by numpydoc !!\n\n\n\nx = 0\n\n\n\n\n\ny = 0\n\n\n\n\n\nz = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Point.x",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > x",
        "section": "Module Contents > x",
        "text": "x = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Point.y",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > y",
        "section": "Module Contents > y",
        "text": "y = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Point.z",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > z",
        "section": "Module Contents > z",
        "text": "z = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Direction",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Direction",
        "section": "Module Contents > Direction",
        "text": "class ansys.dyna.core.pre.dynabase.Direction(x=0, y=0, z=0)\n\nDefines a direction.\n\n!! processed by numpydoc !!\n\n\n\nx = 0\n\n\n\n\n\ny = 0\n\n\n\n\n\nz = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Direction.x",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > x",
        "section": "Module Contents > x",
        "text": "x = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Direction.y",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > y",
        "section": "Module Contents > y",
        "text": "y = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Direction.z",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > z",
        "section": "Module Contents > z",
        "text": "z = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Transform",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Transform",
        "section": "Module Contents > Transform",
        "text": "class ansys.dyna.core.pre.dynabase.Transform(option=None, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0)\n\nDefines a transformation.\n\n!! processed by numpydoc !!\n\n\n\nparamlist = []\n\n\n\n\n\nadd_transform(option=None, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0)\n\nDefines a transformation matrix.\n\n!! processed by numpydoc !!\n\n\n\ncreate(stub)\n\nCreate a transformation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Transform.paramlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > paramlist",
        "section": "Module Contents > paramlist",
        "text": "paramlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Transform.add_transform",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > add_transform",
        "section": "Module Contents > add_transform",
        "text": "add_transform(option=None, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0)\n\nDefines a transformation matrix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Transform.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a transformation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Velocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Velocity",
        "section": "Module Contents > Velocity",
        "text": "class ansys.dyna.core.pre.dynabase.Velocity(x=0, y=0, z=0)\n\nDefines a translational velocity.\n\n!! processed by numpydoc !!\n\n\n\nx = 0\n\n\n\n\n\ny = 0\n\n\n\n\n\nz = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Velocity.x",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > x",
        "section": "Module Contents > x",
        "text": "x = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Velocity.y",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > y",
        "section": "Module Contents > y",
        "text": "y = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Velocity.z",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > z",
        "section": "Module Contents > z",
        "text": "z = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RotVelocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RotVelocity",
        "section": "Module Contents > RotVelocity",
        "text": "class ansys.dyna.core.pre.dynabase.RotVelocity(x=0, y=0, z=0)\n\nDefines a rotational velocity.\n\n!! processed by numpydoc !!\n\n\n\nx = 0\n\n\n\n\n\ny = 0\n\n\n\n\n\nz = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RotVelocity.x",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > x",
        "section": "Module Contents > x",
        "text": "x = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RotVelocity.y",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > y",
        "section": "Module Contents > y",
        "text": "y = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RotVelocity.z",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > z",
        "section": "Module Contents > z",
        "text": "z = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseObj",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BaseObj",
        "section": "Module Contents > BaseObj",
        "text": "class ansys.dyna.core.pre.dynabase.BaseObj\n\nDefine the base object.\n\n!! processed by numpydoc !!\n\n\n\ntype = ''\n\n\n\n\n\nsubtype = ''\n\n\n\n\n\nget_data() -> List\n\nGet the data of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseObj.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseObj.subtype",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > subtype",
        "section": "Module Contents > subtype",
        "text": "subtype = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseObj.get_data",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_data",
        "section": "Module Contents > get_data",
        "text": "get_data() -> List\n\nGet the data of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ParameterType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ParameterType",
        "section": "Module Contents > ParameterType",
        "text": "class ansys.dyna.core.pre.dynabase.ParameterType(*args, **kwds)\n\nBases: enum.Enum\n\nContains the parameter types.\n\n!! processed by numpydoc !!\n\n\n\nR = 1\n\n\n\n\n\nI = 2\n\n\n\n\n\nC = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ParameterType.R",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > R",
        "section": "Module Contents > R",
        "text": "R = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ParameterType.I",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > I",
        "section": "Module Contents > I",
        "text": "I = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ParameterType.C",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > C",
        "section": "Module Contents > C",
        "text": "C = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DynaBase",
        "section": "Module Contents > DynaBase",
        "text": "class ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating a general LS-DYNA keyword.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nmainname = ''\n\n\n\n\n\nimplicitanalysis\n\n\n\n\n\nparts\n\n\n\n\n\nboundaryconditions\n\n\n\n\n\ninitialconditions\n\n\n\n\n\nconstraints\n\n\n\n\n\ncontacts\n\n\n\n\n\nentities = []\n\n\n\n\n\nhave_accuracy = False\n\n\n\n\n\nhave_energy = False\n\n\n\n\n\nhave_hourglass = False\n\n\n\n\n\nhave_bulk_viscosity = False\n\n\n\n\n\nhave_control_shell = False\n\n\n\n\n\ninit_velocity: List = None\n\n\n\n\n\nbdy_spc: List = None\n\n\n\n\n\nget_stub()\n\nGet the stub of the DynaBase object.\n\n!! processed by numpydoc !!\n\n\n\nset_parent(parent=None)\n\n\n\n\n\nset_timestep(tssfac=0.9, isdo=0, timestep_size_for_mass_scaled=0.0, max_timestep=None)\n\nSet the structural time step size control using different options.\n\nParameters\n\ntssfac\n\npython:float, optional\n\nScale factor for computed time step. The default is 0.9.\n\nisdo\n\npython:int, optional\n\nBasis of the time size calculation for four-node shell elements.\nThe default is 0.\n\ntimestep_size_for_mass_scaled\n\npython:float, optional\n\nTime step size for mass scaled solutions. The default is 0.0.\n\nmax_timestep\n\nCurve, optional\n\nLoad curve that limits the maximum time step size. The default\nis None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_accuracy(objective_stress_updates=Switch.OFF, invariant_node_number=InvariantNode.OFF, partsetid_for_objective_stress_updates=0, implicit_accuracy_flag=Switch.OFF, explicit_accuracy_flag=Switch.OFF)\n\nDefine control parameters that can improve the accuracy of the calculation.\n\nParameters\n\nobjective_stress_updates\n\npython:int\n\nGlobal flag for 2nd order objective stress updates.\n\ninvariant_node_number\n\npython:int\n\nInvariant node numbering for shell and solid elements.\n\npartsetid_for_objective_stress_updates\n\npython:int, optional\n\nPart set ID for objective stress updates. The default is 0.\n\nimplicit_accuracy_flag\n\npython:int\n\nImplicit accuracy flag.\n\nexplicit_accuracy_flag\n\npython:float\n\nExplicit accuracy parameter.\n\nEQ.0.0: Off\n\nGT.0.0: On\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_energy(hourglass_energy=EnergyFlag.NOT_COMPUTED, rigidwall_energy=EnergyFlag.COMPUTED, sliding_interface_energy=EnergyFlag.NOT_COMPUTED, rayleigh_energy=EnergyFlag.NOT_COMPUTED, initial_reference_geometry_energy=EnergyFlag.COMPUTED)\n\nProvide controls for energy dissipation options.\n\nParameters\n\nhourglass_energy\n\nenum\n\nHourglass energy calculation option.\n\nrigidwall_energy\n\npython:int\n\nRigidwall energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\nsliding_interface_energy\n\npython:int\n\nSliding interface energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\nrayleigh_energy\n\npython:int\n\nRayleigh energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\ninitial_reference_geometry_energy\n\npython:int\n\nInitial reference geometry energy option.\n\nEQ.1: Initial reference geometry energy is not computed.\n\nEQ.2: Initial reference geometry energy is computed.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_output(print_suppression_d3hsp=False, print_suppression_echo=OutputEcho.ALL_DATA_PRINTED)\n\nSet miscellaneous output parameters.\n\nParameters\n\nprint_suppression_d3hsp\n\nbool, optional\n\nWhether to suppress printing during the input phase flag for the D3HSP file.\nThe default is True, which means that none of these are printed: nodal\ncoordinates, element connectivities, rigid wall definitions, nodal SPCs,\ninitial velocities, initial strains, adaptive constraints, and SPR2/SPR3\nconstraints. If False, no suppression occurs.\n\nprint_suppression_echo\n\nOutputEcho\n\nPrint suppression setting during the input phase flag for the echo file.\nOptions are:\n\nALL_DATA_PRINTED: All data is printed.\n\nSUPPRESSED_NODAL_PRINTING: Nodal printing is suppressed.\n\nSUPPRESSED_ELEMENT_PRINTING: Element printing is suppressed.\n\nSUPPRESSED_NODAL_AND_ELEMENT_PRINTING : Both nodal and element printing is suppressed.\n\n!! processed by numpydoc !!\n\n\n\nset_hourglass(controltype=HourglassControl.STANDARD_VISCOSITY_FORM, coefficient=0.1)\n\nRedefine the default values for the hourglass control type and coefficient.\n\nParameters\n\ncontroltype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_bulk_viscosity(quadratic_viscosity_coeff=1.5, linear_viscosity_coeff=0.06, bulk_viscosity_type=BulkViscosity.STANDARD_BULK_VISCOSITY)\n\nReset the default values of the bulk viscosity coefficients globally.\n\nParameters\n\nquadratic_viscosity_coeff\n\npython:float, optional\n\nDefault quadratic viscosity coefficient. The default is 1.5.\n\nlinear_viscosity_coeff\n\npython:float, optional\n\nDefault linear viscosity coefficient. The default is 0.06.\n\nbulk_viscosity_type\n\nenum\n\nDefault bulk viscosity type.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_init_temperature(temp=0)\n\nDefine initial nodal point temperatures on all nodes.\n\nParameters\n\ntemp\n\npython:float, optional\n\nTemperature at node. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_shell(wrpang=20, esort=0, irnxx=-1, istupd=0, theory=2, bwc=2, miter=1, proj=0, irquad=0)\n\nProvide controls for computing shell response.\n\nParameters\n\nwrpang\n\npython:int, optional\n\nShell element warpage angle in degrees. The default is 20.\n\nesort\n\npython:int\n\nSorting of triangular shell elements to automatically switch\ndegenerate quadrilateral shell formulations to more suitable\ntriangular shell formulations. The default is 0.\n\nirnxx\n\npython:int, optional\n\nShell normal update option. The default is 1.\n\nistupd\n\npython:int, optional\n\nShell thickness change option for deformable shells. The\ndefault is 0.\n\ntheory\n\npython:int, optional\n\nDefault shell formulation. The default is 2.\n\nbwc\n\npython:int, optional\n\nWarping stiffness for Belytschko-Tsay shells. The\ndefault is 2.\n\nmiter\n\npython:int, optional\n\nPlane stress plasticity option. The default is 1.\n\nproj\n\npython:int, optional\n\nProjection method for the warping stiffness in the Belytschko-Tsay\nshell and the Belytschko-Wong-Chiang elements. The default is\n0.\n\nirquad\n\npython:int, optional\n\nIn-plane integration rule for the eight-node quadratic shell element.\nThe default is 0.\n\nEQ.2: 2*2 Gauss quadrature\n\nEQ.3: 3*3 Gauss quadrature\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_solid(esort=0, fmatrx=0, niptets=4, swlocl=1, psfail=0, t10jtol=0.0, icoh=0, tet13k=0)\n\nProvide controls for a solid element response.\n\nParameters\n\nesort\n\npython:int, optional\n\nAutomatic sorting of tetrahedral and pentahedral elements to avoid\nuse of degenerate formulations for these shapes. The default is 0.\n\nEQ.0: No sorting\n\nEQ.1: Sort\n\nfmatrx\n\npython:int, optional\n\nMethod to use in the calculation of the deformation gradient matrix.\nThe default is 1.\n\nniptets\n\npython:int, optional\n\nNumber of integration points used in the quadratic tetrahedron elements.\nThe default is 4.\n\nswlocl\n\npython:int, optional\n\nOutput option for stresses in solid elements used as spot welds with\nmaterial \\*MAT_SPOTWELD. The default is 1.\n\npsfail\n\npython:int, optional\n\nSolid element erosion from negative volume is limited only to solid elements in\nthe part set indicated by PSFAIL. The default is 0.\n\nt10jtol\n\npython:float, optional\n\nTolerance for Jacobian in four-point, 10-noded quadratic tetrahedra. The\ndefault is 0.0.\n\nicoh\n\npython:int, optional\n\nBreaking LS-DYNA convention ICOH is interpreted digit-wise. The default\nis 0.\n\ntet13k\n\npython:int, optional\n\nFlag for whether to invoke a consistent tangent stiffness matrix\nfor the pressure averaged tetrahedron. The default is 0, in which\ncase this matrix is not invoked. If this parameter is set to 1,\nthis matrix is invoked.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_contact(rwpnal, shlthk=0, orien=1, ssthk=0, ignore=0, igactc=0)\n\nChange defaults for computation with contact surfaces.\n\nParameters\n\nrwpnal\n\npython:float\n\nScale factor for rigid wall penalties, which treat nodal points interacting\nwith rigid walls.\n\nshlthk\n\npython:int, optional\n\nFlag for whether to consider shell thickness offsets in non-automatic\nsurface-to-surface and non-automatic nodes-to-surface type contacts.\nThe default is 0, in which case these offsets are not considered.\nIf this parameter is set to 1, these offsets are considered.\n\norien\n\npython:int, optional\n\nFlag for whether to automatically reorient contact interface segments\nduring initialization. The default is 1, in which case reorientation\nautomatically occurs. If this parameter is set to 0, reorientation\ndoes not occur.\n\nssthk\n\npython:int, optional\n\nFlag for whether to determine default contact thickness for shells in single\nsurface contact types. The default is 0, in which case default contact\nthickness is not determined. If this parameter is set to 1, default\ncontact thickness is determined.\n\nignore\n\npython:int, optional\n\nFlag for whether to ignore initial penetrations in the \\*CONTACT_AUTOMATIC\noptions. The default is 0, in which case initial penetrations are ignored.\nIf this parameter is set to 1, initial penetrations are not ignored.\n\nigactc\n\npython:int, optional\n\nFlag for whether to use isogeometric shells for contact detection when the\ncontact involves isogeometric shells. The default is 0, which means\nisogeometric shells are not used. If this parameter is set to 1, isogeometric\nshells are used.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_damping_global(lcid=0, valdmp=0.0)\n\nDefine mass-weighted nodal damping.\n\nMass-weighted nodal damping applies globally to the\nnodes of deformable bodies and to the mass center of\nrigid bodies.\n\nParameters\n\nlcid\n\npython:int, optional\n\nLoad curve ID, which specifies the system damping constant\nversus the time. The default is 0.\n\nvaldmp\n\npython:float, optional\n\nSystem damping constant. The default is 0.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nget_solid_elements()\n\nGet solid elements.\n\nReturns\n\npython:list\n\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\nlist[1],node coordinates,list[1] = [[x1,y1,z1],[x2,y2,z2],…]\n\n!! processed by numpydoc !!\n\n\n\ncreate_general_keyword(opcode, keyworddata)\n\nCreate general keyword.\n\nParameters\n\nopcode\n\npython:str\n\nKeyword card name.\n\nkeyworddata\n\nstring\n\nKeyword data.\n\nExample::\n\nCreate a \\*INITIAL_VELOCITY keyword.\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n*INITIAL_VELOCITY\n\n&       vx        vy        vz       vxr       vyr       vzr\n1.480E+01 0.000E+00 0.000E+00 0.000E+00 0.000E+00 0.000E+00\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\nopcode = “INITIAL_VELOCITY”\nkeyworddata = “0\n\n1.480E+01,0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00”\n\ncreate_general_keyword(opcode = opcode,keyworddata=keyworddata)\n\n!! processed by numpydoc !!\n\n\n\nadd(obj)\n\nAdd entities to an object.\n\n!! processed by numpydoc !!\n\n\n\nset_transform(filename=None, idnoff=0, ideoff=0, idpoff=0, idmoff=0, idsoff=0, idfoff=0, transform=None)\n\nInclude independent input files containing model data, allow for node, element, and set\nIDs to be offset and for coordinates and constitutive parameters to be transformed and scaled.\n\nParameters\n\nfilename\n\npython:str\n\nName of file to include in the keyword file.\n\nidnoff\n\npython:int\n\nOffset to node ID.\n\nideoff\n\npython:int\n\nOffset to element ID.\n\nidpoff\n\npython:int\n\nOffset to part ID.\n\nidmoff\n\npython:int\n\nOffset to material ID.\n\nidsoff\n\npython:int\n\nOffset to set ID.\n\nidfoff\n\npython:int\n\nOffset to function ID, table ID, and curve ID.\n\ntransform\n\nTransform\n\nDefinition for the transformation.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.mainname",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > mainname",
        "section": "Module Contents > mainname",
        "text": "mainname = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.implicitanalysis",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > implicitanalysis",
        "section": "Module Contents > implicitanalysis",
        "text": "implicitanalysis\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.parts",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > parts",
        "section": "Module Contents > parts",
        "text": "parts\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.boundaryconditions",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > boundaryconditions",
        "section": "Module Contents > boundaryconditions",
        "text": "boundaryconditions\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.initialconditions",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > initialconditions",
        "section": "Module Contents > initialconditions",
        "text": "initialconditions\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.constraints",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > constraints",
        "section": "Module Contents > constraints",
        "text": "constraints\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.contacts",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > contacts",
        "section": "Module Contents > contacts",
        "text": "contacts\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.entities",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > entities",
        "section": "Module Contents > entities",
        "text": "entities = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.have_accuracy",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > have_accuracy",
        "section": "Module Contents > have_accuracy",
        "text": "have_accuracy = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.have_energy",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > have_energy",
        "section": "Module Contents > have_energy",
        "text": "have_energy = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.have_hourglass",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > have_hourglass",
        "section": "Module Contents > have_hourglass",
        "text": "have_hourglass = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.have_bulk_viscosity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > have_bulk_viscosity",
        "section": "Module Contents > have_bulk_viscosity",
        "text": "have_bulk_viscosity = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.have_control_shell",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > have_control_shell",
        "section": "Module Contents > have_control_shell",
        "text": "have_control_shell = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.init_velocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > init_velocity",
        "section": "Module Contents > init_velocity",
        "text": "init_velocity: List = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.bdy_spc",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > bdy_spc",
        "section": "Module Contents > bdy_spc",
        "text": "bdy_spc: List = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.get_stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_stub",
        "section": "Module Contents > get_stub",
        "text": "get_stub()\n\nGet the stub of the DynaBase object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_parent",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_parent",
        "section": "Module Contents > set_parent",
        "text": "set_parent(parent=None)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_timestep",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_timestep",
        "section": "Module Contents > set_timestep",
        "text": "set_timestep(tssfac=0.9, isdo=0, timestep_size_for_mass_scaled=0.0, max_timestep=None)\n\nSet the structural time step size control using different options.\n\nParameters\n\ntssfac\n\npython:float, optional\n\nScale factor for computed time step. The default is 0.9.\n\nisdo\n\npython:int, optional\n\nBasis of the time size calculation for four-node shell elements.\nThe default is 0.\n\ntimestep_size_for_mass_scaled\n\npython:float, optional\n\nTime step size for mass scaled solutions. The default is 0.0.\n\nmax_timestep\n\nCurve, optional\n\nLoad curve that limits the maximum time step size. The default\nis None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_accuracy",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_accuracy",
        "section": "Module Contents > set_accuracy",
        "text": "set_accuracy(objective_stress_updates=Switch.OFF, invariant_node_number=InvariantNode.OFF, partsetid_for_objective_stress_updates=0, implicit_accuracy_flag=Switch.OFF, explicit_accuracy_flag=Switch.OFF)\n\nDefine control parameters that can improve the accuracy of the calculation.\n\nParameters\n\nobjective_stress_updates\n\npython:int\n\nGlobal flag for 2nd order objective stress updates.\n\ninvariant_node_number\n\npython:int\n\nInvariant node numbering for shell and solid elements.\n\npartsetid_for_objective_stress_updates\n\npython:int, optional\n\nPart set ID for objective stress updates. The default is 0.\n\nimplicit_accuracy_flag\n\npython:int\n\nImplicit accuracy flag.\n\nexplicit_accuracy_flag\n\npython:float\n\nExplicit accuracy parameter.\n\nEQ.0.0: Off\n\nGT.0.0: On\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_energy",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_energy",
        "section": "Module Contents > set_energy",
        "text": "set_energy(hourglass_energy=EnergyFlag.NOT_COMPUTED, rigidwall_energy=EnergyFlag.COMPUTED, sliding_interface_energy=EnergyFlag.NOT_COMPUTED, rayleigh_energy=EnergyFlag.NOT_COMPUTED, initial_reference_geometry_energy=EnergyFlag.COMPUTED)\n\nProvide controls for energy dissipation options.\n\nParameters\n\nhourglass_energy\n\nenum\n\nHourglass energy calculation option.\n\nrigidwall_energy\n\npython:int\n\nRigidwall energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\nsliding_interface_energy\n\npython:int\n\nSliding interface energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\nrayleigh_energy\n\npython:int\n\nRayleigh energy dissipation option.\n\nEQ.1: Energy dissipation is not computed.\n\nEQ.2: Energy dissipation is computed.\n\ninitial_reference_geometry_energy\n\npython:int\n\nInitial reference geometry energy option.\n\nEQ.1: Initial reference geometry energy is not computed.\n\nEQ.2: Initial reference geometry energy is computed.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_output",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_output",
        "section": "Module Contents > set_output",
        "text": "set_output(print_suppression_d3hsp=False, print_suppression_echo=OutputEcho.ALL_DATA_PRINTED)\n\nSet miscellaneous output parameters.\n\nParameters\n\nprint_suppression_d3hsp\n\nbool, optional\n\nWhether to suppress printing during the input phase flag for the D3HSP file.\nThe default is True, which means that none of these are printed: nodal\ncoordinates, element connectivities, rigid wall definitions, nodal SPCs,\ninitial velocities, initial strains, adaptive constraints, and SPR2/SPR3\nconstraints. If False, no suppression occurs.\n\nprint_suppression_echo\n\nOutputEcho\n\nPrint suppression setting during the input phase flag for the echo file.\nOptions are:\n\nALL_DATA_PRINTED: All data is printed.\n\nSUPPRESSED_NODAL_PRINTING: Nodal printing is suppressed.\n\nSUPPRESSED_ELEMENT_PRINTING: Element printing is suppressed.\n\nSUPPRESSED_NODAL_AND_ELEMENT_PRINTING : Both nodal and element printing is suppressed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_hourglass",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_hourglass",
        "section": "Module Contents > set_hourglass",
        "text": "set_hourglass(controltype=HourglassControl.STANDARD_VISCOSITY_FORM, coefficient=0.1)\n\nRedefine the default values for the hourglass control type and coefficient.\n\nParameters\n\ncontroltype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_bulk_viscosity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_bulk_viscosity",
        "section": "Module Contents > set_bulk_viscosity",
        "text": "set_bulk_viscosity(quadratic_viscosity_coeff=1.5, linear_viscosity_coeff=0.06, bulk_viscosity_type=BulkViscosity.STANDARD_BULK_VISCOSITY)\n\nReset the default values of the bulk viscosity coefficients globally.\n\nParameters\n\nquadratic_viscosity_coeff\n\npython:float, optional\n\nDefault quadratic viscosity coefficient. The default is 1.5.\n\nlinear_viscosity_coeff\n\npython:float, optional\n\nDefault linear viscosity coefficient. The default is 0.06.\n\nbulk_viscosity_type\n\nenum\n\nDefault bulk viscosity type.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_init_temperature",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_init_temperature",
        "section": "Module Contents > set_init_temperature",
        "text": "set_init_temperature(temp=0)\n\nDefine initial nodal point temperatures on all nodes.\n\nParameters\n\ntemp\n\npython:float, optional\n\nTemperature at node. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.create_control_shell",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_control_shell",
        "section": "Module Contents > create_control_shell",
        "text": "create_control_shell(wrpang=20, esort=0, irnxx=-1, istupd=0, theory=2, bwc=2, miter=1, proj=0, irquad=0)\n\nProvide controls for computing shell response.\n\nParameters\n\nwrpang\n\npython:int, optional\n\nShell element warpage angle in degrees. The default is 20.\n\nesort\n\npython:int\n\nSorting of triangular shell elements to automatically switch\ndegenerate quadrilateral shell formulations to more suitable\ntriangular shell formulations. The default is 0.\n\nirnxx\n\npython:int, optional\n\nShell normal update option. The default is 1.\n\nistupd\n\npython:int, optional\n\nShell thickness change option for deformable shells. The\ndefault is 0.\n\ntheory\n\npython:int, optional\n\nDefault shell formulation. The default is 2.\n\nbwc\n\npython:int, optional\n\nWarping stiffness for Belytschko-Tsay shells. The\ndefault is 2.\n\nmiter\n\npython:int, optional\n\nPlane stress plasticity option. The default is 1.\n\nproj\n\npython:int, optional\n\nProjection method for the warping stiffness in the Belytschko-Tsay\nshell and the Belytschko-Wong-Chiang elements. The default is\n0.\n\nirquad\n\npython:int, optional\n\nIn-plane integration rule for the eight-node quadratic shell element.\nThe default is 0.\n\nEQ.2: 2*2 Gauss quadrature\n\nEQ.3: 3*3 Gauss quadrature\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.create_control_solid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_control_solid",
        "section": "Module Contents > create_control_solid",
        "text": "create_control_solid(esort=0, fmatrx=0, niptets=4, swlocl=1, psfail=0, t10jtol=0.0, icoh=0, tet13k=0)\n\nProvide controls for a solid element response.\n\nParameters\n\nesort\n\npython:int, optional\n\nAutomatic sorting of tetrahedral and pentahedral elements to avoid\nuse of degenerate formulations for these shapes. The default is 0.\n\nEQ.0: No sorting\n\nEQ.1: Sort\n\nfmatrx\n\npython:int, optional\n\nMethod to use in the calculation of the deformation gradient matrix.\nThe default is 1.\n\nniptets\n\npython:int, optional\n\nNumber of integration points used in the quadratic tetrahedron elements.\nThe default is 4.\n\nswlocl\n\npython:int, optional\n\nOutput option for stresses in solid elements used as spot welds with\nmaterial \\*MAT_SPOTWELD. The default is 1.\n\npsfail\n\npython:int, optional\n\nSolid element erosion from negative volume is limited only to solid elements in\nthe part set indicated by PSFAIL. The default is 0.\n\nt10jtol\n\npython:float, optional\n\nTolerance for Jacobian in four-point, 10-noded quadratic tetrahedra. The\ndefault is 0.0.\n\nicoh\n\npython:int, optional\n\nBreaking LS-DYNA convention ICOH is interpreted digit-wise. The default\nis 0.\n\ntet13k\n\npython:int, optional\n\nFlag for whether to invoke a consistent tangent stiffness matrix\nfor the pressure averaged tetrahedron. The default is 0, in which\ncase this matrix is not invoked. If this parameter is set to 1,\nthis matrix is invoked.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.create_control_contact",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_control_contact",
        "section": "Module Contents > create_control_contact",
        "text": "create_control_contact(rwpnal, shlthk=0, orien=1, ssthk=0, ignore=0, igactc=0)\n\nChange defaults for computation with contact surfaces.\n\nParameters\n\nrwpnal\n\npython:float\n\nScale factor for rigid wall penalties, which treat nodal points interacting\nwith rigid walls.\n\nshlthk\n\npython:int, optional\n\nFlag for whether to consider shell thickness offsets in non-automatic\nsurface-to-surface and non-automatic nodes-to-surface type contacts.\nThe default is 0, in which case these offsets are not considered.\nIf this parameter is set to 1, these offsets are considered.\n\norien\n\npython:int, optional\n\nFlag for whether to automatically reorient contact interface segments\nduring initialization. The default is 1, in which case reorientation\nautomatically occurs. If this parameter is set to 0, reorientation\ndoes not occur.\n\nssthk\n\npython:int, optional\n\nFlag for whether to determine default contact thickness for shells in single\nsurface contact types. The default is 0, in which case default contact\nthickness is not determined. If this parameter is set to 1, default\ncontact thickness is determined.\n\nignore\n\npython:int, optional\n\nFlag for whether to ignore initial penetrations in the \\*CONTACT_AUTOMATIC\noptions. The default is 0, in which case initial penetrations are ignored.\nIf this parameter is set to 1, initial penetrations are not ignored.\n\nigactc\n\npython:int, optional\n\nFlag for whether to use isogeometric shells for contact detection when the\ncontact involves isogeometric shells. The default is 0, which means\nisogeometric shells are not used. If this parameter is set to 1, isogeometric\nshells are used.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.create_damping_global",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_damping_global",
        "section": "Module Contents > create_damping_global",
        "text": "create_damping_global(lcid=0, valdmp=0.0)\n\nDefine mass-weighted nodal damping.\n\nMass-weighted nodal damping applies globally to the\nnodes of deformable bodies and to the mass center of\nrigid bodies.\n\nParameters\n\nlcid\n\npython:int, optional\n\nLoad curve ID, which specifies the system damping constant\nversus the time. The default is 0.\n\nvaldmp\n\npython:float, optional\n\nSystem damping constant. The default is 0.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.get_solid_elements",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_solid_elements",
        "section": "Module Contents > get_solid_elements",
        "text": "get_solid_elements()\n\nGet solid elements.\n\nReturns\n\npython:list\n\nlist[0],solid element connectivity,list[0] = [[n1,n2,n3,n4,n5,n6,n7,n8],[…],…]\nlist[1],node coordinates,list[1] = [[x1,y1,z1],[x2,y2,z2],…]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.create_general_keyword",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_general_keyword",
        "section": "Module Contents > create_general_keyword",
        "text": "create_general_keyword(opcode, keyworddata)\n\nCreate general keyword.\n\nParameters\n\nopcode\n\npython:str\n\nKeyword card name.\n\nkeyworddata\n\nstring\n\nKeyword data.\n\nExample::\n\nCreate a \\*INITIAL_VELOCITY keyword.\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n*INITIAL_VELOCITY\n\n&       vx        vy        vz       vxr       vyr       vzr\n1.480E+01 0.000E+00 0.000E+00 0.000E+00 0.000E+00 0.000E+00\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\nopcode = “INITIAL_VELOCITY”\nkeyworddata = “0\n\n1.480E+01,0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00”\n\ncreate_general_keyword(opcode = opcode,keyworddata=keyworddata)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.add",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > add",
        "section": "Module Contents > add",
        "text": "add(obj)\n\nAdd entities to an object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.set_transform",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_transform",
        "section": "Module Contents > set_transform",
        "text": "set_transform(filename=None, idnoff=0, ideoff=0, idpoff=0, idmoff=0, idsoff=0, idfoff=0, transform=None)\n\nInclude independent input files containing model data, allow for node, element, and set\nIDs to be offset and for coordinates and constitutive parameters to be transformed and scaled.\n\nParameters\n\nfilename\n\npython:str\n\nName of file to include in the keyword file.\n\nidnoff\n\npython:int\n\nOffset to node ID.\n\nideoff\n\npython:int\n\nOffset to element ID.\n\nidpoff\n\npython:int\n\nOffset to part ID.\n\nidmoff\n\npython:int\n\nOffset to material ID.\n\nidsoff\n\npython:int\n\nOffset to set ID.\n\nidfoff\n\npython:int\n\nOffset to function ID, table ID, and curve ID.\n\ntransform\n\nTransform\n\nDefinition for the transformation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DynaBase.save_file",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseSet",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BaseSet",
        "section": "Module Contents > BaseSet",
        "text": "class ansys.dyna.core.pre.dynabase.BaseSet\n\nDefines the base class for all set classes.\n\n!! processed by numpydoc !!\n\n\n\ntype = 'PARTSET'\n\n\n\n\n\nid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseSet.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'PARTSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BaseSet.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NodeSet",
        "section": "Module Contents > NodeSet",
        "text": "class ansys.dyna.core.pre.dynabase.NodeSet(nodes=[])\n\nDefines a nodal set with some identical or unique attributes.\n\n!! processed by numpydoc !!\n\n\n\nnodes = []\n\n\n\n\n\ntype = 'NODESET'\n\n\n\n\n\ncreate(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!\n\n\n\nnum()\n\nGet the number of nodes in the node set.\n\n!! processed by numpydoc !!\n\n\n\nid(pos)\n\nGet the node ID by position.\n\n!! processed by numpydoc !!\n\n\n\nget_nid()\n\nGet the node ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.nodes",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > nodes",
        "section": "Module Contents > nodes",
        "text": "nodes = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'NODESET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.num",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > num",
        "section": "Module Contents > num",
        "text": "num()\n\nGet the number of nodes in the node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id(pos)\n\nGet the node ID by position.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSet.get_nid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_nid",
        "section": "Module Contents > get_nid",
        "text": "get_nid()\n\nGet the node ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SetType",
        "section": "Module Contents > SetType",
        "text": "class ansys.dyna.core.pre.dynabase.SetType(*args, **kwds)\n\nBases: enum.Enum\n\nContains the enums for setting types.\n\n!! processed by numpydoc !!\n\n\n\nSHELL = 'SET_SHELL'\n\n\n\n\n\nSOLID = 'SET_SOLID'\n\n\n\n\n\nBEAM = 'SET_BEAM'\n\n\n\n\n\nTSHELL = 'SET_TSHELL'\n\n\n\n\n\nDISCRETE = 'SET_DISCRETE'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType.SHELL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SHELL",
        "section": "Module Contents > SHELL",
        "text": "SHELL = 'SET_SHELL'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType.SOLID",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SOLID",
        "section": "Module Contents > SOLID",
        "text": "SOLID = 'SET_SOLID'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType.BEAM",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BEAM",
        "section": "Module Contents > BEAM",
        "text": "BEAM = 'SET_BEAM'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType.TSHELL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > TSHELL",
        "section": "Module Contents > TSHELL",
        "text": "TSHELL = 'SET_TSHELL'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SetType.DISCRETE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DISCRETE",
        "section": "Module Contents > DISCRETE",
        "text": "DISCRETE = 'SET_DISCRETE'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodesetGeneral",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NodesetGeneral",
        "section": "Module Contents > NodesetGeneral",
        "text": "class ansys.dyna.core.pre.dynabase.NodesetGeneral(settype=SetType.SHELL, setids=[])\n\nBases: BaseSet\n\nIncludes nodal points of element sets.\n\nElement sets are defined by SET_XXXX_LIST,\nwhere XXXX can be SHELL, SOLID, BEAM,\nTSHELL or DISCRETE.\n\n!! processed by numpydoc !!\n\n\n\nsettype = 'SET_SHELL'\n\n\n\n\n\nsetids = []\n\n\n\n\n\ncreate(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodesetGeneral.settype",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > settype",
        "section": "Module Contents > settype",
        "text": "settype = 'SET_SHELL'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodesetGeneral.setids",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > setids",
        "section": "Module Contents > setids",
        "text": "setids = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodesetGeneral.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSetBox",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NodeSetBox",
        "section": "Module Contents > NodeSetBox",
        "text": "class ansys.dyna.core.pre.dynabase.NodeSetBox(boxes=[])\n\nBases: BaseSet\n\ninclude the nodes inside boxes.\n\nParameters\n\nboxes\n\npython:list\n\nA list of BOX.\n\n!! processed by numpydoc !!\n\n\n\nboxes = []\n\n\n\n\n\ntype = 'NODESETBOX'\n\n\n\n\n\ncreate(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSetBox.boxes",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > boxes",
        "section": "Module Contents > boxes",
        "text": "boxes = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSetBox.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'NODESETBOX'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.NodeSetBox.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a node set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > PartSet",
        "section": "Module Contents > PartSet",
        "text": "class ansys.dyna.core.pre.dynabase.PartSet(parts=[])\n\nBases: BaseSet\n\nDefines a set of parts with optional attributes.\n\n!! processed by numpydoc !!\n\n\n\nparts = []\n\n\n\n\n\ncreate(stub)\n\nCreate a part set.\n\n!! processed by numpydoc !!\n\n\n\nnum()\n\nGet the number of parts in the part set.\n\n!! processed by numpydoc !!\n\n\n\npos(pos)\n\nGet a part ID by position.\n\n!! processed by numpydoc !!\n\n\n\nget_pid()\n\nGet the part ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet.parts",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > parts",
        "section": "Module Contents > parts",
        "text": "parts = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a part set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet.num",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > num",
        "section": "Module Contents > num",
        "text": "num()\n\nGet the number of parts in the part set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet.pos",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > pos",
        "section": "Module Contents > pos",
        "text": "pos(pos)\n\nGet a part ID by position.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.PartSet.get_pid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_pid",
        "section": "Module Contents > get_pid",
        "text": "get_pid()\n\nGet the part ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SegmentSet",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SegmentSet",
        "section": "Module Contents > SegmentSet",
        "text": "class ansys.dyna.core.pre.dynabase.SegmentSet(segments=[])\n\nBases: BaseSet\n\nDefines a set of segments with optional identical or unique attributes.\n\nParameters\n\nsegments\n\npython:list [[point1,point2,point3,point4],[point5,point6,point7,point8]…]\n\nDefine segments.\n\n!! processed by numpydoc !!\n\n\n\nsegments = []\n\n\n\n\n\ntype = 'SEGMENTSET'\n\n\n\n\n\ncreate(stub)\n\nCreate a segment set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SegmentSet.segments",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > segments",
        "section": "Module Contents > segments",
        "text": "segments = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SegmentSet.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'SEGMENTSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SegmentSet.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a segment set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamFormulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BeamFormulation",
        "section": "Module Contents > BeamFormulation",
        "text": "class ansys.dyna.core.pre.dynabase.BeamFormulation(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSPOTWELD = 9\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamFormulation.SPOTWELD",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SPOTWELD",
        "section": "Module Contents > SPOTWELD",
        "text": "SPOTWELD = 9\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ShellFormulation",
        "section": "Module Contents > ShellFormulation",
        "text": "class ansys.dyna.core.pre.dynabase.ShellFormulation(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nFULLY_INTEGRATED = -16\n\n\n\n\n\nBELYTSCHKO_TSAY = 2\n\n\n\n\n\nSR_HUGHES_LIU = 6\n\n\n\n\n\nFULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE = 9\n\n\n\n\n\nPLANE_STRESS = 12\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation.FULLY_INTEGRATED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FULLY_INTEGRATED",
        "section": "Module Contents > FULLY_INTEGRATED",
        "text": "FULLY_INTEGRATED = -16\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation.BELYTSCHKO_TSAY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BELYTSCHKO_TSAY",
        "section": "Module Contents > BELYTSCHKO_TSAY",
        "text": "BELYTSCHKO_TSAY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation.SR_HUGHES_LIU",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SR_HUGHES_LIU",
        "section": "Module Contents > SR_HUGHES_LIU",
        "text": "SR_HUGHES_LIU = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation.FULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE",
        "section": "Module Contents > FULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE",
        "text": "FULLY_INTEGRATED_BELYTSCHKO_TSAY_MEMBRANE = 9\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellFormulation.PLANE_STRESS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > PLANE_STRESS",
        "section": "Module Contents > PLANE_STRESS",
        "text": "PLANE_STRESS = 12\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAFormulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IGAFormulation",
        "section": "Module Contents > IGAFormulation",
        "text": "class ansys.dyna.core.pre.dynabase.IGAFormulation(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nREISSNER_MINDLIN_FIBERS_AT_CONTROL_POINTS = 0\n\n\n\n\n\nKIRCHHOFF_LOVE_FIBERS_AT_CONTROL_POINTS = 1\n\n\n\n\n\nKIRCHHOFF_LOVE_FIBERS_AT_INTEGRATION_POINTS = 2\n\n\n\n\n\nREISSNER_MINDLIN_FIBERS_AT_INTEGRATION_POINTS = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAFormulation.REISSNER_MINDLIN_FIBERS_AT_CONTROL_POINTS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > REISSNER_MINDLIN_FIBERS_AT_CONTROL_POINTS",
        "section": "Module Contents > REISSNER_MINDLIN_FIBERS_AT_CONTROL_POINTS",
        "text": "REISSNER_MINDLIN_FIBERS_AT_CONTROL_POINTS = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAFormulation.KIRCHHOFF_LOVE_FIBERS_AT_CONTROL_POINTS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > KIRCHHOFF_LOVE_FIBERS_AT_CONTROL_POINTS",
        "section": "Module Contents > KIRCHHOFF_LOVE_FIBERS_AT_CONTROL_POINTS",
        "text": "KIRCHHOFF_LOVE_FIBERS_AT_CONTROL_POINTS = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAFormulation.KIRCHHOFF_LOVE_FIBERS_AT_INTEGRATION_POINTS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > KIRCHHOFF_LOVE_FIBERS_AT_INTEGRATION_POINTS",
        "section": "Module Contents > KIRCHHOFF_LOVE_FIBERS_AT_INTEGRATION_POINTS",
        "text": "KIRCHHOFF_LOVE_FIBERS_AT_INTEGRATION_POINTS = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAFormulation.REISSNER_MINDLIN_FIBERS_AT_INTEGRATION_POINTS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > REISSNER_MINDLIN_FIBERS_AT_INTEGRATION_POINTS",
        "section": "Module Contents > REISSNER_MINDLIN_FIBERS_AT_INTEGRATION_POINTS",
        "text": "REISSNER_MINDLIN_FIBERS_AT_INTEGRATION_POINTS = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SolidFormulation",
        "section": "Module Contents > SolidFormulation",
        "text": "class ansys.dyna.core.pre.dynabase.SolidFormulation(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nEIGHT_POINT_ENHANCED_STRAIN_SOLID_ELEMENT = -18\n\n\n\n\n\nCONSTANT_STRESS_SOLID_ELEMENT = 1\n\n\n\n\n\nEIGHT_POINT_HEXAHEDRON = 2\n\n\n\n\n\nFULLY_INTEGRATED_QUADRATIC_EIGHT_NODE_ELEMENT = 3\n\n\n\n\n\nONE_POINT_COROTATIONAL = 0\n\n\n\n\n\nIMPLICIT_9_POINT_ENHANCED_STRAIN = 18\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.EIGHT_POINT_ENHANCED_STRAIN_SOLID_ELEMENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EIGHT_POINT_ENHANCED_STRAIN_SOLID_ELEMENT",
        "section": "Module Contents > EIGHT_POINT_ENHANCED_STRAIN_SOLID_ELEMENT",
        "text": "EIGHT_POINT_ENHANCED_STRAIN_SOLID_ELEMENT = -18\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.CONSTANT_STRESS_SOLID_ELEMENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > CONSTANT_STRESS_SOLID_ELEMENT",
        "section": "Module Contents > CONSTANT_STRESS_SOLID_ELEMENT",
        "text": "CONSTANT_STRESS_SOLID_ELEMENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.EIGHT_POINT_HEXAHEDRON",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EIGHT_POINT_HEXAHEDRON",
        "section": "Module Contents > EIGHT_POINT_HEXAHEDRON",
        "text": "EIGHT_POINT_HEXAHEDRON = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.FULLY_INTEGRATED_QUADRATIC_EIGHT_NODE_ELEMENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FULLY_INTEGRATED_QUADRATIC_EIGHT_NODE_ELEMENT",
        "section": "Module Contents > FULLY_INTEGRATED_QUADRATIC_EIGHT_NODE_ELEMENT",
        "text": "FULLY_INTEGRATED_QUADRATIC_EIGHT_NODE_ELEMENT = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.ONE_POINT_COROTATIONAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ONE_POINT_COROTATIONAL",
        "section": "Module Contents > ONE_POINT_COROTATIONAL",
        "text": "ONE_POINT_COROTATIONAL = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidFormulation.IMPLICIT_9_POINT_ENHANCED_STRAIN",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IMPLICIT_9_POINT_ENHANCED_STRAIN",
        "section": "Module Contents > IMPLICIT_9_POINT_ENHANCED_STRAIN",
        "text": "IMPLICIT_9_POINT_ENHANCED_STRAIN = 18\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > HourglassType",
        "section": "Module Contents > HourglassType",
        "text": "class ansys.dyna.core.pre.dynabase.HourglassType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTANDARD_LSDYNA_VISCOUS = 1\n\n\n\n\n\nFLANAGAN_BELYTSCHKO_VISOCOUS = 2\n\n\n\n\n\nFLANAGAN_BELYTSCHKO_VISOCOUS_WITH_EXTRA_VOLUME_INTEGRATION = 3\n\n\n\n\n\nFLANAGAN_BELYTSCHKO_STIFFNESS = 4\n\n\n\n\n\nFLANAGAN_BELYTSCHKO_STIFFNESS_WITH_EXTRA_VOLUME_INTEGRATION = 5\n\n\n\n\n\nBELYTSCHKO_BINDEMAN = 6\n\n\n\n\n\nACTIVATES_FULL_PROJECTION_WARPING_STIFFNESS = 8\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.STANDARD_LSDYNA_VISCOUS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STANDARD_LSDYNA_VISCOUS",
        "section": "Module Contents > STANDARD_LSDYNA_VISCOUS",
        "text": "STANDARD_LSDYNA_VISCOUS = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.FLANAGAN_BELYTSCHKO_VISOCOUS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FLANAGAN_BELYTSCHKO_VISOCOUS",
        "section": "Module Contents > FLANAGAN_BELYTSCHKO_VISOCOUS",
        "text": "FLANAGAN_BELYTSCHKO_VISOCOUS = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.FLANAGAN_BELYTSCHKO_VISOCOUS_WITH_EXTRA_VOLUME_INTEGRATION",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FLANAGAN_BELYTSCHKO_VISOCOUS_WITH_EXTRA_VOLUME_INTEGRATION",
        "section": "Module Contents > FLANAGAN_BELYTSCHKO_VISOCOUS_WITH_EXTRA_VOLUME_INTEGRATION",
        "text": "FLANAGAN_BELYTSCHKO_VISOCOUS_WITH_EXTRA_VOLUME_INTEGRATION = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.FLANAGAN_BELYTSCHKO_STIFFNESS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FLANAGAN_BELYTSCHKO_STIFFNESS",
        "section": "Module Contents > FLANAGAN_BELYTSCHKO_STIFFNESS",
        "text": "FLANAGAN_BELYTSCHKO_STIFFNESS = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.FLANAGAN_BELYTSCHKO_STIFFNESS_WITH_EXTRA_VOLUME_INTEGRATION",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FLANAGAN_BELYTSCHKO_STIFFNESS_WITH_EXTRA_VOLUME_INTEGRATION",
        "section": "Module Contents > FLANAGAN_BELYTSCHKO_STIFFNESS_WITH_EXTRA_VOLUME_INTEGRATION",
        "text": "FLANAGAN_BELYTSCHKO_STIFFNESS_WITH_EXTRA_VOLUME_INTEGRATION = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.BELYTSCHKO_BINDEMAN",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BELYTSCHKO_BINDEMAN",
        "section": "Module Contents > BELYTSCHKO_BINDEMAN",
        "text": "BELYTSCHKO_BINDEMAN = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.HourglassType.ACTIVATES_FULL_PROJECTION_WARPING_STIFFNESS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ACTIVATES_FULL_PROJECTION_WARPING_STIFFNESS",
        "section": "Module Contents > ACTIVATES_FULL_PROJECTION_WARPING_STIFFNESS",
        "text": "ACTIVATES_FULL_PROJECTION_WARPING_STIFFNESS = 8\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamSection",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BeamSection",
        "section": "Module Contents > BeamSection",
        "text": "class ansys.dyna.core.pre.dynabase.BeamSection(element_formulation, shear_factor=1, cross_section=0, thickness_n1=0, thickness_n2=0)\n\nDefines cross-sectional properties for beams, trusses, discrete beams, and cable elements.\n\n!! processed by numpydoc !!\n\n\n\nid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamSection.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellSection",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ShellSection",
        "section": "Module Contents > ShellSection",
        "text": "class ansys.dyna.core.pre.dynabase.ShellSection(element_formulation, shear_factor=1, integration_points=5, printout=0, thickness1=0, thickness2=0, thickness3=0, thickness4=0)\n\nDefines section properties for shell elements.\n\n!! processed by numpydoc !!\n\n\n\nid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellSection.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGASection",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IGASection",
        "section": "Module Contents > IGASection",
        "text": "class ansys.dyna.core.pre.dynabase.IGASection(element_formulation, shear_factor=1, thickness=1)\n\nDefines section properties for isogeometric shell elements.\n\n!! processed by numpydoc !!\n\n\n\nid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGASection.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Part",
        "section": "Module Contents > Part",
        "text": "class ansys.dyna.core.pre.dynabase.Part(id)\n\nDefines the part object.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = ''\n\n\n\n\n\nid\n\n\n\n\n\nsecid = 0\n\n\n\n\n\nmid = 0\n\n\n\n\n\neosid = 0\n\n\n\n\n\nhgid = 0\n\n\n\n\n\ngrav = 0\n\n\n\n\n\nadpopt = 0\n\n\n\n\n\ntmid = 0\n\n\n\n\n\nformulation = 0\n\n\n\n\n\nstiffness_damping = 0\n\n\n\n\n\nrigidbody_initial_velocity = False\n\n\n\n\n\ntranslation\n\n\n\n\n\nrotation\n\n\n\n\n\nextra_nodes_defined = False\n\n\n\n\n\nset_material(mat, mat_thermal=None)\n\nSet the material.\n\n!! processed by numpydoc !!\n\n\n\nset_element_formulation(formulation)\n\nSet the element formulation.\n\n!! processed by numpydoc !!\n\n\n\nset_stiffness_damping_coefficient(coefficient)\n\nSet the stiffness damping coefficient.\n\n!! processed by numpydoc !!\n\n\n\nset_extra_nodes(nodeset)\n\nSet extra nodes for the rigid body.\n\nParameters\n\nnodeset\n\nNodeSet\n\nExtra nodes list.\n\n!! processed by numpydoc !!\n\n\n\nset_rigidbody_initial_velocity(translation=Velocity(0, 0, 0), rotation=RotVelocity(0, 0, 0))\n\nSet initial translational and rotational velocities for the rigid body.\n\nInitial translational and rotational velocities are set\nat the center of gravity for a rigid body or a nodal rigid body.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.secid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > secid",
        "section": "Module Contents > secid",
        "text": "secid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.mid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > mid",
        "section": "Module Contents > mid",
        "text": "mid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.eosid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > eosid",
        "section": "Module Contents > eosid",
        "text": "eosid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.hgid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > hgid",
        "section": "Module Contents > hgid",
        "text": "hgid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.grav",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > grav",
        "section": "Module Contents > grav",
        "text": "grav = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.adpopt",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > adpopt",
        "section": "Module Contents > adpopt",
        "text": "adpopt = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.tmid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > tmid",
        "section": "Module Contents > tmid",
        "text": "tmid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.formulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > formulation",
        "section": "Module Contents > formulation",
        "text": "formulation = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.stiffness_damping",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stiffness_damping",
        "section": "Module Contents > stiffness_damping",
        "text": "stiffness_damping = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.rigidbody_initial_velocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > rigidbody_initial_velocity",
        "section": "Module Contents > rigidbody_initial_velocity",
        "text": "rigidbody_initial_velocity = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.translation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > translation",
        "section": "Module Contents > translation",
        "text": "translation\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.rotation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > rotation",
        "section": "Module Contents > rotation",
        "text": "rotation\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.extra_nodes_defined",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > extra_nodes_defined",
        "section": "Module Contents > extra_nodes_defined",
        "text": "extra_nodes_defined = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_material",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_material",
        "section": "Module Contents > set_material",
        "text": "set_material(mat, mat_thermal=None)\n\nSet the material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_element_formulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_element_formulation",
        "section": "Module Contents > set_element_formulation",
        "text": "set_element_formulation(formulation)\n\nSet the element formulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_stiffness_damping_coefficient",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_stiffness_damping_coefficient",
        "section": "Module Contents > set_stiffness_damping_coefficient",
        "text": "set_stiffness_damping_coefficient(coefficient)\n\nSet the stiffness damping coefficient.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_extra_nodes",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_extra_nodes",
        "section": "Module Contents > set_extra_nodes",
        "text": "set_extra_nodes(nodeset)\n\nSet extra nodes for the rigid body.\n\nParameters\n\nnodeset\n\nNodeSet\n\nExtra nodes list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_rigidbody_initial_velocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_rigidbody_initial_velocity",
        "section": "Module Contents > set_rigidbody_initial_velocity",
        "text": "set_rigidbody_initial_velocity(translation=Velocity(0, 0, 0), rotation=RotVelocity(0, 0, 0))\n\nSet initial translational and rotational velocities for the rigid body.\n\nInitial translational and rotational velocities are set\nat the center of gravity for a rigid body or a nodal rigid body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Part.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BeamPart",
        "section": "Module Contents > BeamPart",
        "text": "class ansys.dyna.core.pre.dynabase.BeamPart(pid)\n\nBases: Part\n\nDefines a beam part.\n\nA beam part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'BEAM'\n\n\n\n\n\ncrosstype = 1\n\n\n\n\n\nset_cross_type(cross)\n\nSet the type for the cross section.\n\n!! processed by numpydoc !!\n\n\n\nset_diameter(diameter)\n\nSet the outer diameter for the cross section.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the beam part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'BEAM'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.crosstype",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > crosstype",
        "section": "Module Contents > crosstype",
        "text": "crosstype = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.set_cross_type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_cross_type",
        "section": "Module Contents > set_cross_type",
        "text": "set_cross_type(cross)\n\nSet the type for the cross section.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.set_diameter",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_diameter",
        "section": "Module Contents > set_diameter",
        "text": "set_diameter(diameter)\n\nSet the outer diameter for the cross section.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BeamPart.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the beam part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ShellPart",
        "section": "Module Contents > ShellPart",
        "text": "class ansys.dyna.core.pre.dynabase.ShellPart(pid)\n\nBases: Part\n\nDefines a shell part.\n\nA shell part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'SHELL'\n\n\n\n\n\nshear_factor = 1\n\n\n\n\n\nintpoints = 5\n\n\n\n\n\nprint = 0\n\n\n\n\n\nthickness = 1\n\n\n\n\n\nhourglasstype = -1\n\n\n\n\n\ndefined_des_surface = False\n\n\n\n\n\ndespid = 0\n\n\n\n\n\ndesxid = 0\n\n\n\n\n\ndes_nquad = 1\n\n\n\n\n\ndes_nsid = 0\n\n\n\n\n\ndes_rsf = 1\n\n\n\n\n\nset_hourglass(type=HourglassType.STANDARD_LSDYNA_VISCOUS, coefficient=0.1)\n\nSet the hourglass type, which identifies the bulk viscosity.\n\nParameters\n\ntype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\n!! processed by numpydoc !!\n\n\n\nset_shear_factor(factor)\n\nSet the shear correction factor, which scales the transverse shear stress.\n\n!! processed by numpydoc !!\n\n\n\nset_integration_points(points=5)\n\nSet the number of through thickness integration points.\n\n!! processed by numpydoc !!\n\n\n\nset_printout(print)\n\nSet the printout option.\n\n!! processed by numpydoc !!\n\n\n\nset_thickness(thickness)\n\nSet the shell thickness.\n\n!! processed by numpydoc !!\n\n\n\nset_des_surface(despid=0, desxid=0, nquad=1, nsid=0, rsf=-1)\n\nGenerate and place discrete element sphere (DES) elements on the surface of shell elements.\n\nParameters\n\ndespid\n\npython:int, optional\n\nPart ID for the generated DES elements. The default is 0.\n\ndesxid\n\npython:int, optional\n\nSection ID for the generated DES elements. The default is 0.\n\nnquad\n\npython:int, optional\n\nNumber of equally spaced DES elements to create on a shell element in each local shell direction.\nThe default is 1.\n\nnsid\n\npython:int, optional\n\nIf defined, this card creates a node set with ID NSID for the nodes generated by this card.\nThe default is 0.\n\nrsf\n\npython:float, optional\n\nScale factor for determining the DES radius. The default is 1.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the shell part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'SHELL'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.shear_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > shear_factor",
        "section": "Module Contents > shear_factor",
        "text": "shear_factor = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.intpoints",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > intpoints",
        "section": "Module Contents > intpoints",
        "text": "intpoints = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.print",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > print",
        "section": "Module Contents > print",
        "text": "print = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > thickness",
        "section": "Module Contents > thickness",
        "text": "thickness = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.hourglasstype",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > hourglasstype",
        "section": "Module Contents > hourglasstype",
        "text": "hourglasstype = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.defined_des_surface",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_des_surface",
        "section": "Module Contents > defined_des_surface",
        "text": "defined_des_surface = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.despid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > despid",
        "section": "Module Contents > despid",
        "text": "despid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.desxid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > desxid",
        "section": "Module Contents > desxid",
        "text": "desxid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.des_nquad",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > des_nquad",
        "section": "Module Contents > des_nquad",
        "text": "des_nquad = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.des_nsid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > des_nsid",
        "section": "Module Contents > des_nsid",
        "text": "des_nsid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.des_rsf",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > des_rsf",
        "section": "Module Contents > des_rsf",
        "text": "des_rsf = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_hourglass",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_hourglass",
        "section": "Module Contents > set_hourglass",
        "text": "set_hourglass(type=HourglassType.STANDARD_LSDYNA_VISCOUS, coefficient=0.1)\n\nSet the hourglass type, which identifies the bulk viscosity.\n\nParameters\n\ntype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_shear_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_shear_factor",
        "section": "Module Contents > set_shear_factor",
        "text": "set_shear_factor(factor)\n\nSet the shear correction factor, which scales the transverse shear stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_integration_points",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_integration_points",
        "section": "Module Contents > set_integration_points",
        "text": "set_integration_points(points=5)\n\nSet the number of through thickness integration points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_printout",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_printout",
        "section": "Module Contents > set_printout",
        "text": "set_printout(print)\n\nSet the printout option.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_thickness",
        "section": "Module Contents > set_thickness",
        "text": "set_thickness(thickness)\n\nSet the shell thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_des_surface",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_des_surface",
        "section": "Module Contents > set_des_surface",
        "text": "set_des_surface(despid=0, desxid=0, nquad=1, nsid=0, rsf=-1)\n\nGenerate and place discrete element sphere (DES) elements on the surface of shell elements.\n\nParameters\n\ndespid\n\npython:int, optional\n\nPart ID for the generated DES elements. The default is 0.\n\ndesxid\n\npython:int, optional\n\nSection ID for the generated DES elements. The default is 0.\n\nnquad\n\npython:int, optional\n\nNumber of equally spaced DES elements to create on a shell element in each local shell direction.\nThe default is 1.\n\nnsid\n\npython:int, optional\n\nIf defined, this card creates a node set with ID NSID for the nodes generated by this card.\nThe default is 0.\n\nrsf\n\npython:float, optional\n\nScale factor for determining the DES radius. The default is 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ShellPart.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the shell part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IGAPart",
        "section": "Module Contents > IGAPart",
        "text": "class ansys.dyna.core.pre.dynabase.IGAPart(pid)\n\nBases: Part\n\nDefines an isogeometric shell part.\n\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'IGA'\n\n\n\n\n\nshear_factor = 1\n\n\n\n\n\nthickness = 1\n\n\n\n\n\nset_shear_factor(factor)\n\nSet the shear correction factor, which scales the transverse shear stress.\n\n!! processed by numpydoc !!\n\n\n\nset_thickness(thickness)\n\nSet the shell thickness.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the IGA part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'IGA'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.shear_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > shear_factor",
        "section": "Module Contents > shear_factor",
        "text": "shear_factor = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > thickness",
        "section": "Module Contents > thickness",
        "text": "thickness = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.set_shear_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_shear_factor",
        "section": "Module Contents > set_shear_factor",
        "text": "set_shear_factor(factor)\n\nSet the shear correction factor, which scales the transverse shear stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.set_thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_thickness",
        "section": "Module Contents > set_thickness",
        "text": "set_thickness(thickness)\n\nSet the shell thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.IGAPart.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the IGA part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SolidPart",
        "section": "Module Contents > SolidPart",
        "text": "class ansys.dyna.core.pre.dynabase.SolidPart(pid)\n\nBases: Part\n\nDefines a solid part.\n\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'SOLID'\n\n\n\n\n\nhourglasstype = -1\n\n\n\n\n\nset_hourglass(type=HourglassType.STANDARD_LSDYNA_VISCOUS, coefficient=0.1)\n\nSet the hourglass type, which identifies the bulk viscosity.\n\nParameters\n\ntype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet the properties for the solid part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'SOLID'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart.hourglasstype",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > hourglasstype",
        "section": "Module Contents > hourglasstype",
        "text": "hourglasstype = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart.set_hourglass",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_hourglass",
        "section": "Module Contents > set_hourglass",
        "text": "set_hourglass(type=HourglassType.STANDARD_LSDYNA_VISCOUS, coefficient=0.1)\n\nSet the hourglass type, which identifies the bulk viscosity.\n\nParameters\n\ntype\n\nenum\n\nDefault hourglass control type.\n\ncoefficient\n\npython:float, optional\n\nDefault hourglass coefficient. The default is 0..\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SolidPart.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet the properties for the solid part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DRO",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DRO",
        "section": "Module Contents > DRO",
        "text": "class ansys.dyna.core.pre.dynabase.DRO(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDESCRIBES_TRANSLATIONAL_SPRING = 0\n\n\n\n\n\nDESCRIBES_TORSIONAL_SPRING = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DRO.DESCRIBES_TRANSLATIONAL_SPRING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DESCRIBES_TRANSLATIONAL_SPRING",
        "section": "Module Contents > DESCRIBES_TRANSLATIONAL_SPRING",
        "text": "DESCRIBES_TRANSLATIONAL_SPRING = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DRO.DESCRIBES_TORSIONAL_SPRING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DESCRIBES_TORSIONAL_SPRING",
        "section": "Module Contents > DESCRIBES_TORSIONAL_SPRING",
        "text": "DESCRIBES_TORSIONAL_SPRING = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DiscretePart",
        "section": "Module Contents > DiscretePart",
        "text": "class ansys.dyna.core.pre.dynabase.DiscretePart(pid)\n\nBases: Part\n\nDefines a discrete part.\n\nThe part definition consists of the combined material information,\nsection properties, hourglass type, thermal properties, and a flag\nfor part adaptivity.\n\n!! processed by numpydoc !!\n\n\n\ntype = 'DISCRETE'\n\n\n\n\n\nstub\n\n\n\n\n\ndisplacement_option = 0\n\n\n\n\n\nset_displacement_option(displacement_option=DRO.DESCRIBES_TRANSLATIONAL_SPRING)\n\nSet the displacement, which defines the rotation.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the discrete part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'DISCRETE'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart.displacement_option",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > displacement_option",
        "section": "Module Contents > displacement_option",
        "text": "displacement_option = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart.set_displacement_option",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_displacement_option",
        "section": "Module Contents > set_displacement_option",
        "text": "set_displacement_option(displacement_option=DRO.DESCRIBES_TRANSLATIONAL_SPRING)\n\nSet the displacement, which defines the rotation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.DiscretePart.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the discrete part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Parts",
        "section": "Module Contents > Parts",
        "text": "class ansys.dyna.core.pre.dynabase.Parts\n\nStores the part list.\n\n!! processed by numpydoc !!\n\n\n\nbeamlist = []\n\n\n\n\n\nshelllist = []\n\n\n\n\n\nsolidlist = []\n\n\n\n\n\nigalist = []\n\n\n\n\n\nicfdlist = []\n\n\n\n\n\nicfdvolumelist = []\n\n\n\n\n\ndiscretelist = []\n\n\n\n\n\nisphstructlist = []\n\n\n\n\n\nisphfluidlist = []\n\n\n\n\n\nadd(part)\n\nAdd a part to the part list.\n\n!! processed by numpydoc !!\n\n\n\nget_num_shellpart()\n\nGet the number of shell parts.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for added parts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.beamlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > beamlist",
        "section": "Module Contents > beamlist",
        "text": "beamlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.shelllist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > shelllist",
        "section": "Module Contents > shelllist",
        "text": "shelllist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.solidlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > solidlist",
        "section": "Module Contents > solidlist",
        "text": "solidlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.igalist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > igalist",
        "section": "Module Contents > igalist",
        "text": "igalist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.icfdlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > icfdlist",
        "section": "Module Contents > icfdlist",
        "text": "icfdlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.icfdvolumelist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > icfdvolumelist",
        "section": "Module Contents > icfdvolumelist",
        "text": "icfdvolumelist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.discretelist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > discretelist",
        "section": "Module Contents > discretelist",
        "text": "discretelist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.isphstructlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > isphstructlist",
        "section": "Module Contents > isphstructlist",
        "text": "isphstructlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.isphfluidlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > isphfluidlist",
        "section": "Module Contents > isphfluidlist",
        "text": "isphfluidlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.add",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > add",
        "section": "Module Contents > add",
        "text": "add(part)\n\nAdd a part to the part list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.get_num_shellpart",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_num_shellpart",
        "section": "Module Contents > get_num_shellpart",
        "text": "get_num_shellpart()\n\nGet the number of shell parts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Parts.set_property",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for added parts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.AnalysisType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > AnalysisType",
        "section": "Module Contents > AnalysisType",
        "text": "class ansys.dyna.core.pre.dynabase.AnalysisType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nEXPLICIT = 0\n\n\n\n\n\nIMPLICIT = 1\n\n\n\n\n\nEXPLICIT_FOLLOWED_BY_IMPLICIT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.AnalysisType.EXPLICIT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EXPLICIT",
        "section": "Module Contents > EXPLICIT",
        "text": "EXPLICIT = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.AnalysisType.IMPLICIT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > IMPLICIT",
        "section": "Module Contents > IMPLICIT",
        "text": "IMPLICIT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.AnalysisType.EXPLICIT_FOLLOWED_BY_IMPLICIT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EXPLICIT_FOLLOWED_BY_IMPLICIT",
        "section": "Module Contents > EXPLICIT_FOLLOWED_BY_IMPLICIT",
        "text": "EXPLICIT_FOLLOWED_BY_IMPLICIT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.TimestepCtrol",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > TimestepCtrol",
        "section": "Module Contents > TimestepCtrol",
        "text": "class ansys.dyna.core.pre.dynabase.TimestepCtrol(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nCONSTANT_TIMESTEP_SIZE = 0\n\n\n\n\n\nAUTOMATICALLY_ADJUST_TIMESTEP_SIZE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.TimestepCtrol.CONSTANT_TIMESTEP_SIZE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > CONSTANT_TIMESTEP_SIZE",
        "section": "Module Contents > CONSTANT_TIMESTEP_SIZE",
        "text": "CONSTANT_TIMESTEP_SIZE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.TimestepCtrol.AUTOMATICALLY_ADJUST_TIMESTEP_SIZE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > AUTOMATICALLY_ADJUST_TIMESTEP_SIZE",
        "section": "Module Contents > AUTOMATICALLY_ADJUST_TIMESTEP_SIZE",
        "text": "AUTOMATICALLY_ADJUST_TIMESTEP_SIZE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Integration",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Integration",
        "section": "Module Contents > Integration",
        "text": "class ansys.dyna.core.pre.dynabase.Integration(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nNEWMARK_TIME_INTEGRATION = 1\n\n\n\n\n\nMODAL_SUPERPOSITION_FOLLOWING_EIGENVALUE = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Integration.NEWMARK_TIME_INTEGRATION",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NEWMARK_TIME_INTEGRATION",
        "section": "Module Contents > NEWMARK_TIME_INTEGRATION",
        "text": "NEWMARK_TIME_INTEGRATION = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Integration.MODAL_SUPERPOSITION_FOLLOWING_EIGENVALUE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > MODAL_SUPERPOSITION_FOLLOWING_EIGENVALUE",
        "section": "Module Contents > MODAL_SUPERPOSITION_FOLLOWING_EIGENVALUE",
        "text": "MODAL_SUPERPOSITION_FOLLOWING_EIGENVALUE = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ImplicitAnalysis",
        "section": "Module Contents > ImplicitAnalysis",
        "text": "class ansys.dyna.core.pre.dynabase.ImplicitAnalysis(analysis_type=AnalysisType.IMPLICIT, initial_timestep_size=0)\n\nActivates implicit analysis and defines associated control parameters.\n\n!! processed by numpydoc !!\n\n\n\ndefined = False\n\n\n\n\n\ndefined_auto = False\n\n\n\n\n\ndefined_dynamic = False\n\n\n\n\n\ndefined_eigenvalue = False\n\n\n\n\n\ndefined_solution = False\n\n\n\n\n\ndefined_mass_matrix = False\n\n\n\n\n\nimflag = 1\n\n\n\n\n\ndt0 = 0\n\n\n\n\n\nstub\n\n\n\n\n\nset_initial_timestep_size(size=0)\n\nDefine the initial time step size.\n\n!! processed by numpydoc !!\n\n\n\nset_timestep(control_flag=TimestepCtrol.CONSTANT_TIMESTEP_SIZE, Optimum_equilibrium_iteration_count=11)\n\nDefine parameters for automatic time step control during implicit analysis.\n\nParameters\n\ncontrol_flag\n\npython:int\n\nAutomatic time step control flag.\n\nOptimum_equilibrium_iteration_count\n\npython:int, optional\n\nOptimum equilibrium iteration count per time step. The default is 11.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_dynamic(integration_method=Integration.NEWMARK_TIME_INTEGRATION, gamma=0.5, beta=0.25)\n\nActivate implicit dynamic analysis and define time integration constants.\n\nParameters\n\nintegration_method\n\nenum\n\nImplicit analysis type.\n\ngamma\n\npython:float, optional\n\nNewmark time integration constant. The default is 0.5.\n\nbeta\n\npython:float, optional\n\nNewmark time integration constant. The default is 0.25.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_eigenvalue(number_eigenvalues=0, shift_scale=0)\n\nActivate implicit eigenvalue analysis and define associated input parameters.\n\nParameters\n\nnumber_eigenvalues\n\npython:int, optional\n\nNumber of eigenvalues to extract. The default is 0.\n\nshift_scale\n\npython:float, optional\n\nShift scale. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_solution(solution_method=12, iteration_limit=11, stiffness_reformation_limit=55, absolute_convergence_tolerance=1e-10)\n\nSpecify whether a linear or nonlinear solution is desired.\n\nParameters\n\nsolution_method\n\npython:int, optional\n\nSolution method for implicit analysis. The default is 12.\n\niteration_limit\n\npython:int, optional\n\nIteration limit between automatic stiffness reformations.\nThe default is 11.\n\nstiffness_reformation_limit\n\npython:int, optional\n\nStiffness reformation limit per time step. The default is\n55.\n\nabsolute_convergence_tolerance\n\npython:float, optional\n\nAbsolute convergence tolerance. The default is 1e-10.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_consistent_mass_matrix()\n\nUse the consistent mass matrix in implicit dynamics and eigenvalue solutions.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate an implicit analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined",
        "section": "Module Contents > defined",
        "text": "defined = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined_auto",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_auto",
        "section": "Module Contents > defined_auto",
        "text": "defined_auto = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined_dynamic",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_dynamic",
        "section": "Module Contents > defined_dynamic",
        "text": "defined_dynamic = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined_eigenvalue",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_eigenvalue",
        "section": "Module Contents > defined_eigenvalue",
        "text": "defined_eigenvalue = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined_solution",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_solution",
        "section": "Module Contents > defined_solution",
        "text": "defined_solution = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.defined_mass_matrix",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_mass_matrix",
        "section": "Module Contents > defined_mass_matrix",
        "text": "defined_mass_matrix = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.imflag",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > imflag",
        "section": "Module Contents > imflag",
        "text": "imflag = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.dt0",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > dt0",
        "section": "Module Contents > dt0",
        "text": "dt0 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_initial_timestep_size",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_initial_timestep_size",
        "section": "Module Contents > set_initial_timestep_size",
        "text": "set_initial_timestep_size(size=0)\n\nDefine the initial time step size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_timestep",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_timestep",
        "section": "Module Contents > set_timestep",
        "text": "set_timestep(control_flag=TimestepCtrol.CONSTANT_TIMESTEP_SIZE, Optimum_equilibrium_iteration_count=11)\n\nDefine parameters for automatic time step control during implicit analysis.\n\nParameters\n\ncontrol_flag\n\npython:int\n\nAutomatic time step control flag.\n\nOptimum_equilibrium_iteration_count\n\npython:int, optional\n\nOptimum equilibrium iteration count per time step. The default is 11.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_dynamic",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_dynamic",
        "section": "Module Contents > set_dynamic",
        "text": "set_dynamic(integration_method=Integration.NEWMARK_TIME_INTEGRATION, gamma=0.5, beta=0.25)\n\nActivate implicit dynamic analysis and define time integration constants.\n\nParameters\n\nintegration_method\n\nenum\n\nImplicit analysis type.\n\ngamma\n\npython:float, optional\n\nNewmark time integration constant. The default is 0.5.\n\nbeta\n\npython:float, optional\n\nNewmark time integration constant. The default is 0.25.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_eigenvalue",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_eigenvalue",
        "section": "Module Contents > set_eigenvalue",
        "text": "set_eigenvalue(number_eigenvalues=0, shift_scale=0)\n\nActivate implicit eigenvalue analysis and define associated input parameters.\n\nParameters\n\nnumber_eigenvalues\n\npython:int, optional\n\nNumber of eigenvalues to extract. The default is 0.\n\nshift_scale\n\npython:float, optional\n\nShift scale. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_solution",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_solution",
        "section": "Module Contents > set_solution",
        "text": "set_solution(solution_method=12, iteration_limit=11, stiffness_reformation_limit=55, absolute_convergence_tolerance=1e-10)\n\nSpecify whether a linear or nonlinear solution is desired.\n\nParameters\n\nsolution_method\n\npython:int, optional\n\nSolution method for implicit analysis. The default is 12.\n\niteration_limit\n\npython:int, optional\n\nIteration limit between automatic stiffness reformations.\nThe default is 11.\n\nstiffness_reformation_limit\n\npython:int, optional\n\nStiffness reformation limit per time step. The default is\n55.\n\nabsolute_convergence_tolerance\n\npython:float, optional\n\nAbsolute convergence tolerance. The default is 1e-10.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.set_consistent_mass_matrix",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_consistent_mass_matrix",
        "section": "Module Contents > set_consistent_mass_matrix",
        "text": "set_consistent_mass_matrix()\n\nUse the consistent mass matrix in implicit dynamics and eigenvalue solutions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ImplicitAnalysis.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an implicit analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ThermalAnalysisType",
        "section": "Module Contents > ThermalAnalysisType",
        "text": "class ansys.dyna.core.pre.dynabase.ThermalAnalysisType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTEADY_STATE = 0\n\n\n\n\n\nTRANSIENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisType.STEADY_STATE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STEADY_STATE",
        "section": "Module Contents > STEADY_STATE",
        "text": "STEADY_STATE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisType.TRANSIENT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > TRANSIENT",
        "section": "Module Contents > TRANSIENT",
        "text": "TRANSIENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisTimestep",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ThermalAnalysisTimestep",
        "section": "Module Contents > ThermalAnalysisTimestep",
        "text": "class ansys.dyna.core.pre.dynabase.ThermalAnalysisTimestep(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nFIXED = 0\n\n\n\n\n\nVARIABLE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisTimestep.FIXED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > FIXED",
        "section": "Module Contents > FIXED",
        "text": "FIXED = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysisTimestep.VARIABLE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > VARIABLE",
        "section": "Module Contents > VARIABLE",
        "text": "VARIABLE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ThermalAnalysis",
        "section": "Module Contents > ThermalAnalysis",
        "text": "class ansys.dyna.core.pre.dynabase.ThermalAnalysis\n\nBases: BaseObj\n\nActivates thermal analysis and defines associated control parameters.\n\n!! processed by numpydoc !!\n\n\n\ndefined_solver = False\n\n\n\n\n\ndefined_timestep = False\n\n\n\n\n\ndefined_nonlinear = False\n\n\n\n\n\nstub\n\n\n\n\n\ntype = 'analysis_thermal'\n\n\n\n\n\nset_timestep(timestep_control=ThermalAnalysisTimestep.FIXED, initial_timestep=0)\n\nSet time step controls for the thermal solution in a thermal only or coupled structural/thermal analysis.\n\nParameters\n\ntimestep_control\n\nThermalAnalysisTimestep\n\nTime step control.\n\ninitial_timestep\n\npython:float, optional\n\nInitial thermal time step. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nset_solver(analysis_type=ThermalAnalysisType.STEADY_STATE)\n\nSet options for the thermal solution in a thermal only or coupled structural-thermal analysis.\n\nParameters\n\nanalysis_type\n\nImplicitAnalysis\n\nThermal analysis type.\n\n!! processed by numpydoc !!\n\n\n\nset_nonlinear(convergence_tol=0.0001, divergence=0.5)\n\nSet parameters for a nonlinear thermal or coupled structural/thermal analysis.\n\nParameters\n\nconvergence_tol\n\npython:float\n\nConvergence tolerance for temperature.\n\ndivergence\n\npython:float\n\nDivergence control parameter.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a thermal analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.defined_solver",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_solver",
        "section": "Module Contents > defined_solver",
        "text": "defined_solver = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.defined_timestep",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_timestep",
        "section": "Module Contents > defined_timestep",
        "text": "defined_timestep = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.defined_nonlinear",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > defined_nonlinear",
        "section": "Module Contents > defined_nonlinear",
        "text": "defined_nonlinear = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'analysis_thermal'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.set_timestep",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_timestep",
        "section": "Module Contents > set_timestep",
        "text": "set_timestep(timestep_control=ThermalAnalysisTimestep.FIXED, initial_timestep=0)\n\nSet time step controls for the thermal solution in a thermal only or coupled structural/thermal analysis.\n\nParameters\n\ntimestep_control\n\nThermalAnalysisTimestep\n\nTime step control.\n\ninitial_timestep\n\npython:float, optional\n\nInitial thermal time step. The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.set_solver",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_solver",
        "section": "Module Contents > set_solver",
        "text": "set_solver(analysis_type=ThermalAnalysisType.STEADY_STATE)\n\nSet options for the thermal solution in a thermal only or coupled structural-thermal analysis.\n\nParameters\n\nanalysis_type\n\nImplicitAnalysis\n\nThermal analysis type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.set_nonlinear",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_nonlinear",
        "section": "Module Contents > set_nonlinear",
        "text": "set_nonlinear(convergence_tol=0.0001, divergence=0.5)\n\nSet parameters for a nonlinear thermal or coupled structural/thermal analysis.\n\nParameters\n\nconvergence_tol\n\npython:float\n\nConvergence tolerance for temperature.\n\ndivergence\n\npython:float\n\nDivergence control parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ThermalAnalysis.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a thermal analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactCategory",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ContactCategory",
        "section": "Module Contents > ContactCategory",
        "text": "class ansys.dyna.core.pre.dynabase.ContactCategory(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSURFACE_TO_SURFACE_CONTACT = 2\n\n\n\n\n\nSINGLE_SURFACE_CONTACT = 3\n\n\n\n\n\nSHELL_EDGE_TO_SURFACE_CONTACT = 4\n\n\n\n\n\nNODES_TO_SURFACE = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactCategory.SURFACE_TO_SURFACE_CONTACT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SURFACE_TO_SURFACE_CONTACT",
        "section": "Module Contents > SURFACE_TO_SURFACE_CONTACT",
        "text": "SURFACE_TO_SURFACE_CONTACT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactCategory.SINGLE_SURFACE_CONTACT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SINGLE_SURFACE_CONTACT",
        "section": "Module Contents > SINGLE_SURFACE_CONTACT",
        "text": "SINGLE_SURFACE_CONTACT = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactCategory.SHELL_EDGE_TO_SURFACE_CONTACT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SHELL_EDGE_TO_SURFACE_CONTACT",
        "section": "Module Contents > SHELL_EDGE_TO_SURFACE_CONTACT",
        "text": "SHELL_EDGE_TO_SURFACE_CONTACT = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactCategory.NODES_TO_SURFACE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NODES_TO_SURFACE",
        "section": "Module Contents > NODES_TO_SURFACE",
        "text": "NODES_TO_SURFACE = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ContactType",
        "section": "Module Contents > ContactType",
        "text": "class ansys.dyna.core.pre.dynabase.ContactType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nNULL = 0\n\n\n\n\n\nAUTOMATIC = 1\n\n\n\n\n\nGENERAL = 2\n\n\n\n\n\nRIGID = 3\n\n\n\n\n\nTIED = 4\n\n\n\n\n\nTIED_WITH_FAILURE = 5\n\n\n\n\n\nERODING = 6\n\n\n\n\n\nEDGE = 7\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.NULL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NULL",
        "section": "Module Contents > NULL",
        "text": "NULL = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.AUTOMATIC",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > AUTOMATIC",
        "section": "Module Contents > AUTOMATIC",
        "text": "AUTOMATIC = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.GENERAL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > GENERAL",
        "section": "Module Contents > GENERAL",
        "text": "GENERAL = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.RIGID",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RIGID",
        "section": "Module Contents > RIGID",
        "text": "RIGID = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.TIED",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > TIED",
        "section": "Module Contents > TIED",
        "text": "TIED = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.TIED_WITH_FAILURE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > TIED_WITH_FAILURE",
        "section": "Module Contents > TIED_WITH_FAILURE",
        "text": "TIED_WITH_FAILURE = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.ERODING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ERODING",
        "section": "Module Contents > ERODING",
        "text": "ERODING = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactType.EDGE",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > EDGE",
        "section": "Module Contents > EDGE",
        "text": "EDGE = 7\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OffsetType",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > OffsetType",
        "section": "Module Contents > OffsetType",
        "text": "class ansys.dyna.core.pre.dynabase.OffsetType(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nNULL = ''\n\n\n\n\n\nOFFSET = 'OFFSET'\n\n\n\n\n\nBEAM_OFFSET = 'BEAM_OFFSET'\n\n\n\n\n\nCONSTRAINED_OFFSET = 'CONSTRAINED_OFFSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OffsetType.NULL",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > NULL",
        "section": "Module Contents > NULL",
        "text": "NULL = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OffsetType.OFFSET",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > OFFSET",
        "section": "Module Contents > OFFSET",
        "text": "OFFSET = 'OFFSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OffsetType.BEAM_OFFSET",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BEAM_OFFSET",
        "section": "Module Contents > BEAM_OFFSET",
        "text": "BEAM_OFFSET = 'BEAM_OFFSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.OffsetType.CONSTRAINED_OFFSET",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > CONSTRAINED_OFFSET",
        "section": "Module Contents > CONSTRAINED_OFFSET",
        "text": "CONSTRAINED_OFFSET = 'CONSTRAINED_OFFSET'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactFormulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ContactFormulation",
        "section": "Module Contents > ContactFormulation",
        "text": "class ansys.dyna.core.pre.dynabase.ContactFormulation(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSTANDARD_PENALTY = 0\n\n\n\n\n\nSOFT_CONSTRAINT_PENALTY = 1\n\n\n\n\n\nSEGMENT_BASED_CONTACT_PENALTY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactFormulation.STANDARD_PENALTY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > STANDARD_PENALTY",
        "section": "Module Contents > STANDARD_PENALTY",
        "text": "STANDARD_PENALTY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactFormulation.SOFT_CONSTRAINT_PENALTY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SOFT_CONSTRAINT_PENALTY",
        "section": "Module Contents > SOFT_CONSTRAINT_PENALTY",
        "text": "SOFT_CONSTRAINT_PENALTY = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactFormulation.SEGMENT_BASED_CONTACT_PENALTY",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SEGMENT_BASED_CONTACT_PENALTY",
        "section": "Module Contents > SEGMENT_BASED_CONTACT_PENALTY",
        "text": "SEGMENT_BASED_CONTACT_PENALTY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SBOPT",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SBOPT",
        "section": "Module Contents > SBOPT",
        "text": "class ansys.dyna.core.pre.dynabase.SBOPT(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nASSUME_PLANER_SEGMENTS = 2\n\n\n\n\n\nWRAPED_SEGMENT_CHECKING = 3\n\n\n\n\n\nSLDING_OPTION = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SBOPT.ASSUME_PLANER_SEGMENTS",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ASSUME_PLANER_SEGMENTS",
        "section": "Module Contents > ASSUME_PLANER_SEGMENTS",
        "text": "ASSUME_PLANER_SEGMENTS = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SBOPT.WRAPED_SEGMENT_CHECKING",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > WRAPED_SEGMENT_CHECKING",
        "section": "Module Contents > WRAPED_SEGMENT_CHECKING",
        "text": "WRAPED_SEGMENT_CHECKING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.SBOPT.SLDING_OPTION",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > SLDING_OPTION",
        "section": "Module Contents > SLDING_OPTION",
        "text": "SLDING_OPTION = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ContactSurface",
        "section": "Module Contents > ContactSurface",
        "text": "class ansys.dyna.core.pre.dynabase.ContactSurface(set)\n\nDefines a contact interface.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nid\n\n\n\n\n\nthickness = 0\n\n\n\n\n\npenalty_stiffness = 1.0\n\n\n\n\n\nset_contact_region(box)\n\nInclude in the contact definition only those SURFA nodes/segments within a box.\n\nParameters\n\nbox\n\nBox\n\nBox-shaped volume.\n\n!! processed by numpydoc !!\n\n\n\nset_contact_thickness(thickness)\n\nSet the contact thickness for the SURFA surface.\n\nParameters\n\nthickness\n\npython:float\n\nContact thickness.\n\n!! processed by numpydoc !!\n\n\n\nset_penalty_stiffness_scale_factor(scalefactor=1.0)\n\nSet the scale factor on the default surface penalty stiffness.\n\nParameters\n\nscalefactor\n\npython:int, optional\n\nScale factor. The default is 1.0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.id",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > thickness",
        "section": "Module Contents > thickness",
        "text": "thickness = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.penalty_stiffness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > penalty_stiffness",
        "section": "Module Contents > penalty_stiffness",
        "text": "penalty_stiffness = 1.0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.set_contact_region",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_contact_region",
        "section": "Module Contents > set_contact_region",
        "text": "set_contact_region(box)\n\nInclude in the contact definition only those SURFA nodes/segments within a box.\n\nParameters\n\nbox\n\nBox\n\nBox-shaped volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.set_contact_thickness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_contact_thickness",
        "section": "Module Contents > set_contact_thickness",
        "text": "set_contact_thickness(thickness)\n\nSet the contact thickness for the SURFA surface.\n\nParameters\n\nthickness\n\npython:float\n\nContact thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactSurface.set_penalty_stiffness_scale_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_penalty_stiffness_scale_factor",
        "section": "Module Contents > set_penalty_stiffness_scale_factor",
        "text": "set_penalty_stiffness_scale_factor(scalefactor=1.0)\n\nSet the scale factor on the default surface penalty stiffness.\n\nParameters\n\nscalefactor\n\npython:int, optional\n\nScale factor. The default is 1.0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Contact",
        "section": "Module Contents > Contact",
        "text": "class ansys.dyna.core.pre.dynabase.Contact(type=ContactType.NULL, category=ContactCategory.SINGLE_SURFACE_CONTACT, offset=OffsetType.NULL)\n\nProvide a way of treating interaction between disjoint parts.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nrigidwall_penalties_scale_factor = 1\n\n\n\n\n\nmax_penetration_check_multiplier = 4\n\n\n\n\n\ninitial_penetrations = 0\n\n\n\n\n\nrigidwall_gap_stiffness = 0\n\n\n\n\n\ncategory\n\n\n\n\n\ntype\n\n\n\n\n\nmortar = False\n\n\n\n\n\nignore = 0\n\n\n\n\n\noffset = ''\n\n\n\n\n\nstatic_friction_coeff = 0\n\n\n\n\n\ndynamic_friction_coeff = 0\n\n\n\n\n\nbirth_time = 0\n\n\n\n\n\ndeath_time = 1e+20\n\n\n\n\n\noption_tiebreak = False\n\n\n\n\n\noptionres = 0\n\n\n\n\n\ncontact_formulation = 0\n\n\n\n\n\nsegment_based_contact_option = 2\n\n\n\n\n\nset_mortar()\n\nSet the mortar contact.\n\nA mort contact is a segment-to-segment, penalty-based contact.\n\n!! processed by numpydoc !!\n\n\n\nset_tiebreak()\n\nSet the contact allow for failure.\n\nA tieback is a special case of this. After failure, the contact\nusually becomes a normal one-way, two-way, or single surface version.\n\n!! processed by numpydoc !!\n\n\n\nset_friction_coefficient(static=0, dynamic=0)\n\nSet the coefficient of friction.\n\nParameters\n\nstatic\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.\n\ndynamic\n\npython:float, optional\n\nDynamic coefficient of friction.  The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nset_active_time(birth_time=0, death_time=1e+20)\n\nSet the birth and death time to active and deactivate the contact.\n\nParameters\n\nbirth_time\n\npython:int, optional\n\nTime to activate the contact. The default is 0.\n\ndeath_time\n\npython:float, optional\n\nTime to deactivate the contact. The default is 1e20.\n\n!! processed by numpydoc !!\n\n\n\nset_initial_penetration()\n\nIgnore initial penetrations.\n\n!! processed by numpydoc !!\n\n\n\nset_slave_surface(surface)\n\nSet the slave contact interface.\n\n!! processed by numpydoc !!\n\n\n\nset_master_surface(surface)\n\nSet the master contact interface.\n\n!! processed by numpydoc !!\n\n\n\nset_penalty_algorithm(formulation=ContactFormulation.STANDARD_PENALTY, segment_based_contact_option=SBOPT.ASSUME_PLANER_SEGMENTS)\n\nSet the contact formulation.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a contact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.rigidwall_penalties_scale_factor",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > rigidwall_penalties_scale_factor",
        "section": "Module Contents > rigidwall_penalties_scale_factor",
        "text": "rigidwall_penalties_scale_factor = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.max_penetration_check_multiplier",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > max_penetration_check_multiplier",
        "section": "Module Contents > max_penetration_check_multiplier",
        "text": "max_penetration_check_multiplier = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.initial_penetrations",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > initial_penetrations",
        "section": "Module Contents > initial_penetrations",
        "text": "initial_penetrations = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.rigidwall_gap_stiffness",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > rigidwall_gap_stiffness",
        "section": "Module Contents > rigidwall_gap_stiffness",
        "text": "rigidwall_gap_stiffness = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.category",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > category",
        "section": "Module Contents > category",
        "text": "category\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.mortar",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > mortar",
        "section": "Module Contents > mortar",
        "text": "mortar = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.ignore",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ignore",
        "section": "Module Contents > ignore",
        "text": "ignore = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.offset",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > offset",
        "section": "Module Contents > offset",
        "text": "offset = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.static_friction_coeff",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > static_friction_coeff",
        "section": "Module Contents > static_friction_coeff",
        "text": "static_friction_coeff = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.dynamic_friction_coeff",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > dynamic_friction_coeff",
        "section": "Module Contents > dynamic_friction_coeff",
        "text": "dynamic_friction_coeff = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.birth_time",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > birth_time",
        "section": "Module Contents > birth_time",
        "text": "birth_time = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.death_time",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > death_time",
        "section": "Module Contents > death_time",
        "text": "death_time = 1e+20\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.option_tiebreak",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > option_tiebreak",
        "section": "Module Contents > option_tiebreak",
        "text": "option_tiebreak = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.optionres",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > optionres",
        "section": "Module Contents > optionres",
        "text": "optionres = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.contact_formulation",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > contact_formulation",
        "section": "Module Contents > contact_formulation",
        "text": "contact_formulation = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.segment_based_contact_option",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > segment_based_contact_option",
        "section": "Module Contents > segment_based_contact_option",
        "text": "segment_based_contact_option = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_mortar",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_mortar",
        "section": "Module Contents > set_mortar",
        "text": "set_mortar()\n\nSet the mortar contact.\n\nA mort contact is a segment-to-segment, penalty-based contact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_tiebreak",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_tiebreak",
        "section": "Module Contents > set_tiebreak",
        "text": "set_tiebreak()\n\nSet the contact allow for failure.\n\nA tieback is a special case of this. After failure, the contact\nusually becomes a normal one-way, two-way, or single surface version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_friction_coefficient",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_friction_coefficient",
        "section": "Module Contents > set_friction_coefficient",
        "text": "set_friction_coefficient(static=0, dynamic=0)\n\nSet the coefficient of friction.\n\nParameters\n\nstatic\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.\n\ndynamic\n\npython:float, optional\n\nDynamic coefficient of friction.  The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_active_time",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_active_time",
        "section": "Module Contents > set_active_time",
        "text": "set_active_time(birth_time=0, death_time=1e+20)\n\nSet the birth and death time to active and deactivate the contact.\n\nParameters\n\nbirth_time\n\npython:int, optional\n\nTime to activate the contact. The default is 0.\n\ndeath_time\n\npython:float, optional\n\nTime to deactivate the contact. The default is 1e20.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_initial_penetration",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_initial_penetration",
        "section": "Module Contents > set_initial_penetration",
        "text": "set_initial_penetration()\n\nIgnore initial penetrations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_slave_surface",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_slave_surface",
        "section": "Module Contents > set_slave_surface",
        "text": "set_slave_surface(surface)\n\nSet the slave contact interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_master_surface",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_master_surface",
        "section": "Module Contents > set_master_surface",
        "text": "set_master_surface(surface)\n\nSet the master contact interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.set_penalty_algorithm",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_penalty_algorithm",
        "section": "Module Contents > set_penalty_algorithm",
        "text": "set_penalty_algorithm(formulation=ContactFormulation.STANDARD_PENALTY, segment_based_contact_option=SBOPT.ASSUME_PLANER_SEGMENTS)\n\nSet the contact formulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Contact.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a contact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > ContactGroup",
        "section": "Module Contents > ContactGroup",
        "text": "class ansys.dyna.core.pre.dynabase.ContactGroup\n\nCreate a contact group.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncontactlist = []\n\n\n\n\n\nadd(contact)\n\nAdd a contact in the group.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate contacts.\n\n!! processed by numpydoc !!\n\n\n\nnum()\n\nGet the number of contact objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup.contactlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > contactlist",
        "section": "Module Contents > contactlist",
        "text": "contactlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup.add",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > add",
        "section": "Module Contents > add",
        "text": "add(contact)\n\nAdd a contact in the group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate contacts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.ContactGroup.num",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > num",
        "section": "Module Contents > num",
        "text": "num()\n\nGet the number of contact objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Constraint",
        "section": "Module Contents > Constraint",
        "text": "class ansys.dyna.core.pre.dynabase.Constraint\n\nProvides a way of constraining degrees of freedom to move together in some way.\n\n!! processed by numpydoc !!\n\n\n\nspotweldlist = []\n\n\n\n\n\ncnrbsetidlist = []\n\n\n\n\n\njointsphericallist = []\n\n\n\n\n\nmergerigidlist = []\n\n\n\n\n\ncreate_spotweld(nodeid1, nodeid2)\n\nDefine massless spot welds between non-contiguous nodal pairs.\n\nParameters\n\nnodeid1\n\npython:int\n\nID for the first node.\n\nnodeid2\n\npython:int\n\nID for the second node.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_cnrb(nodeset)\n\nCreate a nodal rigid body, which is a rigid body that consists of defined nodes.\n\nParameters\n\nnodeset\n\nNodeSet\n\nNode set that defines the rigid body.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_joint_spherical(nodes, relative_penalty_stiffness=1.0, damping_scale_factor=1.0)\n\nCreate a joint between two rigid bodies.\n\nParameters\n\nnodes\n\npython:list\n\nList of nodes for creating the joint.\n\nrelative_penalty_stiffness\n\npython:int, optional\n\nRelative penalty stiffness. The default is 1.0.\n\ndamping_scale_factor\n\npython:int, optional\n\nDamping scale factor on the default damping value.\nThe default is 1.0.\n\n!! processed by numpydoc !!\n\n\n\nmerge_two_rigid_bodies(lead_rigidbody=0, constrained_rigidbody=0)\n\nMerge two rigid bodies.\n\nOne rigid body, called the constrained rigid body,\nis merged into another rigid body, called the lead rigid body.\n\nParameters\n\nlead_rigidbody\n\npython:int, optional\n\nPart ID for the lead rigid body. The default is 0.\n\nconstrained_rigidbody\n\npython:int\n\nPart ID for the constrained rigid body. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a constraint.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.spotweldlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > spotweldlist",
        "section": "Module Contents > spotweldlist",
        "text": "spotweldlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.cnrbsetidlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > cnrbsetidlist",
        "section": "Module Contents > cnrbsetidlist",
        "text": "cnrbsetidlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.jointsphericallist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > jointsphericallist",
        "section": "Module Contents > jointsphericallist",
        "text": "jointsphericallist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.mergerigidlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > mergerigidlist",
        "section": "Module Contents > mergerigidlist",
        "text": "mergerigidlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.create_spotweld",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_spotweld",
        "section": "Module Contents > create_spotweld",
        "text": "create_spotweld(nodeid1, nodeid2)\n\nDefine massless spot welds between non-contiguous nodal pairs.\n\nParameters\n\nnodeid1\n\npython:int\n\nID for the first node.\n\nnodeid2\n\npython:int\n\nID for the second node.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.create_cnrb",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_cnrb",
        "section": "Module Contents > create_cnrb",
        "text": "create_cnrb(nodeset)\n\nCreate a nodal rigid body, which is a rigid body that consists of defined nodes.\n\nParameters\n\nnodeset\n\nNodeSet\n\nNode set that defines the rigid body.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.create_joint_spherical",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_joint_spherical",
        "section": "Module Contents > create_joint_spherical",
        "text": "create_joint_spherical(nodes, relative_penalty_stiffness=1.0, damping_scale_factor=1.0)\n\nCreate a joint between two rigid bodies.\n\nParameters\n\nnodes\n\npython:list\n\nList of nodes for creating the joint.\n\nrelative_penalty_stiffness\n\npython:int, optional\n\nRelative penalty stiffness. The default is 1.0.\n\ndamping_scale_factor\n\npython:int, optional\n\nDamping scale factor on the default damping value.\nThe default is 1.0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.merge_two_rigid_bodies",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > merge_two_rigid_bodies",
        "section": "Module Contents > merge_two_rigid_bodies",
        "text": "merge_two_rigid_bodies(lead_rigidbody=0, constrained_rigidbody=0)\n\nMerge two rigid bodies.\n\nOne rigid body, called the constrained rigid body,\nis merged into another rigid body, called the lead rigid body.\n\nParameters\n\nlead_rigidbody\n\npython:int, optional\n\nPart ID for the lead rigid body. The default is 0.\n\nconstrained_rigidbody\n\npython:int\n\nPart ID for the constrained rigid body. The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Constraint.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a constraint.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > BoundaryCondition",
        "section": "Module Contents > BoundaryCondition",
        "text": "class ansys.dyna.core.pre.dynabase.BoundaryCondition\n\nProvides a way of defining imposed motions on boundary nodes.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nspclist = []\n\n\n\n\n\nimposedmotionlist = []\n\n\n\n\n\ntemplist = []\n\n\n\n\n\nconvectionlist = []\n\n\n\n\n\nassign_model(model)\n\n\n\n\n\ncreate_spc(nodeset, tx=True, ty=True, tz=True, rx=True, ry=True, rz=True, cid=0, birth=0, death=1e+20)\n\nDefine nodal single point constraints.\n\nParameters\n\nnodeset\n\nNodeSet.\n\nNode set.\n\ncontraint_x/y/z_direction\n\npython:int\n\nTranslational constraint in local x/y/z-direction.\n\ncontraint_x/y/zaxis_rotate\n\npython:int\n\nRotational constraint about local x/y/z-axis.\n\n!! processed by numpydoc !!\n\n\n\ncreate_imposed_motion(set, curve, motion=Motion.DISPLACEMENT, dof=DOF.X_TRANSLATIONAL, scalefactor=1, birthtime=0)\n\nCreate an imposed nodal motion on a node or set of nodes.\n\nAn imposed nodal motion can be a velocity, acceleration, or displacement.\n\nParameters\n\npartset\n\nPartSet.\n\nPart set.\n\ncurve\n\nCurve\n\nCurve ID or function ID to describe the motion value as a function of time.\n\nmotion\n\nenum\n\nVelocity/Acceleration/Displacement flag.\n\ndof\n\nenum\n\nApplicable degrees of freedom.\n\nscalefactor\n\npython:int, optional\n\nLoad curve scale factor. The default is 1.\n\nbirthtime\n\npython:int, optional\n\n\n\n!! processed by numpydoc !!\n\n\n\ncreate_temperature(nodeset, curve=None, scalefactor=1)\n\nCreate temperature boundary conditions for a thermal or coupled thermal/structural analysis.\n\nParameters\n\nnodeset\n\nNodeSet.\n\nNode set.\n\ncurve\n\nCurve, optional\n\nTemperature, T, specification. The default is None.\n\nscalefactor\n\npython:float, optional\n\nTemperature, T, curve multiplier. The default is 1.\n\n!! processed by numpydoc !!\n\n\n\ncreate_convection(segmentset=None, convection_heat_transfer_coefficient=None, convection_heat_transfer_coefficient_multiplier=0.0, environment_temperature=None, environment_temperature_multiplier=0.0)\n\nApply a convection boundary condition on SEGMENT_SET for a thermal analysis.\n\nParameters\n\nsegmentset\n\nSegmentSet.\n\nSegment set.\n\nconvection_heat_transfer_coefficient\n\nCurve\n\nConvection heat transfer coefficient.\n\nconvection_heat_transfer_coefficient_multiplier\n\npython:float\n\nCurve multiplier for convection heat transfer coefficient.\n\nenvironment_temperature\n\nCurve\n\nEnvironment temperature.\n\nenvironment_temperature_multiplier\n\npython:float\n\nCurve multiplier for environment temperature.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a boundary condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.spclist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > spclist",
        "section": "Module Contents > spclist",
        "text": "spclist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.imposedmotionlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > imposedmotionlist",
        "section": "Module Contents > imposedmotionlist",
        "text": "imposedmotionlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.templist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > templist",
        "section": "Module Contents > templist",
        "text": "templist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.convectionlist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > convectionlist",
        "section": "Module Contents > convectionlist",
        "text": "convectionlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.assign_model",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > assign_model",
        "section": "Module Contents > assign_model",
        "text": "assign_model(model)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.create_spc",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_spc",
        "section": "Module Contents > create_spc",
        "text": "create_spc(nodeset, tx=True, ty=True, tz=True, rx=True, ry=True, rz=True, cid=0, birth=0, death=1e+20)\n\nDefine nodal single point constraints.\n\nParameters\n\nnodeset\n\nNodeSet.\n\nNode set.\n\ncontraint_x/y/z_direction\n\npython:int\n\nTranslational constraint in local x/y/z-direction.\n\ncontraint_x/y/zaxis_rotate\n\npython:int\n\nRotational constraint about local x/y/z-axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.create_imposed_motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_imposed_motion",
        "section": "Module Contents > create_imposed_motion",
        "text": "create_imposed_motion(set, curve, motion=Motion.DISPLACEMENT, dof=DOF.X_TRANSLATIONAL, scalefactor=1, birthtime=0)\n\nCreate an imposed nodal motion on a node or set of nodes.\n\nAn imposed nodal motion can be a velocity, acceleration, or displacement.\n\nParameters\n\npartset\n\nPartSet.\n\nPart set.\n\ncurve\n\nCurve\n\nCurve ID or function ID to describe the motion value as a function of time.\n\nmotion\n\nenum\n\nVelocity/Acceleration/Displacement flag.\n\ndof\n\nenum\n\nApplicable degrees of freedom.\n\nscalefactor\n\npython:int, optional\n\nLoad curve scale factor. The default is 1.\n\nbirthtime\n\npython:int, optional\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.create_temperature",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_temperature",
        "section": "Module Contents > create_temperature",
        "text": "create_temperature(nodeset, curve=None, scalefactor=1)\n\nCreate temperature boundary conditions for a thermal or coupled thermal/structural analysis.\n\nParameters\n\nnodeset\n\nNodeSet.\n\nNode set.\n\ncurve\n\nCurve, optional\n\nTemperature, T, specification. The default is None.\n\nscalefactor\n\npython:float, optional\n\nTemperature, T, curve multiplier. The default is 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.create_convection",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_convection",
        "section": "Module Contents > create_convection",
        "text": "create_convection(segmentset=None, convection_heat_transfer_coefficient=None, convection_heat_transfer_coefficient_multiplier=0.0, environment_temperature=None, environment_temperature_multiplier=0.0)\n\nApply a convection boundary condition on SEGMENT_SET for a thermal analysis.\n\nParameters\n\nsegmentset\n\nSegmentSet.\n\nSegment set.\n\nconvection_heat_transfer_coefficient\n\nCurve\n\nConvection heat transfer coefficient.\n\nconvection_heat_transfer_coefficient_multiplier\n\npython:float\n\nCurve multiplier for convection heat transfer coefficient.\n\nenvironment_temperature\n\nCurve\n\nEnvironment temperature.\n\nenvironment_temperature_multiplier\n\npython:float\n\nCurve multiplier for environment temperature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.BoundaryCondition.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a boundary condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > InitialCondition",
        "section": "Module Contents > InitialCondition",
        "text": "class ansys.dyna.core.pre.dynabase.InitialCondition\n\nProvides a way of initializing velocities and detonation points.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nvelocitylist = []\n\n\n\n\n\nvelocitynodelist = []\n\n\n\n\n\ntemperaturelist = []\n\n\n\n\n\nassign_model(model)\n\n\n\n\n\ncreate_velocity(velocityset, angular_velocity=0, velocity=Velocity(0, 0, 0), direction=Direction(0, 0, 0), stime=0)\n\nCreate initial velocities for rotating and/or translating bodies.\n\n!! processed by numpydoc !!\n\n\n\ncreate_velocity_node(nodeid, trans=Velocity(0, 0, 0), rot=RotVelocity(0, 0, 0))\n\nDefine initial nodal point velocities for a node.\n\n!! processed by numpydoc !!\n\n\n\ncreate_temperature(nodeset=None, temperature=0)\n\nCreate an initial nodal point temperature.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate an initial condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.velocitylist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > velocitylist",
        "section": "Module Contents > velocitylist",
        "text": "velocitylist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.velocitynodelist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > velocitynodelist",
        "section": "Module Contents > velocitynodelist",
        "text": "velocitynodelist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.temperaturelist",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > temperaturelist",
        "section": "Module Contents > temperaturelist",
        "text": "temperaturelist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.assign_model",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > assign_model",
        "section": "Module Contents > assign_model",
        "text": "assign_model(model)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.create_velocity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_velocity",
        "section": "Module Contents > create_velocity",
        "text": "create_velocity(velocityset, angular_velocity=0, velocity=Velocity(0, 0, 0), direction=Direction(0, 0, 0), stime=0)\n\nCreate initial velocities for rotating and/or translating bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.create_velocity_node",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_velocity_node",
        "section": "Module Contents > create_velocity_node",
        "text": "create_velocity_node(nodeid, trans=Velocity(0, 0, 0), rot=RotVelocity(0, 0, 0))\n\nDefine initial nodal point velocities for a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.create_temperature",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create_temperature",
        "section": "Module Contents > create_temperature",
        "text": "create_temperature(nodeset=None, temperature=0)\n\nCreate an initial nodal point temperature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.InitialCondition.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an initial condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RigidwallCylinder",
        "section": "Module Contents > RigidwallCylinder",
        "text": "class ansys.dyna.core.pre.dynabase.RigidwallCylinder(tail=Point(0, 0, 0), head=Point(0, 0, 0), radius=1, length=10)\n\nBases: BaseObj\n\nDefines a rigid wall with a cylinder form.\n\nParameters\n\ntail\n\nPoint, optional\n\nCoordinates of the tail of the normal vector.\nThe default is (0, 0, 0).\n\nhead\n\nPoint, optional\n\nCoordinates of the head of the normal vector.\nThe default is (0, 0, 0).\n\nradius\n\npython:float, optional\n\nRadius of the cylinder. The default is 1.\n\nlength\n\npython:float, optional\n\nLength of cylinder. The default is 10.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntail\n\n\n\n\n\nhead\n\n\n\n\n\nradius = 1\n\n\n\n\n\nlength = 10\n\n\n\n\n\nmotion = -1\n\n\n\n\n\nlcid = 0\n\n\n\n\n\ndir\n\n\n\n\n\ntype = 'rigidwall_cylinder'\n\n\n\n\n\nset_motion(curve, motion=RWMotion.VELOCITY, dir=Direction(1, 0, 0))\n\nSet the prescribed motion.\n\n!! processed by numpydoc !!\n\n\n\nget_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a rigidwall cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.tail",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > tail",
        "section": "Module Contents > tail",
        "text": "tail\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.head",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > head",
        "section": "Module Contents > head",
        "text": "head\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.radius",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > radius",
        "section": "Module Contents > radius",
        "text": "radius = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.length",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > length",
        "section": "Module Contents > length",
        "text": "length = 10\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > motion",
        "section": "Module Contents > motion",
        "text": "motion = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.lcid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > lcid",
        "section": "Module Contents > lcid",
        "text": "lcid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.dir",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > dir",
        "section": "Module Contents > dir",
        "text": "dir\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'rigidwall_cylinder'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.set_motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_motion",
        "section": "Module Contents > set_motion",
        "text": "set_motion(curve, motion=RWMotion.VELOCITY, dir=Direction(1, 0, 0))\n\nSet the prescribed motion.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.get_data",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_data",
        "section": "Module Contents > get_data",
        "text": "get_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallCylinder.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a rigidwall cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RigidwallSphere",
        "section": "Module Contents > RigidwallSphere",
        "text": "class ansys.dyna.core.pre.dynabase.RigidwallSphere(center=Point(0, 0, 0), orient=Point(0, 0, 0), radius=1)\n\nBases: BaseObj\n\nDefines a rigid wall with a sphere form.\n\nParameters\n\ncenter\n\nPoint, optional\n\nThe center of sphere.\nThe default is (0, 0, 0).\n\norient\n\nPoint, optional\n\nVector n determines the orintation of the rigidwall,the center define the tail of normal n,\nthe orient define the head of normal n.\nThe default is (0, 0, 0).\n\nradius\n\npython:float, optional\n\nRadius of the sphere. The default is 1.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncenter\n\n\n\n\n\norient\n\n\n\n\n\nradius = 1\n\n\n\n\n\nmotion = -1\n\n\n\n\n\nlcid = 0\n\n\n\n\n\ndir\n\n\n\n\n\ntype = 'rigidwall_sphere'\n\n\n\n\n\nset_motion(curve, motion=RWMotion.VELOCITY, dir=Direction(1, 0, 0))\n\nSet the prescribed motion.\n\n!! processed by numpydoc !!\n\n\n\nget_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a rigidwall sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.center",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > center",
        "section": "Module Contents > center",
        "text": "center\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.orient",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > orient",
        "section": "Module Contents > orient",
        "text": "orient\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.radius",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > radius",
        "section": "Module Contents > radius",
        "text": "radius = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > motion",
        "section": "Module Contents > motion",
        "text": "motion = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.lcid",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > lcid",
        "section": "Module Contents > lcid",
        "text": "lcid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.dir",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > dir",
        "section": "Module Contents > dir",
        "text": "dir\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'rigidwall_sphere'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.set_motion",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > set_motion",
        "section": "Module Contents > set_motion",
        "text": "set_motion(curve, motion=RWMotion.VELOCITY, dir=Direction(1, 0, 0))\n\nSet the prescribed motion.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.get_data",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_data",
        "section": "Module Contents > get_data",
        "text": "get_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallSphere.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a rigidwall sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > RigidwallPlanar",
        "section": "Module Contents > RigidwallPlanar",
        "text": "class ansys.dyna.core.pre.dynabase.RigidwallPlanar(tail=Point(0, 0, 0), head=Point(0, 0, 0), coulomb_friction_coefficient=0.5)\n\nBases: BaseObj\n\nDefines planar rigid walls with either finite or infinite size.\n\nParameters\n\ntail\n\nPoint\n\nCoordinate of the tail of the normal vector.\nThe default is (0, 0, 0).\n\nhead\n\nPoint\n\nCoordinate of the head of the normal vector.\nThe default is (0, 0, 0).\n\ncoulomb_friction_coefficient\n\npython:float, optional\n\nFriction coefficieint in coulomb units. The default is 0.5.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntail\n\n\n\n\n\nhead\n\n\n\n\n\nfric = 0.5\n\n\n\n\n\ntype = 'rigidwall_planar'\n\n\n\n\n\nget_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate planar rigid walls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.tail",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > tail",
        "section": "Module Contents > tail",
        "text": "tail\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.head",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > head",
        "section": "Module Contents > head",
        "text": "head\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.fric",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > fric",
        "section": "Module Contents > fric",
        "text": "fric = 0.5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'rigidwall_planar'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.get_data",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > get_data",
        "section": "Module Contents > get_data",
        "text": "get_data() -> List\n\nGet the rigidwall data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.RigidwallPlanar.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate planar rigid walls.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.GravityOption",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > GravityOption",
        "section": "Module Contents > GravityOption",
        "text": "class ansys.dyna.core.pre.dynabase.GravityOption(*args, **kwds)\n\nBases: enum.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDIR_X = 'X'\n\n\n\n\n\nDIR_Y = 'Y'\n\n\n\n\n\nDIR_Z = 'Z'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.GravityOption.DIR_X",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DIR_X",
        "section": "Module Contents > DIR_X",
        "text": "DIR_X = 'X'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.GravityOption.DIR_Y",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DIR_Y",
        "section": "Module Contents > DIR_Y",
        "text": "DIR_Y = 'Y'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.GravityOption.DIR_Z",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > DIR_Z",
        "section": "Module Contents > DIR_Z",
        "text": "DIR_Z = 'Z'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > Gravity",
        "section": "Module Contents > Gravity",
        "text": "class ansys.dyna.core.pre.dynabase.Gravity(dir=GravityOption.DIR_Z, load=Curve(x=[0, 0], y=[0, 0]))\n\nBases: BaseObj\n\nDefines body force loads using global axes directions.\n\nBody force loads are due to a prescribed base acceleration or\nangular velocity.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ndir = 'Z'\n\n\n\n\n\nload\n\n\n\n\n\ntype = 'gravity'\n\n\n\n\n\ncreate()\n\nDefine a body force.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity.stub",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity.dir",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > dir",
        "section": "Module Contents > dir",
        "text": "dir = 'Z'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity.load",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > load",
        "section": "Module Contents > load",
        "text": "load\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity.type",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'gravity'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynabase/index",
        "href": "autoapi/ansys/dyna/core/pre/dynabase/index.html#ansys.dyna.core.pre.dynabase.Gravity.create",
        "title": "ansys.dyna.core.pre.dynabase > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nDefine a body force.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/plot_john_reid_pendulum",
        "href": "examples/John_Reid_Pendulum/plot_john_reid_pendulum.html#john-reid-pendulum-example",
        "title": "John Reid pendulum example",
        "section": "John Reid pendulum example",
        "text": "This example is inspired by John Reid’s “Pendulum” example on the\nLS-DYNA Knowledge Base site. It shows how\nto use PyDyna to create a keyword file for LS-DYNA and solve it within\na Pythonic environment.\nJohn Reid pendulum example"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/plot_john_reid_pendulum",
        "href": "examples/John_Reid_Pendulum/plot_john_reid_pendulum.html#perform-required-imports",
        "title": "John Reid pendulum example > Perform required imports",
        "section": "Perform required imports",
        "text": "Import required packages, including those for the keywords, deck, and solver.\nPerform required imports"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/plot_john_reid_pendulum",
        "href": "examples/John_Reid_Pendulum/plot_john_reid_pendulum.html#create-a-deck-and-keywords",
        "title": "John Reid pendulum example > Create a deck and keywords",
        "section": "Create a deck and keywords",
        "text": "Create a deck, which is the container for all the keywords.\nThen, create and append individual keywords to the deck.\nCreate a deck and keywords"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/plot_john_reid_pendulum",
        "href": "examples/John_Reid_Pendulum/plot_john_reid_pendulum.html#view-the-model",
        "title": "John Reid pendulum example > View the model",
        "section": "View the model",
        "text": "You can use the PyVista plot method in the deck class to view\nthe model.\nView the model\nplot\ndeck"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/plot_john_reid_pendulum",
        "href": "examples/John_Reid_Pendulum/plot_john_reid_pendulum.html#run-the-dyna-solver",
        "title": "John Reid pendulum example > Run the Dyna solver",
        "section": "Run the Dyna solver",
        "text": "Total running time of the script: (0 minutes 9.714 seconds)\nDownload Jupyter notebook: plot_john_reid_pendulum.ipynb\nDownload Python source code: plot_john_reid_pendulum.py\nDownload zipped: plot_john_reid_pendulum.zip\nGallery generated by Sphinx-Gallery\nRun the Dyna solver\nDownload Jupyter notebook: plot_john_reid_pendulum.ipynb\nDownload Python source code: plot_john_reid_pendulum.py\nDownload zipped: plot_john_reid_pendulum.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansysdynacorelibtext_card",
        "title": "ansys.dyna.core.lib.text_card",
        "section": "ansys.dyna.core.lib.text_card",
        "text": "ansys.dyna.core.lib.text_card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#classes",
        "title": "ansys.dyna.core.lib.text_card > Classes",
        "section": "Classes",
        "text": "TextCard\nAbstract base class for all the implementations of keyword cards.\nClasses\nTextCard"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.text_card > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nAbstract base class for all the implementations of keyword cards.\nText cards are always unbounded.\nText cards are always active.\nGet the card format type.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > TextCard",
        "section": "Module Contents > TextCard",
        "text": "class ansys.dyna.core.lib.text_card.TextCard(name: str, content: str = None, format=format_type.default)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\n\n\n\n\nproperty bounded: bool\n\nText cards are always unbounded.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\nText cards are always active.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.value",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > value",
        "section": "Module Contents > value",
        "text": "property value: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.bounded",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > bounded",
        "section": "Module Contents > bounded",
        "text": "property bounded: bool\n\nText cards are always unbounded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.active",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nText cards are always active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.format",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.read",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/text_card/index",
        "href": "autoapi/ansys/dyna/core/lib/text_card/index.html#ansys.dyna.core.lib.text_card.TextCard.write",
        "title": "ansys.dyna.core.lib.text_card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/index",
        "href": "autoapi/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section provides descriptions of PyDYNA subpackages, submodules, classes,\nmethods, and attributes. Use the search feature or click links to view API documentation.\nAPI reference"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansysdynacorekeywordskeyword_classesmanualmat_295",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295",
        "text": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#classes",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Classes",
        "section": "Classes",
        "text": "Mat295\nDYNA MAT_295 keyword\nMatAnisotropicHyperelastic\nDYNA MAT_295 keyword\nClasses\nMat295\nMatAnisotropicHyperelastic"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.keywords.keyword_classes.auto.mat_295.Mat295\nDYNA MAT_295 keyword\nAbstract method to peek into the buffer before reading.\nNormally, the number of rows is calculated by the card, and is based on whether\nthe card is active or not. In most cases, a card will know whether it is active\nor not before it is read, because the active_func is based on information loaded\ninto previous cards. In some cases, active_func is based on information from the\ncurrent card, which might default to inactive, and so the card will never be read.\nBases: Mat295\nDYNA MAT_295 keyword\nModule Contents\nansys.dyna.core.keywords.keyword_classes.auto.mat_295.Mat295\nMat295"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansys.dyna.core.keywords.keyword_classes.manual.mat_295.Mat295",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents > Mat295",
        "section": "Module Contents > Mat295",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.mat_295.Mat295(**kwargs)\n\nBases: ansys.dyna.core.keywords.keyword_classes.auto.mat_295.Mat295\n\nDYNA MAT_295 keyword\n\n!! processed by numpydoc !!\n\n\n\nbefore_read(buf: TextIO) -> None\n\nAbstract method to peek into the buffer before reading.\n\nNormally, the number of rows is calculated by the card, and is based on whether\nthe card is active or not. In most cases, a card will know whether it is active\nor not before it is read, because the active_func is based on information loaded\ninto previous cards. In some cases, active_func is based on information from the\ncurrent card, which might default to inactive, and so the card will never be read.\n\n!! processed by numpydoc !!\n\n\n\nproperty ftype: int | None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansys.dyna.core.keywords.keyword_classes.manual.mat_295.Mat295.before_read",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents > before_read",
        "section": "Module Contents > before_read",
        "text": "before_read(buf: TextIO) -> None\n\nAbstract method to peek into the buffer before reading.\n\nNormally, the number of rows is calculated by the card, and is based on whether\nthe card is active or not. In most cases, a card will know whether it is active\nor not before it is read, because the active_func is based on information loaded\ninto previous cards. In some cases, active_func is based on information from the\ncurrent card, which might default to inactive, and so the card will never be read.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansys.dyna.core.keywords.keyword_classes.manual.mat_295.Mat295.ftype",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents > ftype",
        "section": "Module Contents > ftype",
        "text": "property ftype: int | None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansys.dyna.core.keywords.keyword_classes.manual.mat_295.MatAnisotropicHyperelastic",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents > MatAnisotropicHyperelastic",
        "section": "Module Contents > MatAnisotropicHyperelastic",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.mat_295.MatAnisotropicHyperelastic(**kwargs)\n\nBases: Mat295\n\nDYNA MAT_295 keyword\n\n!! processed by numpydoc !!\n\n\n\nsubkeyword = 'ANISOTROPIC_HYPERELASTIC'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/mat_295/index.html#ansys.dyna.core.keywords.keyword_classes.manual.mat_295.MatAnisotropicHyperelastic.subkeyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.mat_295 > Module Contents > subkeyword",
        "section": "Module Contents > subkeyword",
        "text": "subkeyword = 'ANISOTROPIC_HYPERELASTIC'\n\n"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#airbag-deploy",
        "title": "Airbag deploy",
        "section": "Airbag deploy",
        "text": "This example shows how to create an airbag deploy model with the PyDNYA pre service.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nAirbag deploy\npre\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#perform-required-imports",
        "title": "Airbag deploy > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#start-the-pre-service",
        "title": "Airbag deploy > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nreferring to the README.rst file in this server package.\nOnce the pre service is running, you can connect a client to it using\nthe hostname and port. This example uses the default localhost and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#start-the-solution-workflow",
        "title": "Airbag deploy > Start the solution workflow",
        "section": "Start the solution workflow",
        "text": "The DynaSolution class is like a workflow orchestrator.\nIt inherits methods from other classes and helps create a complete workflow.\nStart the solution workflow\nDynaSolution"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#create-standard-explicit-control-cards",
        "title": "Airbag deploy > Create standard explicit control cards",
        "section": "Create standard explicit control cards",
        "text": "The following code uses the set_termination method to set the termination time\nto 0.03 in CONTROL_TERMINATION. The DynaMech class\nautomatically generates the common control cards used in\nexplicit problems. CONTROL_ACCURACY, CONTACT, BULK VISCOCITY,\nand CONTACT are all automatically generated.\nCreate standard explicit control cards\nset_termination\n0.03\nDynaMech\nCONTROL_ACCURACY\nCONTACT\nBULK VISCOCITY\nCONTACT"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#define-a-keyword",
        "title": "Airbag deploy > Define a keyword",
        "section": "Define a keyword",
        "text": "Use the Airbag function in the DynaMech class to define\nAIRBAG_SIMPLE_AIRBAG_MODEL as a keyword. While LS-DYNA has many different\nairbag models, PyDYNA currently supports only one: SIMPLE_AIRBAG_MODEL.\nIf you have an urgent need for PyDYNA to support another airbag model, email\npyansys.core@ansys.com with your request.\nDefine a keyword\nAirbag\nDynaMech"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#generate-an-infinite-planar-rigid-wall",
        "title": "Airbag deploy > Generate an infinite planar rigid wall",
        "section": "Generate an infinite planar rigid wall",
        "text": "To generate an infinite planar rigidwall, define the coordinates of the heat\nvector and the tail vector of the plane.\nGenerate an infinite planar rigid wall"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#define-a-node-to-surface-contact",
        "title": "Airbag deploy > Define a node-to-surface contact",
        "section": "Define a node-to-surface contact",
        "text": "Define a node-to-surface contact by passing a master part set and a slave\npart set.\nDefine a node-to-surface contact"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#define-material-cards",
        "title": "Airbag deploy > Define material cards",
        "section": "Define material cards",
        "text": "LS-DYNA has over 300 materials that are used for varied applications.\nWhile PyDYNA does not yet support all material cards, it does support\nmost commonly used materials, including FABRIC, MAT_ELASTIC,\nPIECEWISE_LINEAR_PLASTICITY, and RIGID. All supported materials\nare accessed from the dynamaterial class. In the following code,\nMAT_RIGID is defined as the material  for the cylindrical tube and the\nbottom plate. MAT_FABRIC is defined as the material for the airbag volume.\nNote that platemat also has constraints defined.\nDefine material cards\nFABRIC\nMAT_ELASTIC\nPIECEWISE_LINEAR_PLASTICITY\nRIGID\ndynamaterial\nMAT_RIGID\nMAT_FABRIC\nplatemat"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#define-sectional-properties",
        "title": "Airbag deploy > Define sectional properties",
        "section": "Define sectional properties",
        "text": "The following code defines the sectional properties of the parts. This example\nhas three shell parts. Each shell part is initialized as ShellPart with a\nunique ID and an appropriate shell formulation is assigned. Again,\nPyDYNA does not yet support all element formulations. You can find the\nsupported formulations in the dynabase class.\nDefine sectional properties\nShellPart\ndynabase"
    },
    {
        "objectID": "examples/Airbag/airbag_deploy",
        "href": "examples/Airbag/airbag_deploy.html#define-database-outputs",
        "title": "Airbag deploy > Define database outputs",
        "section": "Define database outputs",
        "text": "Use the set_output_database() and create_database_binary() methods to define the\noutput frequency of the ASCII and binary D3PLOT files. Then, use the save_file()\nmethod to write out the model as an input DYNA key file.\nTotal running time of the script: (0 minutes 0.105 seconds)\nDownload Jupyter notebook: airbag_deploy.ipynb\nDownload Python source code: airbag_deploy.py\nDownload zipped: airbag_deploy.zip\nGallery generated by Sphinx-Gallery\nDefine database outputs\nset_output_database()\ncreate_database_binary()\nsave_file()\nDownload Jupyter notebook: airbag_deploy.ipynb\nDownload Python source code: airbag_deploy.py\nDownload zipped: airbag_deploy.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansysdynacorepredynaem",
        "title": "ansys.dyna.core.pre.dynaem",
        "section": "ansys.dyna.core.pre.dynaem",
        "text": "Module for creating an electromagnetism (EM) input deck.\nansys.dyna.core.pre.dynaem"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#classes",
        "title": "ansys.dyna.core.pre.dynaem > Classes",
        "section": "Classes",
        "text": "Isopotential_ConnType\nCreate a collection of name/value pairs.\nDynaEM\nContains methods for creating keywords related to EM.\nEMType\nCreate a collection of name/value pairs.\nEMDimension\nCreate a collection of name/value pairs.\nBEMSOLVER\nCreate a collection of name/value pairs.\nFEMSOLVER\nCreate a collection of name/value pairs.\nEMAnalysis\nEnables the EM solver and sets its options.\nCircuitType\nCreate a collection of name/value pairs.\nCircuit\nDefines an electrical circuit.\nEMContactType\nCreate a collection of name/value pairs.\nEMContact\nDetects contact between conductors.\nEMRandlesLayer\nCreate a collection of name/value pairs.\nIsopotential\nDefines an isopotential.\nRogoCoil\nMeasures the total current flowing through a given section of the conductor.\nRandlesCellType\nCreate a collection of name/value pairs.\nRandlesCell\nDefine parameters for a Randles Cell.\nClasses\nIsopotential_ConnType\nDynaEM\nEMType\nEMDimension\nBEMSOLVER\nFEMSOLVER\nEMAnalysis\nCircuitType\nCircuit\nEMContactType\nEMContact\nEMRandlesLayer\nIsopotential\nRogoCoil\nRandlesCellType\nRandlesCell"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for creating keywords related to EM.\nEnable the EM solver and set its options.\nEM solver. The default is 0. Options are:\nEQ.-1: Turn off the EM solver after reading the EM keywords.\nEQ.1: Eddy current solver.\nEQ.2: Induced heating solver.\nEQ.3: Resistive heating solver.\nEQ.11: Electrophysiology monodomain.\nEQ.12: Electrophysiology bidomain.\nEQ.13: Electrophysiology monodomain coupled with bidomain.\nNumber of local EM steps in a whole period for when emsol = 2.\nThe default is 100.\nMacro time step for when emsol = 2. The default is 0.\nNumber of electromagnetism cycles between the recalculation of FEM matrices.\nThe default is 5000.\nNumber of electromagnetism cycles between the recalculation of BEM matrices.\nThe default is 5000.\nTrue when successful, False when failed.\nControl the EM time step and its evolution.\nTime step type. Options are:\nEQ.1: Constant time step given in DTCONST\nEQ.2: Time step as a function of time given by a load curve specified in LCID\nEQ.3: Automatic time step computation, depending on the solver type\nThis time step is then multiplied by FACTOR.\nConstant value for the time step for when tstype = 1.\nTrue when successful, False when failed.\nCreate an optional card for defining options on electromagnetic contacts between two sets of parts.\nElectromagnetic contact ID. The default is 0.\nDetection type.  The default is 0. Options are:\nEQ.0: Contact type 0\nEQ.1: Contact type 1\nMaster part set ID. The default is 0.\nSlave part set ID.  The default is 0.\nFirst contact coefficient for contact detection conditions.\nThe default is 0.3.\nSecond contact coefficient for contact detection conditions.\nThe default is 0.3.\nThird contact coefficient for contact detection conditions.\nThe default is 0.3.\nContact condition 3 when dtype = 1.\nTrue when successful, False when failed.\nDefine Rogowsky coils to measure a global current versus time through a segment set or a node set.\nRogowsky coil ID.\nSegment or node set ID.\nType of set. The default is 1. Options are:\nEQ.1: Segment set\nEQ.2: Node set\nType of current measured. The default is 1. Options are:\nEQ.1: Volume current\nEQ.2: Surface current (not available yet}\nEQ.3: Magnetic field flow (B field times area)\nTrue when successful, False when failed.\nCreate an electromagnetic material type and set properties\nfor a material whose permeability equals the free space permeability.\nMaterial ID.\nElectromagnetism type of the material. Options are:\nEQ.0: Air or vacuum\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\nEQ.2: Conductor carrying a source\nEQ.3: Fluid conductor\nEQ.4: Conductor not connected to any current or voltage source, where the eddy current problem is solved\nInitial electrical conductivity of the material.\nTrue when successful, False when failed.\nCreate an electromagnetic material type and set properties\nwhose permeability is different than the free space permeability.\nMaterial ID.\nElectromagnetism type of the material. Options are:\nEQ.0: Air or vacuum\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\nEQ.2: Conductor carrying a source\nEQ.4: Conductor not connected to any current or voltage source, where the wddy current problem is solved\nInitial electrical conductivity of the material.\nID of the EOS to use for the electrical conductivity.\nRelative permeability, which is the ratio of the permeability of a specific\nmedium to the permeability of the free space.\nTrue when successful, False when failed.\nTurn on the monolithic FEM-BEM solver.\nMonolithic solver type. The default is 0. The only option is EQ.0: Direct symmetric solver.\nSolver type. The default is 0. Options are:\nEQ.0: MINRES iterative solver\nEQ.1: GMRES iterative solver\nAbsolute tolerance. The default is 1e-6.\nRelative tolerance. The default is 1e-4.\nMaximum number of iterations. The default is 500.\nTrue when successful, False when failed.\nDefine the level of EM-related output on the screen and in the message file.\nLevel of matrix assembly output to show on the screen. The default is 0.\nOptions are:\nEQ.0: No output\nEQ.1: Basic assembly steps\nEQ.2: Basic assembly steps + percentage completed + final statistics\nEQ.3: Basic assembly steps + percentage completed + statistics at each percentage of completion\nLevel of matrix assembly output to write to the message file. The default\nis 0. Options are:\nEQ.0: No output\nEQ.1: Basic assembly steps\nEQ.2: Basic assembly steps + percentage completed + final statistics\nEQ.3: Vasic assembly steps + percentage completed + statistics at each percentage of completion\nLevel of solver output to show on the screen. The default is 0. Options are:\nEQ.0: No output\nEQ.1: Global information at each FEM iteration\nEQ.2: Detailed information at each FEM iteration\nLevel of solver output to write to the message file. The default is 0.\nOptions are:\nEQ.0: No output\nEQ.1: Global information at each FEM iteration\n0 EQ.2: Detailed information at each FEM iteration\nTrue when successful, False when failed.\nDefine a connection between two isopotentials or between an isopotential and the ground.\nIsopotential connection type. The default is SHORT_CIRCUIT.\nFirst isopotential to connect.\nSecond isopotential to connect.\nValue of the resistance, voltage, or current depending on the isopotential\nconnection type. The default is 0.\nConnection ID.\nEnable the output of global EM.\nFlag for whether to generate the output file. The default is 0.\nOptions are:\nEQ.0: No output file is generated.\nEQ.1: The output file is generated.\nTrue when successful, False when failed.\nCreate a permanent magnet.\nID of the magnet.\nPart ID.\nMagnet definition type. Options are:\nEQ.0: Magnet defined by two node set for the north and south poles\nEQ.1: Magnet defined by two segments set for the north and south poles\nEQ.3: Magnet defined by a global vector orientation\nEQ.4: Magnet defined by a global vector orientation given by two node IDs\nID of the magnet’s north face for mtype = 0 and mtype = 1.\nID of the magnet’s south face for mtype = 0 and mtype = 1.\nCoercive force.\nTrue when successful, False when failed.\nDefine the parameters for the behavior of a material’s permeability.\nEM EOS ID.\nDefine the type of EOS. Options are:\nEQ.1: Permeability defined by a B function of the H curve\nEQ.2: Permeability defined by an H function of the B curve\nLoad curve ID.\nTrue when successful, False when failed.\nSave keyword files.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nEnables the EM solver and sets its options.\nElectromagnetism solver. The default is EDDY_CURRENT. Options are:\nEQ.1: Eddy current solver\nEQ.2: Induced heating solver\nEQ.3: Resistive heating solver\nEQ.11: Electrophysiology monodomain\nSet the EM time step and its evolution.\nSet the EM solver.\nSet the type of linear solver, pre-conditioner, and tolerance for the EM BEM solver.\nSet some parameters for the EM FEM solver.\nSet the type of BEM matrices and the way that they are assembled.\nCreate an EM analysis.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines an electrical circuit.\nCircuit type. Options are:\nEQ.1: Imposed current vs time defined by a load curve\nEQ.2: Imposed voltage vs time defined by a load curve\nLoad curve for when the circtyp parameter is set to 1,\n2, 21 or 22.\nDefine the segment set for the current.\nSegment set for the current.\nSegment set for input voltage or input current\nfor CIRCTYP.EQ.2/3/12/22 and CIRCTYP.EQ 1/11/21 respectively.\nSegment set for the output voltage or output current for\nCIRCTYP = 2/3/12/22 and CIRCTYP = 1/11/21 respectively.\nCreate a circuit.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDetects contact between conductors.\nIf no contact parts are defined, this method detects contact between\nall active parts associated with a conducting material.\nCreate an EM contact.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines an isopotential.\nThis method constrain nodes so that they have the same scalar potential value.\nSegment set or node set.\nCreate an isopotential.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nMeasures the total current flowing through a given section of the conductor.\nSegment set.\nCreate a Rogowsky coil.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefine parameters for a Randles Cell.\ndefine the distributed Randles circuit parameters for a Randles cell when using the batmac model.\nDefine conditions to turn on a Randles short (replace one or several Randles circuits by resistances),\nand to define the value of the short resistance.\nDefine the local resistance function of local parameters for the local Randles circuit.\nAdd an extra heat source term to the Randles circuit nodes in order to account for thermal runaway\nsituations.\nDefine the local heat source function of local parameters for the local Randles circuit.\nSet parameter for Randles Cell.\nModule Contents\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.DynaBase\npython:int\noptional\n0\npython:int\noptional\nemsol = 2\n100\npython:int\noptional\nemsol = 2\n0\npython:int\noptional\n5000\npython:int\noptional\n5000\nTrue\nFalse\npython:int\npython:float\ntstype = 1\nTrue\nFalse\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\n0\npython:float\noptional\n0.3\npython:float\noptional\n0.3\npython:float\noptional\n0.3\npython:float\noptional\ndtype = 1\nTrue\nFalse\npython:int\npython:int\npython:int\noptional\n1\npython:int\n1\nTrue\nFalse\npython:int\npython:int\npython:float\nTrue\nFalse\npython:int\npython:int\npython:float\npython:int\npython:float\nTrue\nFalse\npython:int\noptional\n0\npython:int\n0\npython:float\noptional\n1e-6\npython:float\noptional\n1e-4\npython:int\nTrue\nFalse\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\n0\npython:int\noptional\n0\nTrue\nFalse\nIsopotential_ConnType\nSHORT_CIRCUIT\nIsopotential\nIsopotential\npython:float\noptional\n0\npython:int\npython:int\noptional\n0\nTrue\nFalse\npython:int\npython:int\npython:int\noptional\npython:int\nmtype = 0\nmtype = 1\npython:int\nmtype = 0\nmtype = 1\npython:int\nTrue\nFalse\npython:int\npython:int\npython:int\nTrue\nFalse\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\npython:int\nEDDY_CURRENT\nansys.dyna.core.pre.dynabase.Enum\npython:int\nCurve\ncirctyp\n1\n2\n21\n22\nSegmentSet\nSegmentSet\nSegmentSet\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nSet\nansys.dyna.core.pre.dynabase.BaseObj\nSet\nansys.dyna.core.pre.dynabase.Enum\nFunction\nFunction"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > Isopotential_ConnType",
        "section": "Module Contents > Isopotential_ConnType",
        "text": "class ansys.dyna.core.pre.dynaem.Isopotential_ConnType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSHORT_CIRCUIT = 1\n\n\n\n\n\nRESISTANCE = 2\n\n\n\n\n\nVOLTAGE_SOURCE = 3\n\n\n\n\n\nCURRENT_SOURCE = 4\n\n\n\n\n\nRLC_CIRCUIT = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType.SHORT_CIRCUIT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > SHORT_CIRCUIT",
        "section": "Module Contents > SHORT_CIRCUIT",
        "text": "SHORT_CIRCUIT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType.RESISTANCE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RESISTANCE",
        "section": "Module Contents > RESISTANCE",
        "text": "RESISTANCE = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType.VOLTAGE_SOURCE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > VOLTAGE_SOURCE",
        "section": "Module Contents > VOLTAGE_SOURCE",
        "text": "VOLTAGE_SOURCE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType.CURRENT_SOURCE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > CURRENT_SOURCE",
        "section": "Module Contents > CURRENT_SOURCE",
        "text": "CURRENT_SOURCE = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential_ConnType.RLC_CIRCUIT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RLC_CIRCUIT",
        "section": "Module Contents > RLC_CIRCUIT",
        "text": "RLC_CIRCUIT = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > DynaEM",
        "section": "Module Contents > DynaEM",
        "text": "class ansys.dyna.core.pre.dynaem.DynaEM\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating keywords related to EM.\n\n!! processed by numpydoc !!\n\n\n\nanalysis\n\n\n\n\n\ncreate_em_control(emsol=0, numls=100, macrodt=0, ncylfem=5000, ncylbem=5000)\n\nEnable the EM solver and set its options.\n\nParameters\n\nemsol\n\npython:int, optional\n\nEM solver. The default is 0. Options are:\n\nEQ.-1: Turn off the EM solver after reading the EM keywords.\n\nEQ.1: Eddy current solver.\n\nEQ.2: Induced heating solver.\n\nEQ.3: Resistive heating solver.\n\nEQ.11: Electrophysiology monodomain.\n\nEQ.12: Electrophysiology bidomain.\n\nEQ.13: Electrophysiology monodomain coupled with bidomain.\n\nnumls\n\npython:int, optional\n\nNumber of local EM steps in a whole period for when emsol = 2.\nThe default is 100.\n\nmacrodt\n\npython:int, optional\n\nMacro time step for when emsol = 2. The default is 0.\n\nncylfem\n\npython:int, optional\n\nNumber of electromagnetism cycles between the recalculation of FEM matrices.\nThe default is 5000.\n\nncylbem\n\npython:int, optional\n\nNumber of electromagnetism cycles between the recalculation of BEM matrices.\nThe default is 5000.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_timestep(tstype, dtconst)\n\nControl the EM time step and its evolution.\n\nParameters\n\ntstype\n\npython:int\n\nTime step type. Options are:\n\nEQ.1: Constant time step given in DTCONST\n\nEQ.2: Time step as a function of time given by a load curve specified in LCID\n\nEQ.3: Automatic time step computation, depending on the solver type\n\nThis time step is then multiplied by FACTOR.\n\ndtconst\n\npython:float\n\nConstant value for the time step for when tstype = 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_contact(contid=0, dtype=0, psidm=0, psids=0, eps1=0.3, eps2=0.3, eps3=0.3, d0=0)\n\nCreate an optional card for defining options on electromagnetic contacts between two sets of parts.\n\nParameters\n\ncontid\n\npython:int, optional\n\nElectromagnetic contact ID. The default is 0.\n\ndtype\n\npython:int, optional\n\nDetection type.  The default is 0. Options are:\n\nEQ.0: Contact type 0\n\nEQ.1: Contact type 1\n\npsidm\n\npython:int, optional\n\nMaster part set ID. The default is 0.\n\npsids\n\npython:int\n\nSlave part set ID.  The default is 0.\n\neps1\n\npython:float, optional\n\nFirst contact coefficient for contact detection conditions.\nThe default is 0.3.\n\neps2\n\npython:float, optional\n\nSecond contact coefficient for contact detection conditions.\nThe default is 0.3.\n\neps3\n\npython:float, optional\n\nThird contact coefficient for contact detection conditions.\nThe default is 0.3.\n\nd0\n\npython:float, optional\n\nContact condition 3 when dtype = 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_rogowsky_coil_to_output_current(segmentset=SegmentSet([[]]), settype=1, curtyp=1)\n\nDefine Rogowsky coils to measure a global current versus time through a segment set or a node set.\n\nParameters\n\nrogid\n\npython:int\n\nRogowsky coil ID.\n\nsetid\n\npython:int\n\nSegment or node set ID.\n\nsettype\n\npython:int, optional\n\nType of set. The default is 1. Options are:\n\nEQ.1: Segment set\n\nEQ.2: Node set\n\ncurtyp\n\npython:int\n\nType of current measured. The default is 1. Options are:\n\nEQ.1: Volume current\n\nEQ.2: Surface current (not available yet}\n\nEQ.3: Magnetic field flow (B field times area)\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_mat001(mid, mtype, sigma)\n\nCreate an electromagnetic material type and set properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmid\n\npython:int\n\nMaterial ID.\n\nmtype\n\npython:int\n\nElectromagnetism type of the material. Options are:\n\nEQ.0: Air or vacuum\n\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\n\nEQ.2: Conductor carrying a source\n\nEQ.3: Fluid conductor\n\nEQ.4: Conductor not connected to any current or voltage source, where the eddy current problem is solved\n\nsigma\n\npython:float\n\nInitial electrical conductivity of the material.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_mat002(mid, mtype, sigma, eosid, murel)\n\nCreate an electromagnetic material type and set properties\nwhose permeability is different than the free space permeability.\n\nParameters\n\nmid\n\npython:int\n\nMaterial ID.\n\nmtype\n\npython:int\n\nElectromagnetism type of the material. Options are:\n\nEQ.0: Air or vacuum\n\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\n\nEQ.2: Conductor carrying a source\n\nEQ.4: Conductor not connected to any current or voltage source, where the wddy current problem is solved\n\nsigma\n\npython:float\n\nInitial electrical conductivity of the material.\n\neosid\n\npython:int\n\nID of the EOS to use for the electrical conductivity.\n\nmurel\n\npython:float\n\nRelative permeability, which is the ratio of the permeability of a specific\nmedium to the permeability of the free space.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_solver_fembem_monolithic(mtype=0, stype=0, abstol=1e-06, reltol=0.0001, maxit=500)\n\nTurn on the monolithic FEM-BEM solver.\n\nParameters\n\nmtype\n\npython:int, optional\n\nMonolithic solver type. The default is 0. The only option is EQ.0: Direct symmetric solver.\n\nstype\n\npython:int\n\nSolver type. The default is 0. Options are:\n\nEQ.0: MINRES iterative solver\n\nEQ.1: GMRES iterative solver\n\nabstol\n\npython:float, optional\n\nAbsolute tolerance. The default is 1e-6.\n\nreltol\n\npython:float, optional\n\nRelative tolerance. The default is 1e-4.\n\nmaxit\n\npython:int, optional.\n\nMaximum number of iterations. The default is 500.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_output(mats=0, matf=0, sols=0, solf=0)\n\nDefine the level of EM-related output on the screen and in the message file.\n\nParameters\n\nmats\n\npython:int, optional\n\nLevel of matrix assembly output to show on the screen. The default is 0.\nOptions are:\n\nEQ.0: No output\n\nEQ.1: Basic assembly steps\n\nEQ.2: Basic assembly steps + percentage completed + final statistics\n\nEQ.3: Basic assembly steps + percentage completed + statistics at each percentage of completion\n\nmatf\n\npython:int, optional\n\nLevel of matrix assembly output to write to the message file. The default\nis 0. Options are:\n\nEQ.0: No output\n\nEQ.1: Basic assembly steps\n\nEQ.2: Basic assembly steps + percentage completed + final statistics\n\nEQ.3: Vasic assembly steps + percentage completed + statistics at each percentage of completion\n\nsols\n\npython:int\n\nLevel of solver output to show on the screen. The default is 0. Options are:\n\nEQ.0: No output\n\nEQ.1: Global information at each FEM iteration\n\nEQ.2: Detailed information at each FEM iteration\n\nsolf\n\npython:int, optional\n\nLevel of solver output to write to the message file. The default is 0.\nOptions are:\n\nEQ.0: No output\n\nEQ.1: Global information at each FEM iteration\n\n0 EQ.2: Detailed information at each FEM iteration\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nconnect_isopotential(contype=Isopotential_ConnType.SHORT_CIRCUIT, isopotential1=None, isopotential2=None, value=0, func=None, curve=None, inductance=0, capacity=0, initial_voltage=0)\n\nDefine a connection between two isopotentials or between an isopotential and the ground.\n\nParameters\n\ncontype\n\nIsopotential_ConnType\n\nIsopotential connection type. The default is SHORT_CIRCUIT.\n\nisopotential1\n\nIsopotential\n\nFirst isopotential to connect.\n\nisopotential2\n\nIsopotential\n\nSecond isopotential to connect.\n\nvalue\n\npython:float, optional\n\nValue of the resistance, voltage, or current depending on the isopotential\nconnection type. The default is 0.\n\nfunc\n\n\n\ncurve\n\n\n\ninductance\n\n\n\ncapacity\n\n\n\ninitial voltage\n\n\n\nReturns\n\npython:int\n\nConnection ID.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_database_globalenergy(outlv=0)\n\nEnable the output of global EM.\n\nParameters\n\noutlv\n\npython:int, optional\n\nFlag for whether to generate the output file. The default is 0.\nOptions are:\n\nEQ.0: No output file is generated.\n\nEQ.1: The output file is generated.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_Permanent_magnet(id, partid, mtype, north, sourth, hc)\n\nCreate a permanent magnet.\n\nParameters\n\nid\n\npython:int\n\nID of the magnet.\n\npartid\n\npython:int\n\nPart ID.\n\nmtype\n\npython:int, optional\n\nMagnet definition type. Options are:\n\nEQ.0: Magnet defined by two node set for the north and south poles\n\nEQ.1: Magnet defined by two segments set for the north and south poles\n\nEQ.3: Magnet defined by a global vector orientation\n\nEQ.4: Magnet defined by a global vector orientation given by two node IDs\n\nnorth\n\npython:int\n\nID of the magnet’s north face for mtype = 0 and mtype = 1.\n\nsourth\n\npython:int\n\nID of the magnet’s south face for mtype = 0 and mtype = 1.\n\nhc\n\npython:int\n\nCoercive force.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_em_eos_permeability(eosid, eostype, lcid)\n\nDefine the parameters for the behavior of a material’s permeability.\n\nParameters\n\neosid\n\npython:int\n\nEM EOS ID.\n\neostype\n\npython:int\n\nDefine the type of EOS. Options are:\n\nEQ.1: Permeability defined by a B function of the H curve\n\nEQ.2: Permeability defined by an H function of the B curve\n\nlcid\n\npython:int\n\nLoad curve ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.analysis",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > analysis",
        "section": "Module Contents > analysis",
        "text": "analysis\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_control",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_control",
        "section": "Module Contents > create_em_control",
        "text": "create_em_control(emsol=0, numls=100, macrodt=0, ncylfem=5000, ncylbem=5000)\n\nEnable the EM solver and set its options.\n\nParameters\n\nemsol\n\npython:int, optional\n\nEM solver. The default is 0. Options are:\n\nEQ.-1: Turn off the EM solver after reading the EM keywords.\n\nEQ.1: Eddy current solver.\n\nEQ.2: Induced heating solver.\n\nEQ.3: Resistive heating solver.\n\nEQ.11: Electrophysiology monodomain.\n\nEQ.12: Electrophysiology bidomain.\n\nEQ.13: Electrophysiology monodomain coupled with bidomain.\n\nnumls\n\npython:int, optional\n\nNumber of local EM steps in a whole period for when emsol = 2.\nThe default is 100.\n\nmacrodt\n\npython:int, optional\n\nMacro time step for when emsol = 2. The default is 0.\n\nncylfem\n\npython:int, optional\n\nNumber of electromagnetism cycles between the recalculation of FEM matrices.\nThe default is 5000.\n\nncylbem\n\npython:int, optional\n\nNumber of electromagnetism cycles between the recalculation of BEM matrices.\nThe default is 5000.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_timestep",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_timestep",
        "section": "Module Contents > create_em_timestep",
        "text": "create_em_timestep(tstype, dtconst)\n\nControl the EM time step and its evolution.\n\nParameters\n\ntstype\n\npython:int\n\nTime step type. Options are:\n\nEQ.1: Constant time step given in DTCONST\n\nEQ.2: Time step as a function of time given by a load curve specified in LCID\n\nEQ.3: Automatic time step computation, depending on the solver type\n\nThis time step is then multiplied by FACTOR.\n\ndtconst\n\npython:float\n\nConstant value for the time step for when tstype = 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_contact",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_contact",
        "section": "Module Contents > create_em_contact",
        "text": "create_em_contact(contid=0, dtype=0, psidm=0, psids=0, eps1=0.3, eps2=0.3, eps3=0.3, d0=0)\n\nCreate an optional card for defining options on electromagnetic contacts between two sets of parts.\n\nParameters\n\ncontid\n\npython:int, optional\n\nElectromagnetic contact ID. The default is 0.\n\ndtype\n\npython:int, optional\n\nDetection type.  The default is 0. Options are:\n\nEQ.0: Contact type 0\n\nEQ.1: Contact type 1\n\npsidm\n\npython:int, optional\n\nMaster part set ID. The default is 0.\n\npsids\n\npython:int\n\nSlave part set ID.  The default is 0.\n\neps1\n\npython:float, optional\n\nFirst contact coefficient for contact detection conditions.\nThe default is 0.3.\n\neps2\n\npython:float, optional\n\nSecond contact coefficient for contact detection conditions.\nThe default is 0.3.\n\neps3\n\npython:float, optional\n\nThird contact coefficient for contact detection conditions.\nThe default is 0.3.\n\nd0\n\npython:float, optional\n\nContact condition 3 when dtype = 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.set_rogowsky_coil_to_output_current",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_rogowsky_coil_to_output_current",
        "section": "Module Contents > set_rogowsky_coil_to_output_current",
        "text": "set_rogowsky_coil_to_output_current(segmentset=SegmentSet([[]]), settype=1, curtyp=1)\n\nDefine Rogowsky coils to measure a global current versus time through a segment set or a node set.\n\nParameters\n\nrogid\n\npython:int\n\nRogowsky coil ID.\n\nsetid\n\npython:int\n\nSegment or node set ID.\n\nsettype\n\npython:int, optional\n\nType of set. The default is 1. Options are:\n\nEQ.1: Segment set\n\nEQ.2: Node set\n\ncurtyp\n\npython:int\n\nType of current measured. The default is 1. Options are:\n\nEQ.1: Volume current\n\nEQ.2: Surface current (not available yet}\n\nEQ.3: Magnetic field flow (B field times area)\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_mat001",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_mat001",
        "section": "Module Contents > create_em_mat001",
        "text": "create_em_mat001(mid, mtype, sigma)\n\nCreate an electromagnetic material type and set properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmid\n\npython:int\n\nMaterial ID.\n\nmtype\n\npython:int\n\nElectromagnetism type of the material. Options are:\n\nEQ.0: Air or vacuum\n\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\n\nEQ.2: Conductor carrying a source\n\nEQ.3: Fluid conductor\n\nEQ.4: Conductor not connected to any current or voltage source, where the eddy current problem is solved\n\nsigma\n\npython:float\n\nInitial electrical conductivity of the material.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_mat002",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_mat002",
        "section": "Module Contents > create_em_mat002",
        "text": "create_em_mat002(mid, mtype, sigma, eosid, murel)\n\nCreate an electromagnetic material type and set properties\nwhose permeability is different than the free space permeability.\n\nParameters\n\nmid\n\npython:int\n\nMaterial ID.\n\nmtype\n\npython:int\n\nElectromagnetism type of the material. Options are:\n\nEQ.0: Air or vacuum\n\nEQ.1: Insulator material (These materials have the same electromagnetism behavior as EQ.0.)\n\nEQ.2: Conductor carrying a source\n\nEQ.4: Conductor not connected to any current or voltage source, where the wddy current problem is solved\n\nsigma\n\npython:float\n\nInitial electrical conductivity of the material.\n\neosid\n\npython:int\n\nID of the EOS to use for the electrical conductivity.\n\nmurel\n\npython:float\n\nRelative permeability, which is the ratio of the permeability of a specific\nmedium to the permeability of the free space.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_solver_fembem_monolithic",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_solver_fembem_monolithic",
        "section": "Module Contents > create_em_solver_fembem_monolithic",
        "text": "create_em_solver_fembem_monolithic(mtype=0, stype=0, abstol=1e-06, reltol=0.0001, maxit=500)\n\nTurn on the monolithic FEM-BEM solver.\n\nParameters\n\nmtype\n\npython:int, optional\n\nMonolithic solver type. The default is 0. The only option is EQ.0: Direct symmetric solver.\n\nstype\n\npython:int\n\nSolver type. The default is 0. Options are:\n\nEQ.0: MINRES iterative solver\n\nEQ.1: GMRES iterative solver\n\nabstol\n\npython:float, optional\n\nAbsolute tolerance. The default is 1e-6.\n\nreltol\n\npython:float, optional\n\nRelative tolerance. The default is 1e-4.\n\nmaxit\n\npython:int, optional.\n\nMaximum number of iterations. The default is 500.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_output",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_output",
        "section": "Module Contents > create_em_output",
        "text": "create_em_output(mats=0, matf=0, sols=0, solf=0)\n\nDefine the level of EM-related output on the screen and in the message file.\n\nParameters\n\nmats\n\npython:int, optional\n\nLevel of matrix assembly output to show on the screen. The default is 0.\nOptions are:\n\nEQ.0: No output\n\nEQ.1: Basic assembly steps\n\nEQ.2: Basic assembly steps + percentage completed + final statistics\n\nEQ.3: Basic assembly steps + percentage completed + statistics at each percentage of completion\n\nmatf\n\npython:int, optional\n\nLevel of matrix assembly output to write to the message file. The default\nis 0. Options are:\n\nEQ.0: No output\n\nEQ.1: Basic assembly steps\n\nEQ.2: Basic assembly steps + percentage completed + final statistics\n\nEQ.3: Vasic assembly steps + percentage completed + statistics at each percentage of completion\n\nsols\n\npython:int\n\nLevel of solver output to show on the screen. The default is 0. Options are:\n\nEQ.0: No output\n\nEQ.1: Global information at each FEM iteration\n\nEQ.2: Detailed information at each FEM iteration\n\nsolf\n\npython:int, optional\n\nLevel of solver output to write to the message file. The default is 0.\nOptions are:\n\nEQ.0: No output\n\nEQ.1: Global information at each FEM iteration\n\n0 EQ.2: Detailed information at each FEM iteration\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.connect_isopotential",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > connect_isopotential",
        "section": "Module Contents > connect_isopotential",
        "text": "connect_isopotential(contype=Isopotential_ConnType.SHORT_CIRCUIT, isopotential1=None, isopotential2=None, value=0, func=None, curve=None, inductance=0, capacity=0, initial_voltage=0)\n\nDefine a connection between two isopotentials or between an isopotential and the ground.\n\nParameters\n\ncontype\n\nIsopotential_ConnType\n\nIsopotential connection type. The default is SHORT_CIRCUIT.\n\nisopotential1\n\nIsopotential\n\nFirst isopotential to connect.\n\nisopotential2\n\nIsopotential\n\nSecond isopotential to connect.\n\nvalue\n\npython:float, optional\n\nValue of the resistance, voltage, or current depending on the isopotential\nconnection type. The default is 0.\n\nfunc\n\n\n\ncurve\n\n\n\ninductance\n\n\n\ncapacity\n\n\n\ninitial voltage\n\n\n\nReturns\n\npython:int\n\nConnection ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_database_globalenergy",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_database_globalenergy",
        "section": "Module Contents > create_em_database_globalenergy",
        "text": "create_em_database_globalenergy(outlv=0)\n\nEnable the output of global EM.\n\nParameters\n\noutlv\n\npython:int, optional\n\nFlag for whether to generate the output file. The default is 0.\nOptions are:\n\nEQ.0: No output file is generated.\n\nEQ.1: The output file is generated.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_Permanent_magnet",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_Permanent_magnet",
        "section": "Module Contents > create_Permanent_magnet",
        "text": "create_Permanent_magnet(id, partid, mtype, north, sourth, hc)\n\nCreate a permanent magnet.\n\nParameters\n\nid\n\npython:int\n\nID of the magnet.\n\npartid\n\npython:int\n\nPart ID.\n\nmtype\n\npython:int, optional\n\nMagnet definition type. Options are:\n\nEQ.0: Magnet defined by two node set for the north and south poles\n\nEQ.1: Magnet defined by two segments set for the north and south poles\n\nEQ.3: Magnet defined by a global vector orientation\n\nEQ.4: Magnet defined by a global vector orientation given by two node IDs\n\nnorth\n\npython:int\n\nID of the magnet’s north face for mtype = 0 and mtype = 1.\n\nsourth\n\npython:int\n\nID of the magnet’s south face for mtype = 0 and mtype = 1.\n\nhc\n\npython:int\n\nCoercive force.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.create_em_eos_permeability",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create_em_eos_permeability",
        "section": "Module Contents > create_em_eos_permeability",
        "text": "create_em_eos_permeability(eosid, eostype, lcid)\n\nDefine the parameters for the behavior of a material’s permeability.\n\nParameters\n\neosid\n\npython:int\n\nEM EOS ID.\n\neostype\n\npython:int\n\nDefine the type of EOS. Options are:\n\nEQ.1: Permeability defined by a B function of the H curve\n\nEQ.2: Permeability defined by an H function of the B curve\n\nlcid\n\npython:int\n\nLoad curve ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.DynaEM.save_file",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMType",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMType",
        "section": "Module Contents > EMType",
        "text": "class ansys.dyna.core.pre.dynaem.EMType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nEDDY_CURRENT = 1\n\n\n\n\n\nINDUCTIVE_HEATING = 2\n\n\n\n\n\nRESISTIVE_HEATING = 3\n\n\n\n\n\nELECTROPHYSIOLOGY = 11\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMType.EDDY_CURRENT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EDDY_CURRENT",
        "section": "Module Contents > EDDY_CURRENT",
        "text": "EDDY_CURRENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMType.INDUCTIVE_HEATING",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > INDUCTIVE_HEATING",
        "section": "Module Contents > INDUCTIVE_HEATING",
        "text": "INDUCTIVE_HEATING = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMType.RESISTIVE_HEATING",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RESISTIVE_HEATING",
        "section": "Module Contents > RESISTIVE_HEATING",
        "text": "RESISTIVE_HEATING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMType.ELECTROPHYSIOLOGY",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > ELECTROPHYSIOLOGY",
        "section": "Module Contents > ELECTROPHYSIOLOGY",
        "text": "ELECTROPHYSIOLOGY = 11\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMDimension",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMDimension",
        "section": "Module Contents > EMDimension",
        "text": "class ansys.dyna.core.pre.dynaem.EMDimension(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nSOLVER_3D = 0\n\n\n\n\n\nPLANAR_2D = 1\n\n\n\n\n\nAXISYMMETRIC_2D = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMDimension.SOLVER_3D",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > SOLVER_3D",
        "section": "Module Contents > SOLVER_3D",
        "text": "SOLVER_3D = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMDimension.PLANAR_2D",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > PLANAR_2D",
        "section": "Module Contents > PLANAR_2D",
        "text": "PLANAR_2D = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMDimension.AXISYMMETRIC_2D",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > AXISYMMETRIC_2D",
        "section": "Module Contents > AXISYMMETRIC_2D",
        "text": "AXISYMMETRIC_2D = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.BEMSOLVER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > BEMSOLVER",
        "section": "Module Contents > BEMSOLVER",
        "text": "class ansys.dyna.core.pre.dynaem.BEMSOLVER(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDIRECT_SOLVER = 1\n\n\n\n\n\nPCG = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.BEMSOLVER.DIRECT_SOLVER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > DIRECT_SOLVER",
        "section": "Module Contents > DIRECT_SOLVER",
        "text": "DIRECT_SOLVER = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.BEMSOLVER.PCG",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > PCG",
        "section": "Module Contents > PCG",
        "text": "PCG = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.FEMSOLVER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > FEMSOLVER",
        "section": "Module Contents > FEMSOLVER",
        "text": "class ansys.dyna.core.pre.dynaem.FEMSOLVER(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDIRECT_SOLVER = 1\n\n\n\n\n\nPCG = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.FEMSOLVER.DIRECT_SOLVER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > DIRECT_SOLVER",
        "section": "Module Contents > DIRECT_SOLVER",
        "text": "DIRECT_SOLVER = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.FEMSOLVER.PCG",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > PCG",
        "section": "Module Contents > PCG",
        "text": "PCG = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMAnalysis",
        "section": "Module Contents > EMAnalysis",
        "text": "class ansys.dyna.core.pre.dynaem.EMAnalysis(type=EMType.EDDY_CURRENT)\n\nEnables the EM solver and sets its options.\n\nParameters\n\ntype\n\npython:int\n\nElectromagnetism solver. The default is EDDY_CURRENT. Options are:\n\nEQ.1: Eddy current solver\n\nEQ.2: Induced heating solver\n\nEQ.3: Resistive heating solver\n\nEQ.11: Electrophysiology monodomain\n\n!! processed by numpydoc !!\n\n\n\np_matrix_tol = 1e-06\n\n\n\n\n\nq_matrix_tol = 1e-06\n\n\n\n\n\nw_matrix_tol = 1e-06\n\n\n\n\n\ndefined = False\n\n\n\n\n\nstub\n\n\n\n\n\ntype = 1\n\n\n\n\n\ndimtype = 0\n\n\n\n\n\ndefined_bem = False\n\n\n\n\n\ndefined_fem = False\n\n\n\n\n\nset_timestep(timestep)\n\nSet the EM time step and its evolution.\n\n!! processed by numpydoc !!\n\n\n\nset_em_solver(type=EMType.EDDY_CURRENT, dimtype=EMDimension.SOLVER_3D)\n\nSet the EM solver.\n\n!! processed by numpydoc !!\n\n\n\nset_solver_bem(solver=BEMSOLVER.PCG, relative_tol=1e-06, max_iteration=1000)\n\nSet the type of linear solver, pre-conditioner, and tolerance for the EM BEM solver.\n\n!! processed by numpydoc !!\n\n\n\nset_solver_fem(solver=FEMSOLVER.DIRECT_SOLVER, relative_tol=1e-06, max_iteration=1000)\n\nSet some parameters for the EM FEM solver.\n\n!! processed by numpydoc !!\n\n\n\nset_bem_matrix_tol(p_matrix_tol=1e-06, q_matrix_tol=1e-06, w_matrix_tol=1e-06)\n\nSet the type of BEM matrices and the way that they are assembled.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate an EM analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.p_matrix_tol",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > p_matrix_tol",
        "section": "Module Contents > p_matrix_tol",
        "text": "p_matrix_tol = 1e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.q_matrix_tol",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > q_matrix_tol",
        "section": "Module Contents > q_matrix_tol",
        "text": "q_matrix_tol = 1e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.w_matrix_tol",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > w_matrix_tol",
        "section": "Module Contents > w_matrix_tol",
        "text": "w_matrix_tol = 1e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.defined",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > defined",
        "section": "Module Contents > defined",
        "text": "defined = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.type",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.dimtype",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > dimtype",
        "section": "Module Contents > dimtype",
        "text": "dimtype = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.defined_bem",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > defined_bem",
        "section": "Module Contents > defined_bem",
        "text": "defined_bem = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.defined_fem",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > defined_fem",
        "section": "Module Contents > defined_fem",
        "text": "defined_fem = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.set_timestep",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_timestep",
        "section": "Module Contents > set_timestep",
        "text": "set_timestep(timestep)\n\nSet the EM time step and its evolution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.set_em_solver",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_em_solver",
        "section": "Module Contents > set_em_solver",
        "text": "set_em_solver(type=EMType.EDDY_CURRENT, dimtype=EMDimension.SOLVER_3D)\n\nSet the EM solver.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.set_solver_bem",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_solver_bem",
        "section": "Module Contents > set_solver_bem",
        "text": "set_solver_bem(solver=BEMSOLVER.PCG, relative_tol=1e-06, max_iteration=1000)\n\nSet the type of linear solver, pre-conditioner, and tolerance for the EM BEM solver.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.set_solver_fem",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_solver_fem",
        "section": "Module Contents > set_solver_fem",
        "text": "set_solver_fem(solver=FEMSOLVER.DIRECT_SOLVER, relative_tol=1e-06, max_iteration=1000)\n\nSet some parameters for the EM FEM solver.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.set_bem_matrix_tol",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_bem_matrix_tol",
        "section": "Module Contents > set_bem_matrix_tol",
        "text": "set_bem_matrix_tol(p_matrix_tol=1e-06, q_matrix_tol=1e-06, w_matrix_tol=1e-06)\n\nSet the type of BEM matrices and the way that they are assembled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMAnalysis.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an EM analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.CircuitType",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > CircuitType",
        "section": "Module Contents > CircuitType",
        "text": "class ansys.dyna.core.pre.dynaem.CircuitType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nIMPOSED_CURRENT_VS_TIME = 1\n\n\n\n\n\nIMPOSED_VOLTAGE_VS_TIME = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.CircuitType.IMPOSED_CURRENT_VS_TIME",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > IMPOSED_CURRENT_VS_TIME",
        "section": "Module Contents > IMPOSED_CURRENT_VS_TIME",
        "text": "IMPOSED_CURRENT_VS_TIME = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.CircuitType.IMPOSED_VOLTAGE_VS_TIME",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > IMPOSED_VOLTAGE_VS_TIME",
        "section": "Module Contents > IMPOSED_VOLTAGE_VS_TIME",
        "text": "IMPOSED_VOLTAGE_VS_TIME = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > Circuit",
        "section": "Module Contents > Circuit",
        "text": "class ansys.dyna.core.pre.dynaem.Circuit(loadcurve, circuit_type=CircuitType.IMPOSED_CURRENT_VS_TIME)\n\nDefines an electrical circuit.\n\nParameters\n\ncirctyp\n\npython:int\n\nCircuit type. Options are:\n\nEQ.1: Imposed current vs time defined by a load curve\n\nEQ.2: Imposed voltage vs time defined by a load curve\n\nloadcurve\n\nCurve\n\nLoad curve for when the circtyp parameter is set to 1,\n2, 21 or 22.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncircuit_type = 1\n\n\n\n\n\nlcid\n\n\n\n\n\nset_current(current, current_inlet, current_outlet)\n\nDefine the segment set for the current.\n\nParameters\n\ncurrent\n\nSegmentSet\n\nSegment set for the current.\n\ncurrent_inlet\n\nSegmentSet\n\nSegment set for input voltage or input current\nfor CIRCTYP.EQ.2/3/12/22 and CIRCTYP.EQ 1/11/21 respectively.\n\ncurrent_outlet\n\nSegmentSet\n\nSegment set for the output voltage or output current for\nCIRCTYP = 2/3/12/22 and CIRCTYP = 1/11/21 respectively.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a circuit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit.circuit_type",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > circuit_type",
        "section": "Module Contents > circuit_type",
        "text": "circuit_type = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit.lcid",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > lcid",
        "section": "Module Contents > lcid",
        "text": "lcid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit.set_current",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_current",
        "section": "Module Contents > set_current",
        "text": "set_current(current, current_inlet, current_outlet)\n\nDefine the segment set for the current.\n\nParameters\n\ncurrent\n\nSegmentSet\n\nSegment set for the current.\n\ncurrent_inlet\n\nSegmentSet\n\nSegment set for input voltage or input current\nfor CIRCTYP.EQ.2/3/12/22 and CIRCTYP.EQ 1/11/21 respectively.\n\ncurrent_outlet\n\nSegmentSet\n\nSegment set for the output voltage or output current for\nCIRCTYP = 2/3/12/22 and CIRCTYP = 1/11/21 respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Circuit.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a circuit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContactType",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMContactType",
        "section": "Module Contents > EMContactType",
        "text": "class ansys.dyna.core.pre.dynaem.EMContactType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nNODE_TO_NODE_BASED_ON_CONSTRAINTS = -1\n\n\n\n\n\nNODE_TO_NODE_PENALTY_BASED_CONTACT = 0\n\n\n\n\n\nDISCRETE_MORTAR_PENALTY_CONTACT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContactType.NODE_TO_NODE_BASED_ON_CONSTRAINTS",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > NODE_TO_NODE_BASED_ON_CONSTRAINTS",
        "section": "Module Contents > NODE_TO_NODE_BASED_ON_CONSTRAINTS",
        "text": "NODE_TO_NODE_BASED_ON_CONSTRAINTS = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContactType.NODE_TO_NODE_PENALTY_BASED_CONTACT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > NODE_TO_NODE_PENALTY_BASED_CONTACT",
        "section": "Module Contents > NODE_TO_NODE_PENALTY_BASED_CONTACT",
        "text": "NODE_TO_NODE_PENALTY_BASED_CONTACT = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContactType.DISCRETE_MORTAR_PENALTY_CONTACT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > DISCRETE_MORTAR_PENALTY_CONTACT",
        "section": "Module Contents > DISCRETE_MORTAR_PENALTY_CONTACT",
        "text": "DISCRETE_MORTAR_PENALTY_CONTACT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContact",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMContact",
        "section": "Module Contents > EMContact",
        "text": "class ansys.dyna.core.pre.dynaem.EMContact(contact_type=EMContactType.NODE_TO_NODE_PENALTY_BASED_CONTACT)\n\nDetects contact between conductors.\n\nIf no contact parts are defined, this method detects contact between\nall active parts associated with a conducting material.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncontacttype = 0\n\n\n\n\n\ncreate()\n\nCreate an EM contact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContact.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContact.contacttype",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > contacttype",
        "section": "Module Contents > contacttype",
        "text": "contacttype = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMContact.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an EM contact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > EMRandlesLayer",
        "section": "Module Contents > EMRandlesLayer",
        "text": "class ansys.dyna.core.pre.dynaem.EMRandlesLayer(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDEFAULT = 0\n\n\n\n\n\nCURRENT_COLLECTOR_POSITIVE = 1\n\n\n\n\n\nPOSITIVE_ELECTRODE = 2\n\n\n\n\n\nSEPARATOR = 3\n\n\n\n\n\nNEGATIVE_ELECTRODE = 4\n\n\n\n\n\nCURRENT_COLLECTOR_NEGATIVE = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.DEFAULT",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > DEFAULT",
        "section": "Module Contents > DEFAULT",
        "text": "DEFAULT = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.CURRENT_COLLECTOR_POSITIVE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > CURRENT_COLLECTOR_POSITIVE",
        "section": "Module Contents > CURRENT_COLLECTOR_POSITIVE",
        "text": "CURRENT_COLLECTOR_POSITIVE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.POSITIVE_ELECTRODE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > POSITIVE_ELECTRODE",
        "section": "Module Contents > POSITIVE_ELECTRODE",
        "text": "POSITIVE_ELECTRODE = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.SEPARATOR",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > SEPARATOR",
        "section": "Module Contents > SEPARATOR",
        "text": "SEPARATOR = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.NEGATIVE_ELECTRODE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > NEGATIVE_ELECTRODE",
        "section": "Module Contents > NEGATIVE_ELECTRODE",
        "text": "NEGATIVE_ELECTRODE = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.EMRandlesLayer.CURRENT_COLLECTOR_NEGATIVE",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > CURRENT_COLLECTOR_NEGATIVE",
        "section": "Module Contents > CURRENT_COLLECTOR_NEGATIVE",
        "text": "CURRENT_COLLECTOR_NEGATIVE = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > Isopotential",
        "section": "Module Contents > Isopotential",
        "text": "class ansys.dyna.core.pre.dynaem.Isopotential(set=None, layer=EMRandlesLayer.DEFAULT)\n\nDefines an isopotential.\n\nThis method constrain nodes so that they have the same scalar potential value.\n\nParameters\n\nset\n\nSet\n\nSegment set or node set.\n\n!! processed by numpydoc !!\n\n\n\nisopotlist = []\n\n\n\n\n\nstub\n\n\n\n\n\nset = None\n\n\n\n\n\nid = 0\n\n\n\n\n\nrdltype = 0\n\n\n\n\n\ncreate()\n\nCreate an isopotential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.isopotlist",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > isopotlist",
        "section": "Module Contents > isopotlist",
        "text": "isopotlist = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.set",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set",
        "section": "Module Contents > set",
        "text": "set = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.id",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.rdltype",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > rdltype",
        "section": "Module Contents > rdltype",
        "text": "rdltype = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.Isopotential.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an isopotential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RogoCoil",
        "section": "Module Contents > RogoCoil",
        "text": "class ansys.dyna.core.pre.dynaem.RogoCoil(set=None)\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nMeasures the total current flowing through a given section of the conductor.\n\nParameters\n\nset\n\nSet\n\nSegment set.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nset = None\n\n\n\n\n\nid = 0\n\n\n\n\n\ntype = 'rogocoil'\n\n\n\n\n\ncreate()\n\nCreate a Rogowsky coil.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil.set",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set",
        "section": "Module Contents > set",
        "text": "set = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil.id",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil.type",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'rogocoil'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RogoCoil.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a Rogowsky coil.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RandlesCellType",
        "section": "Module Contents > RandlesCellType",
        "text": "class ansys.dyna.core.pre.dynaem.RandlesCellType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nUSER_DEFINED_EQUIVALENT_CIRCUIT_MODEL = -1\n\n\n\n\n\nRANDLES_CELL_0_ORDER = 0\n\n\n\n\n\nRANDLES_CELL_1_ORDER = 1\n\n\n\n\n\nRANDLES_CELL_2_ORDER = 2\n\n\n\n\n\nRANDLES_CELL_3_ORDER = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType.USER_DEFINED_EQUIVALENT_CIRCUIT_MODEL",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > USER_DEFINED_EQUIVALENT_CIRCUIT_MODEL",
        "section": "Module Contents > USER_DEFINED_EQUIVALENT_CIRCUIT_MODEL",
        "text": "USER_DEFINED_EQUIVALENT_CIRCUIT_MODEL = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType.RANDLES_CELL_0_ORDER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RANDLES_CELL_0_ORDER",
        "section": "Module Contents > RANDLES_CELL_0_ORDER",
        "text": "RANDLES_CELL_0_ORDER = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType.RANDLES_CELL_1_ORDER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RANDLES_CELL_1_ORDER",
        "section": "Module Contents > RANDLES_CELL_1_ORDER",
        "text": "RANDLES_CELL_1_ORDER = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType.RANDLES_CELL_2_ORDER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RANDLES_CELL_2_ORDER",
        "section": "Module Contents > RANDLES_CELL_2_ORDER",
        "text": "RANDLES_CELL_2_ORDER = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCellType.RANDLES_CELL_3_ORDER",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RANDLES_CELL_3_ORDER",
        "section": "Module Contents > RANDLES_CELL_3_ORDER",
        "text": "RANDLES_CELL_3_ORDER = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > RandlesCell",
        "section": "Module Contents > RandlesCell",
        "text": "class ansys.dyna.core.pre.dynaem.RandlesCell(set=None)\n\nDefine parameters for a Randles Cell.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ndefine_batmac = False\n\n\n\n\n\ndefine_randles_short = False\n\n\n\n\n\ndefine_extra_heat_source = False\n\n\n\n\n\nset_batmac_model(cell_type=RandlesCellType.RANDLES_CELL_1_ORDER, cell_parts=None, area=2, cell_capacity=0, soc_conversion_factor=0, charge_init_state=0, equilibrium_voltage=None, circuit_parameter=None, constant_temperature=0, temperature_from_thermal_solver=False, add_heating_to_thermal_solver=False)\n\ndefine the distributed Randles circuit parameters for a Randles cell when using the batmac model.\n\n!! processed by numpydoc !!\n\n\n\nset_randles_short(resistances_func=None)\n\nDefine conditions to turn on a Randles short (replace one or several Randles circuits by resistances),\nand to define the value of the short resistance.\n\nParameters\n\nresistances_func\n\nFunction\n\nDefine the local resistance function of local parameters for the local Randles circuit.\n\n!! processed by numpydoc !!\n\n\n\nset_extra_heat_source(heat_source_func=None)\n\nAdd an extra heat source term to the Randles circuit nodes in order to account for thermal runaway\nsituations.\n\nParameters\n\nheat_source_func\n\nFunction\n\nDefine the local heat source function of local parameters for the local Randles circuit.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nSet parameter for Randles Cell.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.stub",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.define_batmac",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > define_batmac",
        "section": "Module Contents > define_batmac",
        "text": "define_batmac = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.define_randles_short",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > define_randles_short",
        "section": "Module Contents > define_randles_short",
        "text": "define_randles_short = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.define_extra_heat_source",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > define_extra_heat_source",
        "section": "Module Contents > define_extra_heat_source",
        "text": "define_extra_heat_source = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.set_batmac_model",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_batmac_model",
        "section": "Module Contents > set_batmac_model",
        "text": "set_batmac_model(cell_type=RandlesCellType.RANDLES_CELL_1_ORDER, cell_parts=None, area=2, cell_capacity=0, soc_conversion_factor=0, charge_init_state=0, equilibrium_voltage=None, circuit_parameter=None, constant_temperature=0, temperature_from_thermal_solver=False, add_heating_to_thermal_solver=False)\n\ndefine the distributed Randles circuit parameters for a Randles cell when using the batmac model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.set_randles_short",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_randles_short",
        "section": "Module Contents > set_randles_short",
        "text": "set_randles_short(resistances_func=None)\n\nDefine conditions to turn on a Randles short (replace one or several Randles circuits by resistances),\nand to define the value of the short resistance.\n\nParameters\n\nresistances_func\n\nFunction\n\nDefine the local resistance function of local parameters for the local Randles circuit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.set_extra_heat_source",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > set_extra_heat_source",
        "section": "Module Contents > set_extra_heat_source",
        "text": "set_extra_heat_source(heat_source_func=None)\n\nAdd an extra heat source term to the Randles circuit nodes in order to account for thermal runaway\nsituations.\n\nParameters\n\nheat_source_func\n\nFunction\n\nDefine the local heat source function of local parameters for the local Randles circuit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaem/index.html#ansys.dyna.core.pre.dynaem.RandlesCell.create",
        "title": "ansys.dyna.core.pre.dynaem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nSet parameter for Randles Cell.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/index",
        "href": "autoapi/ansys/dyna/core/index.html#ansysdynacore",
        "title": "ansys.dyna.core",
        "section": "ansys.dyna.core",
        "text": "ansys.dyna.core"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/index",
        "href": "autoapi/ansys/dyna/core/index.html#submodules",
        "title": "ansys.dyna.core > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/index",
        "href": "autoapi/ansys/dyna/core/index.html#attributes",
        "title": "ansys.dyna.core > Attributes",
        "section": "Attributes",
        "text": "__version__\n\nAttributes\n__version__"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/index",
        "href": "autoapi/ansys/dyna/core/index.html#package-contents",
        "title": "ansys.dyna.core > Package Contents",
        "section": "Package Contents",
        "text": "Package Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/index",
        "href": "autoapi/ansys/dyna/core/index.html#ansys.dyna.core.__version__",
        "title": "ansys.dyna.core > Package Contents > __version__",
        "section": "Package Contents > __version__",
        "text": "ansys.dyna.core.__version__\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansysdynacorelibtable_card_group",
        "title": "ansys.dyna.core.lib.table_card_group",
        "section": "ansys.dyna.core.lib.table_card_group",
        "text": "ansys.dyna.core.lib.table_card_group"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#classes",
        "title": "ansys.dyna.core.lib.table_card_group > Classes",
        "section": "Classes",
        "text": "TableCardGroup\nAbstract base class for all the implementations of keyword cards.\nClasses\nTableCardGroup"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#module-contents",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nAbstract base class for all the implementations of keyword cards.\nGet the card format type.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nReturn whether the card is active.\nReturns a console-friendly representation of the desired parameters for the card\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > TableCardGroup",
        "section": "Module Contents > TableCardGroup",
        "text": "class ansys.dyna.core.lib.table_card_group.TableCardGroup(cards: List[ansys.dyna.core.lib.card.Card], length_func: Callable, active_func: Callable = None, name: str = None, format: ansys.dyna.core.lib.format_type.format_type = format_type.default, **kwargs)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nproperty table\n\n\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!\n\n\n\nproperty bounded: bool\n\n\n\n\n\n__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.format",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.table",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > table",
        "section": "Module Contents > table",
        "text": "property table\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.read",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.write",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.active",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.bounded",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > bounded",
        "section": "Module Contents > bounded",
        "text": "property bounded: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card_group/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card_group/index.html#ansys.dyna.core.lib.table_card_group.TableCardGroup.__repr__",
        "title": "ansys.dyna.core.lib.table_card_group > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#ansysdynacorelibtransform",
        "title": "ansys.dyna.core.lib.transform",
        "section": "ansys.dyna.core.lib.transform",
        "text": "Transformation handler for INCLUDE_TRANSFORM.\nansys.dyna.core.lib.transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#classes",
        "title": "ansys.dyna.core.lib.transform > Classes",
        "section": "Classes",
        "text": "TransformHandler\nBase class for import handlers.\nClasses\nTransformHandler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#module-contents",
        "title": "ansys.dyna.core.lib.transform > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.import_handler.ImportHandler\nBase class for import handlers.\nEvent called after a keyword is imported.\nkeyword is the imported keyword. It could be a string or a keyword object\nDepending on the context is a\nModule Contents\nansys.dyna.core.lib.import_handler.ImportHandler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#ansys.dyna.core.lib.transform.TransformHandler",
        "title": "ansys.dyna.core.lib.transform > Module Contents > TransformHandler",
        "section": "Module Contents > TransformHandler",
        "text": "class ansys.dyna.core.lib.transform.TransformHandler\n\nBases: ansys.dyna.core.lib.import_handler.ImportHandler\n\nBase class for import handlers.\n\n!! processed by numpydoc !!\n\n\n\nregister_transform_handler(identity: str | Tuple[str, str], handler: ansys.dyna.core.lib.transforms.base_transform.Transform) -> None\n\n\n\n\n\nafter_import(context: ansys.dyna.core.lib.import_handler.ImportContext, keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str) -> None\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!\n\n\n\non_error(error)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#ansys.dyna.core.lib.transform.TransformHandler.register_transform_handler",
        "title": "ansys.dyna.core.lib.transform > Module Contents > register_transform_handler",
        "section": "Module Contents > register_transform_handler",
        "text": "register_transform_handler(identity: str | Tuple[str, str], handler: ansys.dyna.core.lib.transforms.base_transform.Transform) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#ansys.dyna.core.lib.transform.TransformHandler.after_import",
        "title": "ansys.dyna.core.lib.transform > Module Contents > after_import",
        "section": "Module Contents > after_import",
        "text": "after_import(context: ansys.dyna.core.lib.import_handler.ImportContext, keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str) -> None\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transform/index.html#ansys.dyna.core.lib.transform.TransformHandler.on_error",
        "title": "ansys.dyna.core.lib.transform > Module Contents > on_error",
        "section": "Module Contents > on_error",
        "text": "on_error(error)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/index.html#ansysdynacorelibcards_special",
        "title": "ansys.dyna.core.lib.cards_.special",
        "section": "ansys.dyna.core.lib.cards_.special",
        "text": "ansys.dyna.core.lib.cards_.special"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/index.html#submodules",
        "title": "ansys.dyna.core.lib.cards_.special > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#frf-for-a-rectangular-plate",
        "title": "FRF for a rectangular plate",
        "section": "FRF for a rectangular plate",
        "text": "This example shows how to set up the keywords for computation of a FRF (frequency response function).\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nFRF for a rectangular plate\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#perform-required-imports",
        "title": "FRF for a rectangular plate > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#start-the-pre-service",
        "title": "FRF for a rectangular plate > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nreferring to the README.rst file in this server package.\nOnce the pre service is running, you can connect a client to it using\nthe hostname and port. This example uses the default localhost and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#import-mesh-data-nodes-and-elements",
        "title": "FRF for a rectangular plate > Import mesh data (nodes and elements)",
        "section": "Import mesh data (nodes and elements)",
        "text": "Import initial mesh data, which includes the predefined NODE, ELEMENT_ and PART\ncards.\nImport mesh data (nodes and elements)"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#define-global-control-cards",
        "title": "FRF for a rectangular plate > Define global control cards",
        "section": "Define global control cards",
        "text": "Define the global control cards.\nDefine global control cards"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#set-initial-timestep-size",
        "title": "FRF for a rectangular plate > Set initial timestep size",
        "section": "Set initial timestep size",
        "text": "Set the initial timestep size in CONTROL_IMPLICIT_GENERAL.\nSet initial timestep size"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#set-number-of-eigen-modes",
        "title": "FRF for a rectangular plate > Set number of eigen modes",
        "section": "Set number of eigen modes",
        "text": "Set the number of eigen modes to 100.\nSet number of eigen modes\n100"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#define-linear-solver",
        "title": "FRF for a rectangular plate > Define linear solver",
        "section": "Define linear solver",
        "text": "Define the linear solver by setting NSOLVR to 1 in CONTROL_IMPLICIT_SOLUTION.\nDefine linear solver\n1"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#define-frequency-domain-cards",
        "title": "FRF for a rectangular plate > Define frequency domain cards",
        "section": "Define frequency domain cards",
        "text": "FREQUENCY_DOMAIN_FRF is used to compute the frequency response function due to\nnodal excitations. In this case, a base velocity is defined as an input at node 131.\nThe base acceleration response is measured at nodes 131 and 651. The maximum\nnatural frequency employed in FRF is limited to 2000 Hz.\nDefine frequency domain cards"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#define-material-and-section-properties",
        "title": "FRF for a rectangular plate > Define material and section properties",
        "section": "Define material and section properties",
        "text": "Define the MAT_ELASTIC material. Set shell formulation to SR_HUGHES_LIU.\nDefine material and section properties\nMAT_ELASTIC\nSR_HUGHES_LIU"
    },
    {
        "objectID": "examples/NVH/frf_plate_damping",
        "href": "examples/NVH/frf_plate_damping.html#set-printout-property-and-save-input-deck",
        "title": "FRF for a rectangular plate > Set printout property and save input deck",
        "section": "Set printout property and save input deck",
        "text": "Use the set_printout() method to set the printout property to 3.\nSave the input deck.\nTotal running time of the script: (0 minutes 0.028 seconds)\nDownload Jupyter notebook: frf_plate_damping.ipynb\nDownload Python source code: frf_plate_damping.py\nDownload zipped: frf_plate_damping.zip\nGallery generated by Sphinx-Gallery\nSet printout property and save input deck\nset_printout()\n3\nDownload Jupyter notebook: frf_plate_damping.ipynb\nDownload Python source code: frf_plate_damping.py\nDownload zipped: frf_plate_damping.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#ansysdynacorerundocker_runner",
        "title": "ansys.dyna.core.run.docker_runner",
        "section": "ansys.dyna.core.run.docker_runner",
        "text": "ansys.dyna.core.run.docker_runner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#classes",
        "title": "ansys.dyna.core.run.docker_runner > Classes",
        "section": "Classes",
        "text": "DockerRunner\nDocker implementation to Run LS-DYNA. Tested with a custom exutable\nClasses\nDockerRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#module-contents",
        "title": "ansys.dyna.core.run.docker_runner > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.run.base_runner.BaseRunner\nDocker implementation to Run LS-DYNA. Tested with a custom exutable\nand when LS-DYNA is installed as part of the unified Ansys installation\nModule Contents\nansys.dyna.core.run.base_runner.BaseRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#ansys.dyna.core.run.docker_runner.DockerRunner",
        "title": "ansys.dyna.core.run.docker_runner > Module Contents > DockerRunner",
        "section": "Module Contents > DockerRunner",
        "text": "class ansys.dyna.core.run.docker_runner.DockerRunner(**kwargs)\n\nBases: ansys.dyna.core.run.base_runner.BaseRunner\n\nDocker implementation to Run LS-DYNA. Tested with a custom exutable\nand when LS-DYNA is installed as part of the unified Ansys installation\n\n!! processed by numpydoc !!\n\n\n\nset_input(input_file: str, working_directory: str) -> None\n\n\n\n\n\nrun() -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#ansys.dyna.core.run.docker_runner.DockerRunner.set_input",
        "title": "ansys.dyna.core.run.docker_runner > Module Contents > set_input",
        "section": "Module Contents > set_input",
        "text": "set_input(input_file: str, working_directory: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/docker_runner/index",
        "href": "autoapi/ansys/dyna/core/run/docker_runner/index.html#ansys.dyna.core.run.docker_runner.DockerRunner.run",
        "title": "ansys.dyna.core.run.docker_runner > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run() -> None\n\n"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "These examples show end-to-end workflows for using PyDyna to create keyword\nfiles for LS-DYNA and then solve them from Python. Many are adapted from\nthe LS-DYNA Knowledge Base.\n“””\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#airbag-examples",
        "title": "Examples > Airbag examples",
        "section": "Airbag examples",
        "text": "These examples show how to create and use airbag models.\nsphx_glr_examples_Airbag_airbag_deploy.py\nsphx_glr_examples_Airbag_airbag_post.py\nAirbag examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#beer-can-buckling",
        "title": "Examples > Beer can buckling",
        "section": "Beer can buckling",
        "text": "Note: due to https://github.com/ansys/pydyna/issues/583, this example is not available in\nthe documentation. But it can be found in the code at\nhttps://github.com/ansys/pydyna/tree/main/examples/Buckling_Beer_Can\nBeer can buckling"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#em-examples",
        "title": "Examples > EM examples",
        "section": "EM examples",
        "text": "These examples show how to create and use electromagnetic models.\nsphx_glr_examples_EM_em_resistive_heating.py\nsphx_glr_examples_EM_em_resistive_heating_2d.py\nsphx_glr_examples_EM_em_resistive_heating_2d_isopots.py\nsphx_glr_examples_EM_em_resistive_heating_2d_multi_isopots.py\nsphx_glr_examples_EM_em_rlc_define_func.py\nsphx_glr_examples_EM_em_rlc_isopotential.py\nEM examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#explicit-examples",
        "title": "Examples > Explicit examples",
        "section": "Explicit examples",
        "text": "These examples show how to create and use explicit models.\nsphx_glr_examples_Explicit_ball_plate.py\nsphx_glr_examples_Explicit_belted_dummy.py\nExplicit examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#icfd-examples",
        "title": "Examples > ICFD examples",
        "section": "ICFD examples",
        "text": "These examples show how to create and use ICFD\nincompressible computational fluid dynamics) models.\nsphx_glr_examples_ICFD_icfd_cylinderflow.py\nsphx_glr_examples_ICFD_icfd_dam_break.py\nsphx_glr_examples_ICFD_icfd_dem_coupling.py\nsphx_glr_examples_ICFD_icfd_driven_cavity.py\nsphx_glr_examples_ICFD_icfd_free_convection_flow.py\nsphx_glr_examples_ICFD_icfd_imposed_move.py\nsphx_glr_examples_ICFD_icfd_internal_3d_flow.py\nsphx_glr_examples_ICFD_icfd_mesh_adaptivity.py\nsphx_glr_examples_ICFD_icfd_mesh_morphing.py\nsphx_glr_examples_ICFD_icfd_mesh_size.py\nsphx_glr_examples_ICFD_icfd_plate_flow.py\nsphx_glr_examples_ICFD_icfd_sloshing.py\nsphx_glr_examples_ICFD_icfd_strong_fsi.py\nsphx_glr_examples_ICFD_icfd_thermal_flow.py\nsphx_glr_examples_ICFD_icfd_weak_fsi.py\nICFD examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#isph-examples",
        "title": "Examples > ISPH examples",
        "section": "ISPH examples",
        "text": "These examples show how to create and use ISPH (incompressible\nsmooth particle hydrodynamics) models.\nsphx_glr_examples_ISPH_rigidtest.py\nISPH examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#implicit-examples",
        "title": "Examples > Implicit examples",
        "section": "Implicit examples",
        "text": "These examples show how to create and use implicit models.\nsphx_glr_examples_Implicit_camry_rc.py\nImplicit examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#pendulum",
        "title": "Examples > Pendulum",
        "section": "Pendulum",
        "text": "This example is adapted from https://lsdyna.ansys.com/pendlum/ to run from Python.\nsphx_glr_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py\nPendulum"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#pipe",
        "title": "Examples > Pipe",
        "section": "Pipe",
        "text": "This example is adapted from https://lsdyna.ansys.com/pipe-d51/ to run from Python.\nsphx_glr_examples_John_Reid_Pipe_plot_john_pipe.py\nPipe"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#nvh-examples",
        "title": "Examples > NVH examples",
        "section": "NVH examples",
        "text": "These examples show how to create and use NVH (noise, vibration, and harshness) models.\nsphx_glr_examples_NVH_frf_plate_damping.py\nsphx_glr_examples_NVH_nvh_frf_solid.py\nNVH examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#s-ale-examples",
        "title": "Examples > S-ALE examples",
        "section": "S-ALE examples",
        "text": "These examples show how to create and use S-ALE (Structured ALE) models.\nsphx_glr_examples_SALE_sale_efp.py\nS-ALE examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#taylor-bar-impact",
        "title": "Examples > Taylor bar impact",
        "section": "Taylor bar impact",
        "text": "This example, inspired by the https://lsdyna.ansys.com/bar-a/ example, shows how\nto use PyDyna to parameterize a LS-DYNA problem and compare results.\nsphx_glr_examples_Taylor_Bar_plot_taylor_bar.py\nTaylor bar impact"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#thermal-examples",
        "title": "Examples > Thermal examples",
        "section": "Thermal examples",
        "text": "These examples show how to create and use thermal models.\nsphx_glr_examples_Thermal_thermal_stress.py\nGallery generated by Sphinx-Gallery\nThermal examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/index.html#ansysdynacorekeywordskeyword_classesmanual",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual",
        "text": "ansys.dyna.core.keywords.keyword_classes.manual"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/index.html#submodules",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/array/index",
        "href": "autoapi/ansys/dyna/core/lib/array/index.html#ansysdynacorelibarray",
        "title": "ansys.dyna.core.lib.array",
        "section": "ansys.dyna.core.lib.array",
        "text": "ansys.dyna.core.lib.array"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/array/index",
        "href": "autoapi/ansys/dyna/core/lib/array/index.html#functions",
        "title": "ansys.dyna.core.lib.array > Functions",
        "section": "Functions",
        "text": "array(element_type[, reserved_size, default_value])\nA resizable array that supports optional values for any type\nFunctions\narray"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/array/index",
        "href": "autoapi/ansys/dyna/core/lib/array/index.html#module-contents",
        "title": "ansys.dyna.core.lib.array > Module Contents",
        "section": "Module Contents",
        "text": "A resizable array that supports optional values for any type\nRight now - array.array is used for single and double precision floating points\nfor everything else - python list is used.  This is because no existing array\ntype in numpy, pandas, and python meet the above requirements.  Specifically,\nnumpy integer arrays do not have optional values and are not resizable, pandas\ninteger arrays support optional values but are also not resizable, while python\narray arrays are resizable but do not support optional values.\nThe problem with this approach is memory usage.  For 100k integers, a python list\nappears to take about 5300K, while a pandas array and numpy array take 488K and 584K\nrespectively.  pandas arrays take more memory than numpy because of the masking used\nto support optional integer values.\nGiven a python list of optional integer, where None is used to represent a missing value,\n- this is how you convert to either type:\nnumpy:  np.array([item or 0 for item in the_list], dtype=np.int32)\npandas: pd.array(the_list,dtype=pd.Int32Dtype())\nIn the future - A dynamic array class based on some of the above types can be used for\ninteger arrays.  For string arrays, pandas arrays don’t offer any value over python\nlists.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/array/index",
        "href": "autoapi/ansys/dyna/core/lib/array/index.html#ansys.dyna.core.lib.array.array",
        "title": "ansys.dyna.core.lib.array > Module Contents > array",
        "section": "Module Contents > array",
        "text": "ansys.dyna.core.lib.array.array(element_type: type, reserved_size: int = 0, default_value=None)\n\nA resizable array that supports optional values for any type\nRight now - array.array is used for single and double precision floating points\nfor everything else - python list is used.  This is because no existing array\ntype in numpy, pandas, and python meet the above requirements.  Specifically,\nnumpy integer arrays do not have optional values and are not resizable, pandas\ninteger arrays support optional values but are also not resizable, while python\narray arrays are resizable but do not support optional values.\n\nThe problem with this approach is memory usage.  For 100k integers, a python list\nappears to take about 5300K, while a pandas array and numpy array take 488K and 584K\nrespectively.  pandas arrays take more memory than numpy because of the masking used\nto support optional integer values.\n\nGiven a python list of optional integer, where None is used to represent a missing value,\n- this is how you convert to either type:\nnumpy:  np.array([item or 0 for item in the_list], dtype=np.int32)\npandas: pd.array(the_list,dtype=pd.Int32Dtype())\n\nIn the future - A dynamic array class based on some of the above types can be used for\ninteger arrays.  For string arrays, pandas arrays don’t offer any value over python\nlists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansysdynacorekeywordskeyword_classesmanualelement_solid",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid",
        "text": "Contains the ElementSolid class.\nansys.dyna.core.keywords.keyword_classes.manual.element_solid"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#classes",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Classes",
        "section": "Classes",
        "text": "ElementSolid\nDYNA ELEMENT_SOLID (ten nodes format) keyword\nClasses\nElementSolid"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.keyword_base.KeywordBase\nDYNA ELEMENT_SOLID (ten nodes format) keyword\nReads the first line of the buffer to determine the format.\nSets the legacy format.\nGets the full table of elements\nModule Contents\nansys.dyna.core.lib.keyword_base.KeywordBase"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > ElementSolid",
        "section": "Module Contents > ElementSolid",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid(**kwargs)\n\nBases: ansys.dyna.core.lib.keyword_base.KeywordBase\n\nDYNA ELEMENT_SOLID (ten nodes format) keyword\n\n!! processed by numpydoc !!\n\n\n\nkeyword = 'ELEMENT'\n\n\n\n\n\nsubkeyword = 'SOLID'\n\n\n\n\n\nbefore_read(buf: TextIO) -> None\n\nReads the first line of the buffer to determine the format.\n\n!! processed by numpydoc !!\n\n\n\nset_legacy_format()\n\nSets the legacy format.\n\n!! processed by numpydoc !!\n\n\n\nproperty elements\n\nGets the full table of elements\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid.keyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > keyword",
        "section": "Module Contents > keyword",
        "text": "keyword = 'ELEMENT'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid.subkeyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > subkeyword",
        "section": "Module Contents > subkeyword",
        "text": "subkeyword = 'SOLID'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid.before_read",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > before_read",
        "section": "Module Contents > before_read",
        "text": "before_read(buf: TextIO) -> None\n\nReads the first line of the buffer to determine the format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid.set_legacy_format",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > set_legacy_format",
        "section": "Module Contents > set_legacy_format",
        "text": "set_legacy_format()\n\nSets the legacy format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid.ElementSolid.elements",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid > Module Contents > elements",
        "section": "Module Contents > elements",
        "text": "property elements\n\nGets the full table of elements\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansysdynacoreprelauncher",
        "title": "ansys.dyna.core.pre.launcher",
        "section": "ansys.dyna.core.pre.launcher",
        "text": "Module for launching the pre service locally.\nansys.dyna.core.pre.launcher"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#attributes",
        "title": "ansys.dyna.core.pre.launcher > Attributes",
        "section": "Attributes",
        "text": "LOCALHOST\n\nDYNAPRE_DEFAULT_PORT\n\nSERVER_PRE_VERSION\n\nMAX_MESSAGE_LENGTH\n\nserver_path\n\nAttributes\nLOCALHOST\nDYNAPRE_DEFAULT_PORT\nSERVER_PRE_VERSION\nMAX_MESSAGE_LENGTH\nserver_path"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#classes",
        "title": "ansys.dyna.core.pre.launcher > Classes",
        "section": "Classes",
        "text": "ServerThread\nProvides server thread properties.\nClasses\nServerThread"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#functions",
        "title": "ansys.dyna.core.pre.launcher > Functions",
        "section": "Functions",
        "text": "check_ports(port_range[, ip])\nCheck the state of ports in a port range.\nport_in_use(port[, host])\nDetermine if a port is in use at a given host.\nget_virtualenv_path()\nGet the virtual environment path.\nlaunch_grpc(→ tuple)\nLaunch the pre service locally in gRPC mode.\nlaunch_remote_dynapre(...)\nStart DYNA PRE remotely using the product instance management API.\nlaunch_dynapre(...)\nStart the pre service locally.\nFunctions\ncheck_ports\nport_in_use\nget_virtualenv_path\nlaunch_grpc\nlaunch_remote_dynapre\nlaunch_dynapre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#module-contents",
        "title": "ansys.dyna.core.pre.launcher > Module Contents",
        "section": "Module Contents",
        "text": "Check the state of ports in a port range.\nIP address. The default is \"localhost\", in which case\n``”127.0.0.1”``is used.\nDetermine if a port is in use at a given host.\nPort.\nis used.\nThe port must “bind” the address. Just checking if a socket can be created\nis insufficient because it is possible to run into permission\nerrors like this one:\n“An attempt was made to access a socket in a way forbidden by its\naccess permissions.”\nGet the virtual environment path.\nLaunch the pre service locally in gRPC mode.\nPort to launch the pre service on. The default is DYNAPRE_DEFAULT_PORT.\nThe final port is the first port available after (or including) this\nport.\nIP address. The default is LOCALHOST, in which case \"127.0.0.1\"\nis used.\nPath to the pre service. The default is None.\nPort number that the gRPC instance started on.\nStart DYNA PRE remotely using the product instance management API.\nWhen calling this method, you need to ensure that you are in an environment where PyPIM is configured.\nThis can be verified with pypim.is_configured.\nThe DYNA version to run, in the 3 digits format, such as “212”.\nIf unspecified, the version will be chosen by the server.\nExit DYNA when python exits or the dyna Python instance is\ngarbage collected.\nIf unspecified, it will be cleaned up.\nAn instance of DynaSolution.\nBases: threading.Thread\nProvides server thread properties.\nMethod representing the thread’s activity.\nYou may override this method in a subclass. The standard run() method\ninvokes the callable object passed to the object’s constructor as the\ntarget argument, if any, with sequential and keyword arguments taken\nfrom the args and kwargs arguments, respectively.\nStart the pre service locally.\nPort to launch MAPDL gRPC on. The default is 50051.\nIP address or host name of the PyDYNA instance to connect to.\nThe default is \"localhost\", in which case \"127.0.0.1\"\nis used.\nModule Contents\npython:str\noptional\n\"localhost\"\npython:int\nLOCALHOST\n\"127.0.0.1\"\nTrue\nwhen\na\nport\nis\nin\nuse\nat\nthe\ngiven\nhost\nFalse\npython:int\noptional\nDYNAPRE_DEFAULT_PORT\npython:str\noptional\nLOCALHOST\n\"127.0.0.1\"\npython:str\noptional\nNone\npython:int\npypim.is_configured\npython:str\noptional\noptional\nansys.dyna.core.pre.DynaSolution\nthreading.Thread\npython:int\noptional\n50051\noptional\n\"localhost\"\n\"127.0.0.1\""
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.LOCALHOST",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > LOCALHOST",
        "section": "Module Contents > LOCALHOST",
        "text": "ansys.dyna.core.pre.launcher.LOCALHOST = '127.0.0.1'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.DYNAPRE_DEFAULT_PORT",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > DYNAPRE_DEFAULT_PORT",
        "section": "Module Contents > DYNAPRE_DEFAULT_PORT",
        "text": "ansys.dyna.core.pre.launcher.DYNAPRE_DEFAULT_PORT = 50051\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.SERVER_PRE_VERSION",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > SERVER_PRE_VERSION",
        "section": "Module Contents > SERVER_PRE_VERSION",
        "text": "ansys.dyna.core.pre.launcher.SERVER_PRE_VERSION = 'v0.4.6'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.MAX_MESSAGE_LENGTH",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > MAX_MESSAGE_LENGTH",
        "section": "Module Contents > MAX_MESSAGE_LENGTH",
        "text": "ansys.dyna.core.pre.launcher.MAX_MESSAGE_LENGTH = 8388608\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.check_ports",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > check_ports",
        "section": "Module Contents > check_ports",
        "text": "ansys.dyna.core.pre.launcher.check_ports(port_range, ip='localhost')\n\nCheck the state of ports in a port range.\n\nParameters\n\nport_range\n\n\n\nip\n\npython:str, optional\n\nIP address. The default is \"localhost\", in which case\n``”127.0.0.1”``is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.port_in_use",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > port_in_use",
        "section": "Module Contents > port_in_use",
        "text": "ansys.dyna.core.pre.launcher.port_in_use(port, host=LOCALHOST)\n\nDetermine if a port is in use at a given host.\n\nParameters\n\nport\n\npython:int\n\nPort.\n\nhost\n\nHost. The default is LOCALHOST, in which case \"127.0.0.1\"\n\nis used.\n\nReturns\n\nTrue when a port is in use at the given host, False otherwise.\n\n\n\nNotes\n\nThe port must “bind” the address. Just checking if a socket can be created\nis insufficient because it is possible to run into permission\nerrors like this one:\n\n“An attempt was made to access a socket in a way forbidden by its\naccess permissions.”\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.get_virtualenv_path",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > get_virtualenv_path",
        "section": "Module Contents > get_virtualenv_path",
        "text": "ansys.dyna.core.pre.launcher.get_virtualenv_path()\n\nGet the virtual environment path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.launch_grpc",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > launch_grpc",
        "section": "Module Contents > launch_grpc",
        "text": "ansys.dyna.core.pre.launcher.launch_grpc(port=DYNAPRE_DEFAULT_PORT, ip=LOCALHOST, server_path='') -> tuple\n\nLaunch the pre service locally in gRPC mode.\n\nParameters\n\nport\n\npython:int, optional\n\nPort to launch the pre service on. The default is DYNAPRE_DEFAULT_PORT.\nThe final port is the first port available after (or including) this\nport.\n\nip\n\npython:str, optional\n\nIP address. The default is LOCALHOST, in which case \"127.0.0.1\"\nis used.\n\nserver_path\n\npython:str, optional\n\nPath to the pre service. The default is None.\n\nReturns\n\npython:int\n\nPort number that the gRPC instance started on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.launch_remote_dynapre",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > launch_remote_dynapre",
        "section": "Module Contents > launch_remote_dynapre",
        "text": "ansys.dyna.core.pre.launcher.launch_remote_dynapre(version=None, cleanup_on_exit=True) -> ansys.dyna.core.pre.dynasolution.DynaSolution\n\nStart DYNA PRE remotely using the product instance management API.\n\nWhen calling this method, you need to ensure that you are in an environment where PyPIM is configured.\nThis can be verified with pypim.is_configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe DYNA version to run, in the 3 digits format, such as “212”.\n\nIf unspecified, the version will be chosen by the server.\n\ncleanup_on_exit\n\nbool, optional\n\nExit DYNA when python exits or the dyna Python instance is\ngarbage collected.\n\nIf unspecified, it will be cleaned up.\n\nReturns\n\nansys.dyna.core.pre.DynaSolution\n\nAn instance of DynaSolution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > ServerThread",
        "section": "Module Contents > ServerThread",
        "text": "class ansys.dyna.core.pre.launcher.ServerThread(threadID, port, ip, server_path)\n\nBases: threading.Thread\n\nProvides server thread properties.\n\nParameters\n\nthreadID\n\n\n\nport\n\n\n\nip\n\n\n\nserver_path\n\n\n\n!! processed by numpydoc !!\n\n\n\nthreadID\n\n\n\n\n\nport\n\n\n\n\n\nip\n\n\n\n\n\nserver_path\n\n\n\n\n\nprocess = None\n\n\n\n\n\nrun()\n\nMethod representing the thread’s activity.\n\nYou may override this method in a subclass. The standard run() method\ninvokes the callable object passed to the object’s constructor as the\ntarget argument, if any, with sequential and keyword arguments taken\nfrom the args and kwargs arguments, respectively.\n\n!! processed by numpydoc !!\n\n\n\ntermination()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.threadID",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > threadID",
        "section": "Module Contents > threadID",
        "text": "threadID\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.port",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > port",
        "section": "Module Contents > port",
        "text": "port\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.ip",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > ip",
        "section": "Module Contents > ip",
        "text": "ip\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.server_path",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > server_path",
        "section": "Module Contents > server_path",
        "text": "server_path\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.process",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > process",
        "section": "Module Contents > process",
        "text": "process = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.run",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run()\n\nMethod representing the thread’s activity.\n\nYou may override this method in a subclass. The standard run() method\ninvokes the callable object passed to the object’s constructor as the\ntarget argument, if any, with sequential and keyword arguments taken\nfrom the args and kwargs arguments, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.ServerThread.termination",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > termination",
        "section": "Module Contents > termination",
        "text": "termination()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.launch_dynapre",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > launch_dynapre",
        "section": "Module Contents > launch_dynapre",
        "text": "ansys.dyna.core.pre.launcher.launch_dynapre(port=50051, ip='localhost') -> ansys.dyna.core.pre.dynasolution.DynaSolution\n\nStart the pre service locally.\n\nParameters\n\nport\n\npython:int, optional\n\nPort to launch MAPDL gRPC on. The default is 50051.\n\nip\n\nbool, optional\n\nIP address or host name of the PyDYNA instance to connect to.\nThe default is \"localhost\", in which case \"127.0.0.1\"\nis used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/launcher/index",
        "href": "autoapi/ansys/dyna/core/pre/launcher/index.html#ansys.dyna.core.pre.launcher.server_path",
        "title": "ansys.dyna.core.pre.launcher > Module Contents > server_path",
        "section": "Module Contents > server_path",
        "text": "ansys.dyna.core.pre.launcher.server_path\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansysdynacorerunbase_runner",
        "title": "ansys.dyna.core.run.base_runner",
        "section": "ansys.dyna.core.run.base_runner",
        "text": "Base runner class.\nansys.dyna.core.run.base_runner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#classes",
        "title": "ansys.dyna.core.run.base_runner > Classes",
        "section": "Classes",
        "text": "BaseRunner\n\nClasses\nBaseRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#module-contents",
        "title": "ansys.dyna.core.run.base_runner > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > BaseRunner",
        "section": "Module Contents > BaseRunner",
        "text": "class ansys.dyna.core.run.base_runner.BaseRunner(**kwargs)\n\n\n\nmpi_option\n\n\n\n\n\nncpu\n\n\n\n\n\nmemory\n\n\n\n\n\nmemory_unit\n\n\n\n\n\nprecision\n\n\n\n\n\nget_memory_string() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.mpi_option",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > mpi_option",
        "section": "Module Contents > mpi_option",
        "text": "mpi_option\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.ncpu",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > ncpu",
        "section": "Module Contents > ncpu",
        "text": "ncpu\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.memory",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > memory",
        "section": "Module Contents > memory",
        "text": "memory\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.memory_unit",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > memory_unit",
        "section": "Module Contents > memory_unit",
        "text": "memory_unit\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.precision",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > precision",
        "section": "Module Contents > precision",
        "text": "precision\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/base_runner/index",
        "href": "autoapi/ansys/dyna/core/run/base_runner/index.html#ansys.dyna.core.run.base_runner.BaseRunner.get_memory_string",
        "title": "ansys.dyna.core.run.base_runner > Module Contents > get_memory_string",
        "section": "Module Contents > get_memory_string",
        "text": "get_memory_string() -> str\n\n"
    },
    {
        "objectID": "examples/ICFD/icfd_weak_fsi",
        "href": "examples/ICFD/icfd_weak_fsi.html#weak-fsi",
        "title": "Weak FSI",
        "section": "Weak FSI",
        "text": "This example shows a simple FSI (fluid-structure interaction) coupling problem\nusing weak/loose/explicit FSI. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.043 seconds)\nDownload Jupyter notebook: icfd_weak_fsi.ipynb\nDownload Python source code: icfd_weak_fsi.py\nDownload zipped: icfd_weak_fsi.zip\nGallery generated by Sphinx-Gallery\nWeak FSI\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_weak_fsi.ipynb\nDownload Python source code: icfd_weak_fsi.py\nDownload zipped: icfd_weak_fsi.zip"
    },
    {
        "objectID": "examples/ICFD/sg_execution_times",
        "href": "examples/ICFD/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.754 total execution time for 15 files from examples/ICFD:\nExample\nTime\nMem (MB)\nsphx_glr_examples_ICFD_icfd_sloshing.py (icfd_sloshing.py)\n00:00.224\n0.0\nsphx_glr_examples_ICFD_icfd_dem_coupling.py (icfd_dem_coupling.py)\n00:00.082\n0.0\nsphx_glr_examples_ICFD_icfd_weak_fsi.py (icfd_weak_fsi.py)\n00:00.043\n0.0\nsphx_glr_examples_ICFD_icfd_strong_fsi.py (icfd_strong_fsi.py)\n00:00.043\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_morphing.py (icfd_mesh_morphing.py)\n00:00.039\n0.0\nsphx_glr_examples_ICFD_icfd_internal_3d_flow.py (icfd_internal_3d_flow.py)\n00:00.037\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_size.py (icfd_mesh_size.py)\n00:00.036\n0.0\nsphx_glr_examples_ICFD_icfd_thermal_flow.py (icfd_thermal_flow.py)\n00:00.036\n0.0\nsphx_glr_examples_ICFD_icfd_free_convection_flow.py (icfd_free_convection_flow.py)\n00:00.034\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_adaptivity.py (icfd_mesh_adaptivity.py)\n00:00.033\n0.0\nsphx_glr_examples_ICFD_icfd_plate_flow.py (icfd_plate_flow.py)\n00:00.033\n0.0\nsphx_glr_examples_ICFD_icfd_imposed_move.py (icfd_imposed_move.py)\n00:00.033\n0.0\nsphx_glr_examples_ICFD_icfd_cylinderflow.py (icfd_cylinderflow.py)\n00:00.031\n0.0\nsphx_glr_examples_ICFD_icfd_dam_break.py (icfd_dam_break.py)\n00:00.026\n0.0\nsphx_glr_examples_ICFD_icfd_driven_cavity.py (icfd_driven_cavity.py)\n00:00.025\n0.0\nComputation times\nicfd_sloshing.py\nicfd_dem_coupling.py\nicfd_weak_fsi.py\nicfd_strong_fsi.py\nicfd_mesh_morphing.py\nicfd_internal_3d_flow.py\nicfd_mesh_size.py\nicfd_thermal_flow.py\nicfd_free_convection_flow.py\nicfd_mesh_adaptivity.py\nicfd_plate_flow.py\nicfd_imposed_move.py\nicfd_cylinderflow.py\nicfd_dam_break.py\nicfd_driven_cavity.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansysdynacorelibcard",
        "title": "ansys.dyna.core.lib.card",
        "section": "ansys.dyna.core.lib.card",
        "text": "ansys.dyna.core.lib.card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#classes",
        "title": "ansys.dyna.core.lib.card > Classes",
        "section": "Classes",
        "text": "Card\nAbstract base class for all the implementations of keyword cards.\nClasses\nCard"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.card > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nAbstract base class for all the implementations of keyword cards.\nGet the card format type.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nReturn whether the card is active.\ngets the value of the field in the card\nsets the value of the field in the card\nReturns a console-friendly representation of the desired parameters for the card\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card",
        "title": "ansys.dyna.core.lib.card > Module Contents > Card",
        "section": "Module Contents > Card",
        "text": "class ansys.dyna.core.lib.card.Card(fields: List[ansys.dyna.core.lib.field.Field], active_func=None, format=format_type.default)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nproperty format\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!\n\n\n\nget_value(prop: str) -> Any\n\ngets the value of the field in the card\n\n!! processed by numpydoc !!\n\n\n\nset_value(prop: str, value: Any) -> None\n\nsets the value of the field in the card\n\n!! processed by numpydoc !!\n\n\n\n__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.format",
        "title": "ansys.dyna.core.lib.card > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.read",
        "title": "ansys.dyna.core.lib.card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.write",
        "title": "ansys.dyna.core.lib.card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.active",
        "title": "ansys.dyna.core.lib.card > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.get_value",
        "title": "ansys.dyna.core.lib.card > Module Contents > get_value",
        "section": "Module Contents > get_value",
        "text": "get_value(prop: str) -> Any\n\ngets the value of the field in the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.set_value",
        "title": "ansys.dyna.core.lib.card > Module Contents > set_value",
        "section": "Module Contents > set_value",
        "text": "set_value(prop: str, value: Any) -> None\n\nsets the value of the field in the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card/index",
        "href": "autoapi/ansys/dyna/core/lib/card/index.html#ansys.dyna.core.lib.card.Card.__repr__",
        "title": "ansys.dyna.core.lib.card > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index.html#ansysdynacorelibtransformsbase_transform",
        "title": "ansys.dyna.core.lib.transforms.base_transform",
        "section": "ansys.dyna.core.lib.transforms.base_transform",
        "text": "Base Transform class.\nansys.dyna.core.lib.transforms.base_transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index.html#classes",
        "title": "ansys.dyna.core.lib.transforms.base_transform > Classes",
        "section": "Classes",
        "text": "Transform\n\nClasses\nTransform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index.html#module-contents",
        "title": "ansys.dyna.core.lib.transforms.base_transform > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index.html#ansys.dyna.core.lib.transforms.base_transform.Transform",
        "title": "ansys.dyna.core.lib.transforms.base_transform > Module Contents > Transform",
        "section": "Module Contents > Transform",
        "text": "class ansys.dyna.core.lib.transforms.base_transform.Transform(xform: ansys.dyna.core.keywords.IncludeTransform)\n\n\n\ntransform(keyword) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/base_transform/index.html#ansys.dyna.core.lib.transforms.base_transform.Transform.transform",
        "title": "ansys.dyna.core.lib.transforms.base_transform > Module Contents > transform",
        "section": "Module Contents > transform",
        "text": "transform(keyword) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansysdynacorepredynanvh",
        "title": "ansys.dyna.core.pre.dynanvh",
        "section": "ansys.dyna.core.pre.dynanvh",
        "text": "Module for creating an NVH Dyna input deck.\nansys.dyna.core.pre.dynanvh"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#classes",
        "title": "ansys.dyna.core.pre.dynanvh > Classes",
        "section": "Classes",
        "text": "DynaNVH\nContains methods for creating a keyword related to NVH.\nExcitationDOF\nCreate a collection of name/value pairs.\nExcitationType\nCreate a collection of name/value pairs.\nResponseDOF\nCreate a collection of name/value pairs.\nResponseType\nCreate a collection of name/value pairs.\nFrequencyDomain\nProvides a way of defining and solving frequency domain vibration and acoustic problems.\nClasses\nDynaNVH\nExcitationDOF\nExcitationType\nResponseDOF\nResponseType\nFrequencyDomain"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for creating a keyword related to NVH.\nSave keyword files.\nTrue when successful, False when failed.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nProvides a way of defining and solving frequency domain vibration and acoustic problems.\nCompute frequency response functions due to nodal excitations.\nDefine a frequency domain vibration and acoustic problem.\nModule Contents\nansys.dyna.core.pre.dynabase.DynaBase\nTrue\nFalse\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.BaseObj"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.DynaNVH",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > DynaNVH",
        "section": "Module Contents > DynaNVH",
        "text": "class ansys.dyna.core.pre.dynanvh.DynaNVH\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating a keyword related to NVH.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.DynaNVH.save_file",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationDOF",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > ExcitationDOF",
        "section": "Module Contents > ExcitationDOF",
        "text": "class ansys.dyna.core.pre.dynanvh.ExcitationDOF(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nVECTOR = 0\n\n\n\n\n\nX = 1\n\n\n\n\n\nY = 2\n\n\n\n\n\nZ = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationDOF.VECTOR",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > VECTOR",
        "section": "Module Contents > VECTOR",
        "text": "VECTOR = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationDOF.X",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > X",
        "section": "Module Contents > X",
        "text": "X = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationDOF.Y",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > Y",
        "section": "Module Contents > Y",
        "text": "Y = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationDOF.Z",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > Z",
        "section": "Module Contents > Z",
        "text": "Z = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationType",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > ExcitationType",
        "section": "Module Contents > ExcitationType",
        "text": "class ansys.dyna.core.pre.dynanvh.ExcitationType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nBASE_VELOCITY = 0\n\n\n\n\n\nBASE_ACCELERATION = 1\n\n\n\n\n\nBASE_DISPLACEMENT = 2\n\n\n\n\n\nNODAL_FORCE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationType.BASE_VELOCITY",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_VELOCITY",
        "section": "Module Contents > BASE_VELOCITY",
        "text": "BASE_VELOCITY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationType.BASE_ACCELERATION",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_ACCELERATION",
        "section": "Module Contents > BASE_ACCELERATION",
        "text": "BASE_ACCELERATION = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationType.BASE_DISPLACEMENT",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_DISPLACEMENT",
        "section": "Module Contents > BASE_DISPLACEMENT",
        "text": "BASE_DISPLACEMENT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ExcitationType.NODAL_FORCE",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > NODAL_FORCE",
        "section": "Module Contents > NODAL_FORCE",
        "text": "NODAL_FORCE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseDOF",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > ResponseDOF",
        "section": "Module Contents > ResponseDOF",
        "text": "class ansys.dyna.core.pre.dynanvh.ResponseDOF(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nVECTOR = 0\n\n\n\n\n\nX = 1\n\n\n\n\n\nY = 2\n\n\n\n\n\nZ = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseDOF.VECTOR",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > VECTOR",
        "section": "Module Contents > VECTOR",
        "text": "VECTOR = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseDOF.X",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > X",
        "section": "Module Contents > X",
        "text": "X = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseDOF.Y",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > Y",
        "section": "Module Contents > Y",
        "text": "Y = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseDOF.Z",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > Z",
        "section": "Module Contents > Z",
        "text": "Z = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseType",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > ResponseType",
        "section": "Module Contents > ResponseType",
        "text": "class ansys.dyna.core.pre.dynanvh.ResponseType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nBASE_VELOCITY = 0\n\n\n\n\n\nBASE_ACCELERATION = 1\n\n\n\n\n\nBASE_DISPLACEMENT = 2\n\n\n\n\n\nNODAL_FORCE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseType.BASE_VELOCITY",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_VELOCITY",
        "section": "Module Contents > BASE_VELOCITY",
        "text": "BASE_VELOCITY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseType.BASE_ACCELERATION",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_ACCELERATION",
        "section": "Module Contents > BASE_ACCELERATION",
        "text": "BASE_ACCELERATION = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseType.BASE_DISPLACEMENT",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > BASE_DISPLACEMENT",
        "section": "Module Contents > BASE_DISPLACEMENT",
        "text": "BASE_DISPLACEMENT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.ResponseType.NODAL_FORCE",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > NODAL_FORCE",
        "section": "Module Contents > NODAL_FORCE",
        "text": "NODAL_FORCE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > FrequencyDomain",
        "section": "Module Contents > FrequencyDomain",
        "text": "class ansys.dyna.core.pre.dynanvh.FrequencyDomain\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nProvides a way of defining and solving frequency domain vibration and acoustic problems.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ndefined_frf = False\n\n\n\n\n\ntype = 'frequency_domain'\n\n\n\n\n\nset_frequency_response_function(excitation_input_set=None, excitation_input_dof=ExcitationDOF.VECTOR, excitation_input_type=ExcitationType.NODAL_FORCE, max_natural_frequency=0, modal_damping_coefficient=0, modal_damping_coefficient_curve=None, modal_damping_coefficient_curve_type=0, response_output_set=None, response_output_dof=ResponseDOF.Y, response_output_type=ResponseType.BASE_VELOCITY, frf_output_min_frequency=0, frf_output_max_frequency=0, frf_output_num_frequency=0)\n\nCompute frequency response functions due to nodal excitations.\n\nParameters\n\nexcitation_input_set\n\n\n\nexcitation_input_dof\n\n\n\nexcitation_input_type\n\n\n\nmax_natural_frequency\n\n\n\nmodal_damping_coefficient\n\n\n\nmodal_damping_coefficient_curve\n\n\n\nmodal_damping_coefficient_curve_type\n\n\n\nresponse_output_set\n\n\n\nresponse_output_dof\n\n\n\nresponse_output_type\n\n\n\nfrf_output_min_frequency\n\n\n\nfrf_output_max_frequency\n\n\n\nfrf_output_num_frequency\n\n\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nDefine a frequency domain vibration and acoustic problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain.stub",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain.defined_frf",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > defined_frf",
        "section": "Module Contents > defined_frf",
        "text": "defined_frf = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain.type",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'frequency_domain'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain.set_frequency_response_function",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > set_frequency_response_function",
        "section": "Module Contents > set_frequency_response_function",
        "text": "set_frequency_response_function(excitation_input_set=None, excitation_input_dof=ExcitationDOF.VECTOR, excitation_input_type=ExcitationType.NODAL_FORCE, max_natural_frequency=0, modal_damping_coefficient=0, modal_damping_coefficient_curve=None, modal_damping_coefficient_curve_type=0, response_output_set=None, response_output_dof=ResponseDOF.Y, response_output_type=ResponseType.BASE_VELOCITY, frf_output_min_frequency=0, frf_output_max_frequency=0, frf_output_num_frequency=0)\n\nCompute frequency response functions due to nodal excitations.\n\nParameters\n\nexcitation_input_set\n\n\n\nexcitation_input_dof\n\n\n\nexcitation_input_type\n\n\n\nmax_natural_frequency\n\n\n\nmodal_damping_coefficient\n\n\n\nmodal_damping_coefficient_curve\n\n\n\nmodal_damping_coefficient_curve_type\n\n\n\nresponse_output_set\n\n\n\nresponse_output_dof\n\n\n\nresponse_output_type\n\n\n\nfrf_output_min_frequency\n\n\n\nfrf_output_max_frequency\n\n\n\nfrf_output_num_frequency\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynanvh/index",
        "href": "autoapi/ansys/dyna/core/pre/dynanvh/index.html#ansys.dyna.core.pre.dynanvh.FrequencyDomain.create",
        "title": "ansys.dyna.core.pre.dynanvh > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nDefine a frequency domain vibration and acoustic problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansysdynacorepredynaicfd",
        "title": "ansys.dyna.core.pre.dynaicfd",
        "section": "ansys.dyna.core.pre.dynaicfd",
        "text": "Module for creating an ICFD (incompressible computational fluid dynamics) DYNA input deck.\nansys.dyna.core.pre.dynaicfd"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#classes",
        "title": "ansys.dyna.core.pre.dynaicfd > Classes",
        "section": "Classes",
        "text": "DynaICFD\nContains methods for create a keyword related to an ICFD analysis.\nICFD_SurfRemeshMethod\nCreate a collection of name/value pairs.\nICFD_AnalysisType\nCreate a collection of name/value pairs.\nICFD_MessageLevel\nCreate a collection of name/value pairs.\nICFD_CouplingForm\nCreate a collection of name/value pairs.\nICFD_CouplingDirection\nCreate a collection of name/value pairs.\nICFDAnalysis\nActivates an ICFD analysis and defines associated control parameters.\nCompressible\nCreate a collection of name/value pairs.\nMatICFD\nDefines physical properties for the fluid material.\nICFDDOF\nCreate a collection of name/value pairs.\nVel\nCreate a collection of name/value pairs.\nICFDPart\nDefines a part for the ICFD solver.\nICFDVolumePart\nAssigns material properties to the nodes enclosed by surface ICFD parts.\nMeshedVolume\nDefines the volume space to mesh.\nClasses\nDynaICFD\nICFD_SurfRemeshMethod\nICFD_AnalysisType\nICFD_MessageLevel\nICFD_CouplingForm\nICFD_CouplingDirection\nICFDAnalysis\nCompressible\nMatICFD\nICFDDOF\nVel\nICFDPart\nICFDVolumePart\nMeshedVolume"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for create a keyword related to an ICFD analysis.\nSet the total time of the simulation for the fluid problem.\nTotal time of the simulation for the fluid problem.\nSpecify the type of CFD analysis.\nAnalysis type. The default is 0.\nSolving method type. The default is 0.\nFlag for divergence cleaning. The default is 0.\nFlag for remeshing divergence cleaning. The default is 0.\nTrue when successful, False when failed.\nModify default values for screen and file outputs related to the fluid solver only.\nMessage level.\nTrue when successful, False when failed.\nModify the default values for the turbulence model.\nTurbulence model to use.\nTrue when successful, False when failed.\nActivate coupling between the ICFD and DEM solvers.\nCoupling direction to the solver. The default is 0.\nBirth time for the DEM coupling. The default is 0.\nDeath time for the DEM coupling. The default is 1e28.\nScale factor to apply to the force transmitted by the fluid to the structure.\nThe default is 1.\nTrue when successful, False when failed.\nDefine a section for the ICFD solver.\nSection ID.\nTrue when successful, False when failed.\nDefine parts for the ICFD solver.\nPart ID for fluid surfaces.\nSection ID defined with the \\*ICFD_SECTION card.\nMaterial ID defined with the \\*ICFD_MAT card.\nTrue when successful, False when failed.\nChange the default tolerance values for the mesh movement algorithm.\nAbsolute convergence criteria. The default is 1e-8.\nRelative convergence criteria. The default is 1e-8.\nTrue when successful, False when failed.\nAssign the initial condition to all nodes at once.\nInitial velocity. The default is (0, 0, 0),\nInitial temperature. The default is 0.\nInitial pressure. The default is 0.\nImpose a velocity on the whole volume mesh.\nSave keyword files.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nActivates an ICFD analysis and defines associated control parameters.\nSet the type of the CFD analysis.\nAnalysis type. The default is TRANSIENT_ANALYSIS.\nModify default values for screen and file outputs related to the fluid solver only.\nMessage level. The default is TIMESTEP_INFORMATION.\nIteration interval to print the output at. The default is 0.\nModify default values for the fluid-structure interaction coupling algorithm.\nCoupling direction to the solver. The default is TWO_WAY_COUPLING.\nSet convergence options for the steady state solver.\nMaximum number of iterations to reach convergence. The default is\n1000000.0.\nTolerance limits for the momentum equations. The default is 0.001.\nTolerance limits for the pressure equations. The default is 0.001.\nTolerance limits for the temperature equations. The default is 0.001.\nRelaxation parameters for the velocity.  The default is 0.3.\nRelaxation parameters for the pressure.  The default is 0.7.\nSet the time step for the fluid problem.\nTime step for the fluid problem. The default is 0.\nModify the default value for automatic volume mesh generation.\nMaximum mesh size that the volume mesher is allowed to use when generating\nthe volume mesh. The default is 1.41.\nActivate the adaptive mesh refinement feature.\nMinimum mesh size for the mesh generator. The default is 0.\nMaximum mesh size. The default is 0.\nMaximum perceptual error allowed in the whole domain. The default\nis 0.\nNumber of iterations before a forced remeshing. The default is\n0.\nEnable automatic surface remeshing.\nWhether to perform a surface remeshing. The default is LAPLACIAN_SMOOTHING.\nActivate coupling between the ICFD and DEM solvers.\nCoupling direction to the solver. The default is 0.\nBirth time for the DEM coupling. The default is 0.\nDeath time for the DEM coupling.  The default is 1e+28.\nScale factor applied to the force transmitted by the fluid to\nthe structure. The default is 1.\nType of formulation to use in the coupling. The default is\nFORCE_BASED_ON_VELOCITY_DRAG_VALUE.\nCreate ICFD analysis.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines physical properties for the fluid material.\nFlag for chooseing between fully incompressible, slightly compressible, or barotropic flows.\nThe default is FULLY_INCOMPRESSIBLE_FLUID. Options are:\nEQ.0: Vacuum (free surface problems only)\nEQ.1: Fully incompressible fluid\nFlow density. The default is 0.\nDynamic viscosity. The default is 0.\nCreate an ICFD material.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines a part for the ICFD solver.\nSet a material.\nImpose the fluid velocity on the boundary.\nApplicable degrees of freedom. The default is ICFDDOF.X.\nOptions are:\nEQ.1: x-degree of freedom\nEQ.2: y-degree of freedom\nEQ.3: z-degree of freedom\nEQ.4: Normal direction degree of freedom\nVelocity flag. The default is LINEAR_VELOCITY. Options are:\nEQ.1: Linear velocity\nEQ.2: Angular velocity\nEQ.3: Parabolic velocity profile\nEQ.4: Activates synthetic turbulent field on part\nImpose a fluid pressure on the boundary.\nLoad curve to describe the pressure value versus time.\nImpose a fluid temperature on the boundary.\nLoad curve to describe the temperature value versus time.\nSpecify the fluid boundary with a free-slip boundary condition.\nSpecify the fluid boundary with a non-slip boundary condition.\nDefine the fluid surface to consider in contact with the solid surfaces\nfor fluid-structure interaction (FSI) analysis.\nEnable the computation of drag forces over given surface parts of the model.\nEnable the computation of the flow rate and average pressure over given parts of the model.\nEnable the computation of the average temperature and the heat flux over given parts of the model.\nDefine a boundary layer mesh as a refinement on the volume mesh.\nNumber of elements normal to the surface (in the boundary layer).\nThe default is 3.\nSpecify the part that is to have symmetry conditions for the boundary layer.\nImpose a velocity on a specific ICFD part.\nSet properties for an ICFD part.\nAssigns material properties to the nodes enclosed by surface ICFD parts.\nList of part IDs for the surface elements that define the volume mesh.\nSet a material.\nImpose a velocity on a specific ICFD part.\nCreate an ICFD volume part.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nDefines the volume space to mesh.\nList of part IDs for the surface elements to use to define the volume.\nDefine surfaces that the mesher is to embed inside the volume mesh.\nList of part IDs for the surface elements.\nDefine a local mesh size in specific zones corresponding to given geometrical shapes.\nMesh size to apply in the zone of the shape defined by SNAME.\nList of the parameters that define the shape.\nDefine the surfaces that the mesher is to use to specify a local mesh size inside the volume.\nList of part IDs for the surface elements.\nDefine the surfaces that the mesher is to use to specify fluid interfaces in multi-fluid simulations.\nList of part IDs for the surface elements.\nCreate mesh volume.\nModule Contents\nansys.dyna.core.pre.dynabase.DynaBase\npython:float\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\noptional\n0\npython:int\noptional\n0\nTrue\nFalse\npython:int\nTrue\nFalse\npython:int\nTrue\nFalse\npython:int\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n1e28\npython:float\noptional\n1\nTrue\nFalse\npython:int\nTrue\nFalse\npython:int\npython:int\n\\*ICFD_SECTION\npython:int\n\\*ICFD_MAT\nTrue\nFalse\npython:float\noptional\n1e-8\npython:float\noptional\n1e-8\nTrue\nFalse\nVelocity\noptional\n(0, 0, 0)\npython:float\noptional\n0\npython:float\noptional\n0\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.BaseObj\nICFD_AnalysisType\nTRANSIENT_ANALYSIS\nICFD_MessageLevel\noptional\nTIMESTEP_INFORMATION\npython:int\noptional\n0\nICFD_CouplingDirection\noptional\nTWO_WAY_COUPLING\npython:int\noptional\n1000000.0\npython:float\noptional\n0.001\npython:float\noptional\n0.001\npython:float\noptional\n0.001\npython:float\noptional\n0.3\npython:float\noptional\n0.7\npython:float\noptional\n0\npython:float\noptional\n1.41\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:int\noptional\n0\nICFD_SurfRemeshMethod\noptional\nLAPLACIAN_SMOOTHING\npython:int\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n1e+28\npython:float\noptional\n1\npython:int\noptional\nFORCE_BASED_ON_VELOCITY_DRAG_VALUE\nansys.dyna.core.pre.dynabase.Enum\npython:int\nFULLY_INCOMPRESSIBLE_FLUID\npython:float\noptional\n0\npython:float\noptional\n0\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\npython:int\noptional\nICFDDOF.X\npython:int\noptional\nLINEAR_VELOCITY\nCurve\nCurve\npython:int\noptional\n3.\npython:list\nansys.dyna.core.pre.dynabase.BaseObj\npython:list\npython:list\npython:float\nSNAME\npython:list\npython:list\npython:list"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > DynaICFD",
        "section": "Module Contents > DynaICFD",
        "text": "class ansys.dyna.core.pre.dynaicfd.DynaICFD\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for create a keyword related to an ICFD analysis.\n\n!! processed by numpydoc !!\n\n\n\ntimestep = 0\n\n\n\n\n\ntermination = 1e+28\n\n\n\n\n\nset_termination(termination_time)\n\nSet the total time of the simulation for the fluid problem.\n\nParameters\n\ntermination_time\n\npython:float\n\nTotal time of the simulation for the fluid problem.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_general(atype=0, mtype=0, dvcl=0, rdvcl=0)\n\nSpecify the type of CFD analysis.\n\nParameters\n\natype\n\npython:int, optional\n\nAnalysis type. The default is 0.\n\nmtype\n\npython:int, optional\n\nSolving method type. The default is 0.\n\ndvcl\n\npython:int, optional\n\nFlag for divergence cleaning. The default is 0.\n\nrdvcl\n\npython:int, optional\n\nFlag for remeshing divergence cleaning. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_output(msgl)\n\nModify default values for screen and file outputs related to the fluid solver only.\n\nParameters\n\nmsgl\n\npython:int\n\nMessage level.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_turbulence(tmod)\n\nModify the default values for the turbulence model.\n\nParameters\n\ntmod\n\npython:int\n\nTurbulence model to use.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_control_dem_coupling(ctype=0, bt=0, dt=1e+28, sf=1)\n\nActivate coupling between the ICFD and DEM solvers.\n\nParameters\n\nctype\n\npython:int, optional\n\nCoupling direction to the solver. The default is 0.\n\nbt\n\npython:float, optional\n\nBirth time for the DEM coupling. The default is 0.\n\ndt\n\npython:float, optional\n\nDeath time for the DEM coupling. The default is 1e28.\n\nsf\n\npython:float, optional\n\nScale factor to apply to the force transmitted by the fluid to the structure.\nThe default is 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_section_icfd(sid)\n\nDefine a section for the ICFD solver.\n\nParameters\n\nsid\n\npython:int\n\nSection ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_part_icfd(pid, secid, mid)\n\nDefine parts for the ICFD solver.\n\nParameters\n\npid\n\npython:int\n\nPart ID for fluid surfaces.\n\nsecid\n\npython:int\n\nSection ID defined with the \\*ICFD_SECTION card.\n\nmid\n\npython:int\n\nMaterial ID defined with the \\*ICFD_MAT card.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_solver_tol_mmov(atol=1e-08, rtol=1e-08)\n\nChange the default tolerance values for the mesh movement algorithm.\n\nParameters\n\natol\n\npython:float, optional\n\nAbsolute convergence criteria. The default is 1e-8.\n\nrtol\n\npython:float, optional\n\nRelative convergence criteria. The default is 1e-8.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_initial(velocity=Velocity(0, 0, 0), temperature=0, pressure=0)\n\nAssign the initial condition to all nodes at once.\n\nParameters\n\nvelocity\n\nVelocity, optional\n\nInitial velocity. The default is (0, 0, 0),\n\ntemperature\n\npython:float, optional\n\nInitial temperature. The default is 0.\n\npressure\n\npython:float, optional\n\nInitial pressure. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nset_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on the whole volume mesh.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.timestep",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > timestep",
        "section": "Module Contents > timestep",
        "text": "timestep = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.termination",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > termination",
        "section": "Module Contents > termination",
        "text": "termination = 1e+28\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.set_termination",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_termination",
        "section": "Module Contents > set_termination",
        "text": "set_termination(termination_time)\n\nSet the total time of the simulation for the fluid problem.\n\nParameters\n\ntermination_time\n\npython:float\n\nTotal time of the simulation for the fluid problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_control_general",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_control_general",
        "section": "Module Contents > create_control_general",
        "text": "create_control_general(atype=0, mtype=0, dvcl=0, rdvcl=0)\n\nSpecify the type of CFD analysis.\n\nParameters\n\natype\n\npython:int, optional\n\nAnalysis type. The default is 0.\n\nmtype\n\npython:int, optional\n\nSolving method type. The default is 0.\n\ndvcl\n\npython:int, optional\n\nFlag for divergence cleaning. The default is 0.\n\nrdvcl\n\npython:int, optional\n\nFlag for remeshing divergence cleaning. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_control_output",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_control_output",
        "section": "Module Contents > create_control_output",
        "text": "create_control_output(msgl)\n\nModify default values for screen and file outputs related to the fluid solver only.\n\nParameters\n\nmsgl\n\npython:int\n\nMessage level.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_control_turbulence",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_control_turbulence",
        "section": "Module Contents > create_control_turbulence",
        "text": "create_control_turbulence(tmod)\n\nModify the default values for the turbulence model.\n\nParameters\n\ntmod\n\npython:int\n\nTurbulence model to use.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_control_dem_coupling",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_control_dem_coupling",
        "section": "Module Contents > create_control_dem_coupling",
        "text": "create_control_dem_coupling(ctype=0, bt=0, dt=1e+28, sf=1)\n\nActivate coupling between the ICFD and DEM solvers.\n\nParameters\n\nctype\n\npython:int, optional\n\nCoupling direction to the solver. The default is 0.\n\nbt\n\npython:float, optional\n\nBirth time for the DEM coupling. The default is 0.\n\ndt\n\npython:float, optional\n\nDeath time for the DEM coupling. The default is 1e28.\n\nsf\n\npython:float, optional\n\nScale factor to apply to the force transmitted by the fluid to the structure.\nThe default is 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_section_icfd",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_section_icfd",
        "section": "Module Contents > create_section_icfd",
        "text": "create_section_icfd(sid)\n\nDefine a section for the ICFD solver.\n\nParameters\n\nsid\n\npython:int\n\nSection ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_part_icfd",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_part_icfd",
        "section": "Module Contents > create_part_icfd",
        "text": "create_part_icfd(pid, secid, mid)\n\nDefine parts for the ICFD solver.\n\nParameters\n\npid\n\npython:int\n\nPart ID for fluid surfaces.\n\nsecid\n\npython:int\n\nSection ID defined with the \\*ICFD_SECTION card.\n\nmid\n\npython:int\n\nMaterial ID defined with the \\*ICFD_MAT card.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.create_solver_tol_mmov",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create_solver_tol_mmov",
        "section": "Module Contents > create_solver_tol_mmov",
        "text": "create_solver_tol_mmov(atol=1e-08, rtol=1e-08)\n\nChange the default tolerance values for the mesh movement algorithm.\n\nParameters\n\natol\n\npython:float, optional\n\nAbsolute convergence criteria. The default is 1e-8.\n\nrtol\n\npython:float, optional\n\nRelative convergence criteria. The default is 1e-8.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.set_initial",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_initial",
        "section": "Module Contents > set_initial",
        "text": "set_initial(velocity=Velocity(0, 0, 0), temperature=0, pressure=0)\n\nAssign the initial condition to all nodes at once.\n\nParameters\n\nvelocity\n\nVelocity, optional\n\nInitial velocity. The default is (0, 0, 0),\n\ntemperature\n\npython:float, optional\n\nInitial temperature. The default is 0.\n\npressure\n\npython:float, optional\n\nInitial pressure. The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.set_imposed_move",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_imposed_move",
        "section": "Module Contents > set_imposed_move",
        "text": "set_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on the whole volume mesh.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.DynaICFD.save_file",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_SurfRemeshMethod",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFD_SurfRemeshMethod",
        "section": "Module Contents > ICFD_SurfRemeshMethod",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFD_SurfRemeshMethod(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nLAPLACIAN_SMOOTHING = 1\n\n\n\n\n\nCURVATURE_PRESERVING = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_SurfRemeshMethod.LAPLACIAN_SMOOTHING",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > LAPLACIAN_SMOOTHING",
        "section": "Module Contents > LAPLACIAN_SMOOTHING",
        "text": "LAPLACIAN_SMOOTHING = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_SurfRemeshMethod.CURVATURE_PRESERVING",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > CURVATURE_PRESERVING",
        "section": "Module Contents > CURVATURE_PRESERVING",
        "text": "CURVATURE_PRESERVING = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_AnalysisType",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFD_AnalysisType",
        "section": "Module Contents > ICFD_AnalysisType",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFD_AnalysisType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nTURNOFF_ICFD_SOLVER = -1\n\n\n\n\n\nTRANSIENT_ANALYSIS = 0\n\n\n\n\n\nSTEADY_STATE_ANALYSIS = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_AnalysisType.TURNOFF_ICFD_SOLVER",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > TURNOFF_ICFD_SOLVER",
        "section": "Module Contents > TURNOFF_ICFD_SOLVER",
        "text": "TURNOFF_ICFD_SOLVER = -1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_AnalysisType.TRANSIENT_ANALYSIS",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > TRANSIENT_ANALYSIS",
        "section": "Module Contents > TRANSIENT_ANALYSIS",
        "text": "TRANSIENT_ANALYSIS = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_AnalysisType.STEADY_STATE_ANALYSIS",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > STEADY_STATE_ANALYSIS",
        "section": "Module Contents > STEADY_STATE_ANALYSIS",
        "text": "STEADY_STATE_ANALYSIS = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_MessageLevel",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFD_MessageLevel",
        "section": "Module Contents > ICFD_MessageLevel",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFD_MessageLevel(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nTIMESTEP_INFORMATION = 0\n\n\n\n\n\nFULL_OUTPUT_INFORMATION = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_MessageLevel.TIMESTEP_INFORMATION",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > TIMESTEP_INFORMATION",
        "section": "Module Contents > TIMESTEP_INFORMATION",
        "text": "TIMESTEP_INFORMATION = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_MessageLevel.FULL_OUTPUT_INFORMATION",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > FULL_OUTPUT_INFORMATION",
        "section": "Module Contents > FULL_OUTPUT_INFORMATION",
        "text": "FULL_OUTPUT_INFORMATION = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingForm",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFD_CouplingForm",
        "section": "Module Contents > ICFD_CouplingForm",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFD_CouplingForm(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nFORCE_BASED_ON_VELOCITY_DRAG_VALUE = 0\n\n\n\n\n\nFORCE_USING_FLUID_PRESSURE_GRADIENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingForm.FORCE_BASED_ON_VELOCITY_DRAG_VALUE",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > FORCE_BASED_ON_VELOCITY_DRAG_VALUE",
        "section": "Module Contents > FORCE_BASED_ON_VELOCITY_DRAG_VALUE",
        "text": "FORCE_BASED_ON_VELOCITY_DRAG_VALUE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingForm.FORCE_USING_FLUID_PRESSURE_GRADIENT",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > FORCE_USING_FLUID_PRESSURE_GRADIENT",
        "section": "Module Contents > FORCE_USING_FLUID_PRESSURE_GRADIENT",
        "text": "FORCE_USING_FLUID_PRESSURE_GRADIENT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFD_CouplingDirection",
        "section": "Module Contents > ICFD_CouplingDirection",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nTWO_WAY_COUPLING = 0\n\n\n\n\n\nONE_WAY_COUPLING_MECHANICS_TRANS_DISPLACEMENT_TO_FLUID = 1\n\n\n\n\n\nONE_WAY_COUPLING_FLUID_TRANS_STRESS_TO_SOLID = 2\n\n\n\n\n\nTWO_WAY_WEAK_COUPLING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection.TWO_WAY_COUPLING",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > TWO_WAY_COUPLING",
        "section": "Module Contents > TWO_WAY_COUPLING",
        "text": "TWO_WAY_COUPLING = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection.ONE_WAY_COUPLING_MECHANICS_TRANS_DISPLACEMENT_TO_FLUID",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ONE_WAY_COUPLING_MECHANICS_TRANS_DISPLACEMENT_TO_FLUID",
        "section": "Module Contents > ONE_WAY_COUPLING_MECHANICS_TRANS_DISPLACEMENT_TO_FLUID",
        "text": "ONE_WAY_COUPLING_MECHANICS_TRANS_DISPLACEMENT_TO_FLUID = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection.ONE_WAY_COUPLING_FLUID_TRANS_STRESS_TO_SOLID",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ONE_WAY_COUPLING_FLUID_TRANS_STRESS_TO_SOLID",
        "section": "Module Contents > ONE_WAY_COUPLING_FLUID_TRANS_STRESS_TO_SOLID",
        "text": "ONE_WAY_COUPLING_FLUID_TRANS_STRESS_TO_SOLID = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFD_CouplingDirection.TWO_WAY_WEAK_COUPLING",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > TWO_WAY_WEAK_COUPLING",
        "section": "Module Contents > TWO_WAY_WEAK_COUPLING",
        "text": "TWO_WAY_WEAK_COUPLING = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFDAnalysis",
        "section": "Module Contents > ICFDAnalysis",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFDAnalysis\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nActivates an ICFD analysis and defines associated control parameters.\n\n!! processed by numpydoc !!\n\n\n\ndefined_timestep = False\n\n\n\n\n\ndefined_volumemesh = False\n\n\n\n\n\ndefined_surfmesh = False\n\n\n\n\n\ndefined_type = False\n\n\n\n\n\ndefined_output = False\n\n\n\n\n\ndefined_fsi = False\n\n\n\n\n\ndefined_steady_state = False\n\n\n\n\n\ndefined_coupling_dem = False\n\n\n\n\n\ndefined_mesh_adapt = False\n\n\n\n\n\nstub\n\n\n\n\n\ntype = 'analysis_icfd'\n\n\n\n\n\nset_type(analysis_type=ICFD_AnalysisType.TRANSIENT_ANALYSIS)\n\nSet the type of the CFD analysis.\n\nParameters\n\nanalysis_type\n\nICFD_AnalysisType\n\nAnalysis type. The default is TRANSIENT_ANALYSIS.\n\n!! processed by numpydoc !!\n\n\n\nset_output(messagelevel=ICFD_MessageLevel.TIMESTEP_INFORMATION, iteration_interval=0)\n\nModify default values for screen and file outputs related to the fluid solver only.\n\nParameters\n\nmessagelevel\n\nICFD_MessageLevel, optional\n\nMessage level. The default is TIMESTEP_INFORMATION.\n\niteration_interval\n\npython:int, optional\n\nIteration interval to print the output at. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nset_fsi(couplingdir=ICFD_CouplingDirection.TWO_WAY_COUPLING)\n\nModify default values for the fluid-structure interaction coupling algorithm.\n\nParameters\n\ncouplingdir\n\nICFD_CouplingDirection, optional\n\nCoupling direction to the solver. The default is TWO_WAY_COUPLING.\n\n!! processed by numpydoc !!\n\n\n\nset_steady_state(max_iteration=1000000.0, momentum_tol_limit=0.001, pressure_tol_limit=0.001, temperature_tol_limit=0.001, velocity_relax_param=0.3, pressure_relax_param=0.7)\n\nSet convergence options for the steady state solver.\n\nParameters\n\nmax_iteration\n\npython:int, optional\n\nMaximum number of iterations to reach convergence. The default is\n1000000.0.\n\nmomentum_tol_limit\n\npython:float, optional\n\nTolerance limits for the momentum equations. The default is 0.001.\n\npressure_tol_limit\n\npython:float, optional\n\nTolerance limits for the pressure equations. The default is 0.001.\n\ntemperature_tol_limit\n\npython:float, optional\n\nTolerance limits for the temperature equations. The default is 0.001.\n\nvelocity_relax_param\n\npython:float, optional\n\nRelaxation parameters for the velocity.  The default is 0.3.\n\npressure_relax_param\n\npython:float, optional\n\nRelaxation parameters for the pressure.  The default is 0.7.\n\n!! processed by numpydoc !!\n\n\n\nset_timestep(timestep=0)\n\nSet the time step for the fluid problem.\n\nParameters\n\ndt\n\npython:float, optional\n\nTime step for the fluid problem. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nset_volume_mesh(mesh_growth_scale_factor=1.41)\n\nModify the default value for automatic volume mesh generation.\n\nParameters\n\nmesh_growth_scale_factor\n\npython:float, optional\n\nMaximum mesh size that the volume mesher is allowed to use when generating\nthe volume mesh. The default is 1.41.\n\n!! processed by numpydoc !!\n\n\n\nset_mesh_adaptivity(min_mesh_size=0, max_mesh_size=0, max_perceptual_error=0, num_iteration=0)\n\nActivate the adaptive mesh refinement feature.\n\nParameters\n\nmin_mesh_size\n\npython:float, optional\n\nMinimum mesh size for the mesh generator. The default is 0.\n\nmax_mesh_size\n\npython:float, optional\n\nMaximum mesh size. The default is 0.\n\nmax_perceptual_error\n\npython:float, optional\n\nMaximum perceptual error allowed in the whole domain. The default\nis 0.\n\nnum_iteration\n\npython:int, optional\n\nNumber of iterations before a forced remeshing. The default is\n0.\n\n!! processed by numpydoc !!\n\n\n\nset_surface_mesh(remesh_method=ICFD_SurfRemeshMethod.LAPLACIAN_SMOOTHING)\n\nEnable automatic surface remeshing.\n\nParameters\n\nremesh_method\n\nICFD_SurfRemeshMethod, optional\n\nWhether to perform a surface remeshing. The default is LAPLACIAN_SMOOTHING.\n\n!! processed by numpydoc !!\n\n\n\nset_coupling_dem(coupling_type=0, birth_time=0, death_time=1e+28, scale_factor=1, formulation=ICFD_CouplingForm.FORCE_BASED_ON_VELOCITY_DRAG_VALUE)\n\nActivate coupling between the ICFD and DEM solvers.\n\nParameters\n\ncoupling_type\n\npython:int, optional\n\nCoupling direction to the solver. The default is 0.\n\nbirth_time\n\npython:float, optional\n\nBirth time for the DEM coupling. The default is 0.\n\ndeath_time\n\npython:float, optional\n\nDeath time for the DEM coupling.  The default is 1e+28.\n\nscale_factor\n\npython:float, optional\n\nScale factor applied to the force transmitted by the fluid to\nthe structure. The default is 1.\n\nformulation\n\npython:int, optional\n\nType of formulation to use in the coupling. The default is\nFORCE_BASED_ON_VELOCITY_DRAG_VALUE.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate ICFD analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_timestep",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_timestep",
        "section": "Module Contents > defined_timestep",
        "text": "defined_timestep = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_volumemesh",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_volumemesh",
        "section": "Module Contents > defined_volumemesh",
        "text": "defined_volumemesh = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_surfmesh",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_surfmesh",
        "section": "Module Contents > defined_surfmesh",
        "text": "defined_surfmesh = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_type",
        "section": "Module Contents > defined_type",
        "text": "defined_type = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_output",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_output",
        "section": "Module Contents > defined_output",
        "text": "defined_output = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_fsi",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_fsi",
        "section": "Module Contents > defined_fsi",
        "text": "defined_fsi = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_steady_state",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_steady_state",
        "section": "Module Contents > defined_steady_state",
        "text": "defined_steady_state = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_coupling_dem",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_coupling_dem",
        "section": "Module Contents > defined_coupling_dem",
        "text": "defined_coupling_dem = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.defined_mesh_adapt",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_mesh_adapt",
        "section": "Module Contents > defined_mesh_adapt",
        "text": "defined_mesh_adapt = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'analysis_icfd'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_type",
        "section": "Module Contents > set_type",
        "text": "set_type(analysis_type=ICFD_AnalysisType.TRANSIENT_ANALYSIS)\n\nSet the type of the CFD analysis.\n\nParameters\n\nanalysis_type\n\nICFD_AnalysisType\n\nAnalysis type. The default is TRANSIENT_ANALYSIS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_output",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_output",
        "section": "Module Contents > set_output",
        "text": "set_output(messagelevel=ICFD_MessageLevel.TIMESTEP_INFORMATION, iteration_interval=0)\n\nModify default values for screen and file outputs related to the fluid solver only.\n\nParameters\n\nmessagelevel\n\nICFD_MessageLevel, optional\n\nMessage level. The default is TIMESTEP_INFORMATION.\n\niteration_interval\n\npython:int, optional\n\nIteration interval to print the output at. The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_fsi",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_fsi",
        "section": "Module Contents > set_fsi",
        "text": "set_fsi(couplingdir=ICFD_CouplingDirection.TWO_WAY_COUPLING)\n\nModify default values for the fluid-structure interaction coupling algorithm.\n\nParameters\n\ncouplingdir\n\nICFD_CouplingDirection, optional\n\nCoupling direction to the solver. The default is TWO_WAY_COUPLING.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_steady_state",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_steady_state",
        "section": "Module Contents > set_steady_state",
        "text": "set_steady_state(max_iteration=1000000.0, momentum_tol_limit=0.001, pressure_tol_limit=0.001, temperature_tol_limit=0.001, velocity_relax_param=0.3, pressure_relax_param=0.7)\n\nSet convergence options for the steady state solver.\n\nParameters\n\nmax_iteration\n\npython:int, optional\n\nMaximum number of iterations to reach convergence. The default is\n1000000.0.\n\nmomentum_tol_limit\n\npython:float, optional\n\nTolerance limits for the momentum equations. The default is 0.001.\n\npressure_tol_limit\n\npython:float, optional\n\nTolerance limits for the pressure equations. The default is 0.001.\n\ntemperature_tol_limit\n\npython:float, optional\n\nTolerance limits for the temperature equations. The default is 0.001.\n\nvelocity_relax_param\n\npython:float, optional\n\nRelaxation parameters for the velocity.  The default is 0.3.\n\npressure_relax_param\n\npython:float, optional\n\nRelaxation parameters for the pressure.  The default is 0.7.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_timestep",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_timestep",
        "section": "Module Contents > set_timestep",
        "text": "set_timestep(timestep=0)\n\nSet the time step for the fluid problem.\n\nParameters\n\ndt\n\npython:float, optional\n\nTime step for the fluid problem. The default is 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_volume_mesh",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_volume_mesh",
        "section": "Module Contents > set_volume_mesh",
        "text": "set_volume_mesh(mesh_growth_scale_factor=1.41)\n\nModify the default value for automatic volume mesh generation.\n\nParameters\n\nmesh_growth_scale_factor\n\npython:float, optional\n\nMaximum mesh size that the volume mesher is allowed to use when generating\nthe volume mesh. The default is 1.41.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_mesh_adaptivity",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_mesh_adaptivity",
        "section": "Module Contents > set_mesh_adaptivity",
        "text": "set_mesh_adaptivity(min_mesh_size=0, max_mesh_size=0, max_perceptual_error=0, num_iteration=0)\n\nActivate the adaptive mesh refinement feature.\n\nParameters\n\nmin_mesh_size\n\npython:float, optional\n\nMinimum mesh size for the mesh generator. The default is 0.\n\nmax_mesh_size\n\npython:float, optional\n\nMaximum mesh size. The default is 0.\n\nmax_perceptual_error\n\npython:float, optional\n\nMaximum perceptual error allowed in the whole domain. The default\nis 0.\n\nnum_iteration\n\npython:int, optional\n\nNumber of iterations before a forced remeshing. The default is\n0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_surface_mesh",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_surface_mesh",
        "section": "Module Contents > set_surface_mesh",
        "text": "set_surface_mesh(remesh_method=ICFD_SurfRemeshMethod.LAPLACIAN_SMOOTHING)\n\nEnable automatic surface remeshing.\n\nParameters\n\nremesh_method\n\nICFD_SurfRemeshMethod, optional\n\nWhether to perform a surface remeshing. The default is LAPLACIAN_SMOOTHING.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.set_coupling_dem",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_coupling_dem",
        "section": "Module Contents > set_coupling_dem",
        "text": "set_coupling_dem(coupling_type=0, birth_time=0, death_time=1e+28, scale_factor=1, formulation=ICFD_CouplingForm.FORCE_BASED_ON_VELOCITY_DRAG_VALUE)\n\nActivate coupling between the ICFD and DEM solvers.\n\nParameters\n\ncoupling_type\n\npython:int, optional\n\nCoupling direction to the solver. The default is 0.\n\nbirth_time\n\npython:float, optional\n\nBirth time for the DEM coupling. The default is 0.\n\ndeath_time\n\npython:float, optional\n\nDeath time for the DEM coupling.  The default is 1e+28.\n\nscale_factor\n\npython:float, optional\n\nScale factor applied to the force transmitted by the fluid to\nthe structure. The default is 1.\n\nformulation\n\npython:int, optional\n\nType of formulation to use in the coupling. The default is\nFORCE_BASED_ON_VELOCITY_DRAG_VALUE.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDAnalysis.create",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate ICFD analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Compressible",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > Compressible",
        "section": "Module Contents > Compressible",
        "text": "class ansys.dyna.core.pre.dynaicfd.Compressible(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nVACUUM = 0\n\n\n\n\n\nFULLY_INCOMPRESSIBLE_FLUID = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Compressible.VACUUM",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > VACUUM",
        "section": "Module Contents > VACUUM",
        "text": "VACUUM = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Compressible.FULLY_INCOMPRESSIBLE_FLUID",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > FULLY_INCOMPRESSIBLE_FLUID",
        "section": "Module Contents > FULLY_INCOMPRESSIBLE_FLUID",
        "text": "FULLY_INCOMPRESSIBLE_FLUID = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > MatICFD",
        "section": "Module Contents > MatICFD",
        "text": "class ansys.dyna.core.pre.dynaicfd.MatICFD(flag=Compressible.FULLY_INCOMPRESSIBLE_FLUID, flow_density=0, dynamic_viscosity=0, heat_capacity=0, thermal_conductivity=0, thermal_expansion_coefficient=0)\n\nDefines physical properties for the fluid material.\n\nParameters\n\nflag\n\npython:int\n\nFlag for chooseing between fully incompressible, slightly compressible, or barotropic flows.\nThe default is FULLY_INCOMPRESSIBLE_FLUID. Options are:\n\nEQ.0: Vacuum (free surface problems only)\n\nEQ.1: Fully incompressible fluid\n\nflow_density\n\npython:float, optional\n\nFlow density. The default is 0.\n\ndynamic_viscosity\n\npython:float, optional\n\nDynamic viscosity. The default is 0.\n\nheat_capacity\n\n\n\nthermal_conductivity\n\n\n\nthremal_expansion_coefficent\n\n\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nflag = 1\n\n\n\n\n\nflow_density = 0\n\n\n\n\n\ndynamic_viscosity = 0\n\n\n\n\n\nhc = 0\n\n\n\n\n\ntc = 0\n\n\n\n\n\nbeta = 0\n\n\n\n\n\ncreate(stub)\n\nCreate an ICFD material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.stub",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.flag",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > flag",
        "section": "Module Contents > flag",
        "text": "flag = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.flow_density",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > flow_density",
        "section": "Module Contents > flow_density",
        "text": "flow_density = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.dynamic_viscosity",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > dynamic_viscosity",
        "section": "Module Contents > dynamic_viscosity",
        "text": "dynamic_viscosity = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.hc",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > hc",
        "section": "Module Contents > hc",
        "text": "hc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.tc",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > tc",
        "section": "Module Contents > tc",
        "text": "tc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.beta",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > beta",
        "section": "Module Contents > beta",
        "text": "beta = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MatICFD.create",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an ICFD material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDDOF",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFDDOF",
        "section": "Module Contents > ICFDDOF",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFDDOF(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nX = 1\n\n\n\n\n\nY = 2\n\n\n\n\n\nZ = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDDOF.X",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > X",
        "section": "Module Contents > X",
        "text": "X = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDDOF.Y",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > Y",
        "section": "Module Contents > Y",
        "text": "Y = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDDOF.Z",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > Z",
        "section": "Module Contents > Z",
        "text": "Z = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Vel",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > Vel",
        "section": "Module Contents > Vel",
        "text": "class ansys.dyna.core.pre.dynaicfd.Vel(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nLINEAR_VELOCITY = 1\n\n\n\n\n\nANGULAR_VELOCITY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Vel.LINEAR_VELOCITY",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > LINEAR_VELOCITY",
        "section": "Module Contents > LINEAR_VELOCITY",
        "text": "LINEAR_VELOCITY = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.Vel.ANGULAR_VELOCITY",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ANGULAR_VELOCITY",
        "section": "Module Contents > ANGULAR_VELOCITY",
        "text": "ANGULAR_VELOCITY = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFDPart",
        "section": "Module Contents > ICFDPart",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFDPart(id)\n\nDefines a part for the ICFD solver.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'ICFD'\n\n\n\n\n\nid\n\n\n\n\n\nsecid = 1\n\n\n\n\n\nmid = 0\n\n\n\n\n\nset_material(mat)\n\nSet a material.\n\n!! processed by numpydoc !!\n\n\n\nset_prescribed_velocity(motion, dof=ICFDDOF.X, velocity_flag=Vel.LINEAR_VELOCITY)\n\nImpose the fluid velocity on the boundary.\n\nParameters\n\ndof\n\npython:int, optional\n\nApplicable degrees of freedom. The default is ICFDDOF.X.\nOptions are:\n\nEQ.1: x-degree of freedom\n\nEQ.2: y-degree of freedom\n\nEQ.3: z-degree of freedom\n\nEQ.4: Normal direction degree of freedom\n\nvelocity_flag\n\npython:int, optional\n\nVelocity flag. The default is LINEAR_VELOCITY. Options are:\n\nEQ.1: Linear velocity\n\nEQ.2: Angular velocity\n\nEQ.3: Parabolic velocity profile\n\nEQ.4: Activates synthetic turbulent field on part\n\n!! processed by numpydoc !!\n\n\n\nset_prescribed_pressure(pressure)\n\nImpose a fluid pressure on the boundary.\n\nParameters\n\npressure\n\nCurve\n\nLoad curve to describe the pressure value versus time.\n\n!! processed by numpydoc !!\n\n\n\nset_prescribed_temperature(temperature)\n\nImpose a fluid temperature on the boundary.\n\nParameters\n\ntemperature\n\nCurve\n\nLoad curve to describe the temperature value versus time.\n\n!! processed by numpydoc !!\n\n\n\nset_free_slip()\n\nSpecify the fluid boundary with a free-slip boundary condition.\n\n!! processed by numpydoc !!\n\n\n\nset_non_slip()\n\nSpecify the fluid boundary with a non-slip boundary condition.\n\n!! processed by numpydoc !!\n\n\n\nset_fsi()\n\nDefine the fluid surface to consider in contact with the solid surfaces\nfor fluid-structure interaction (FSI) analysis.\n\n!! processed by numpydoc !!\n\n\n\ncompute_drag_force()\n\nEnable the computation of drag forces over given surface parts of the model.\n\n!! processed by numpydoc !!\n\n\n\ncompute_flux()\n\nEnable the computation of the flow rate and average pressure over given parts of the model.\n\n!! processed by numpydoc !!\n\n\n\ncompute_temperature()\n\nEnable the computation of the average temperature and the heat flux over given parts of the model.\n\n!! processed by numpydoc !!\n\n\n\nset_boundary_layer(number=3)\n\nDefine a boundary layer mesh as a refinement on the volume mesh.\n\nParameters\n\nnumber\n\npython:int, optional\n\nNumber of elements normal to the surface (in the boundary layer).\nThe default is 3.\n\n!! processed by numpydoc !!\n\n\n\nset_boundary_layer_symmetry_condition()\n\nSpecify the part that is to have symmetry conditions for the boundary layer.\n\n!! processed by numpydoc !!\n\n\n\nset_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on a specific ICFD part.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\nvz\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for an ICFD part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.stub",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'ICFD'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.id",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.secid",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > secid",
        "section": "Module Contents > secid",
        "text": "secid = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.mid",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > mid",
        "section": "Module Contents > mid",
        "text": "mid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_material",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_material",
        "section": "Module Contents > set_material",
        "text": "set_material(mat)\n\nSet a material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_prescribed_velocity",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_prescribed_velocity",
        "section": "Module Contents > set_prescribed_velocity",
        "text": "set_prescribed_velocity(motion, dof=ICFDDOF.X, velocity_flag=Vel.LINEAR_VELOCITY)\n\nImpose the fluid velocity on the boundary.\n\nParameters\n\ndof\n\npython:int, optional\n\nApplicable degrees of freedom. The default is ICFDDOF.X.\nOptions are:\n\nEQ.1: x-degree of freedom\n\nEQ.2: y-degree of freedom\n\nEQ.3: z-degree of freedom\n\nEQ.4: Normal direction degree of freedom\n\nvelocity_flag\n\npython:int, optional\n\nVelocity flag. The default is LINEAR_VELOCITY. Options are:\n\nEQ.1: Linear velocity\n\nEQ.2: Angular velocity\n\nEQ.3: Parabolic velocity profile\n\nEQ.4: Activates synthetic turbulent field on part\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_prescribed_pressure",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_prescribed_pressure",
        "section": "Module Contents > set_prescribed_pressure",
        "text": "set_prescribed_pressure(pressure)\n\nImpose a fluid pressure on the boundary.\n\nParameters\n\npressure\n\nCurve\n\nLoad curve to describe the pressure value versus time.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_prescribed_temperature",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_prescribed_temperature",
        "section": "Module Contents > set_prescribed_temperature",
        "text": "set_prescribed_temperature(temperature)\n\nImpose a fluid temperature on the boundary.\n\nParameters\n\ntemperature\n\nCurve\n\nLoad curve to describe the temperature value versus time.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_free_slip",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_free_slip",
        "section": "Module Contents > set_free_slip",
        "text": "set_free_slip()\n\nSpecify the fluid boundary with a free-slip boundary condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_non_slip",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_non_slip",
        "section": "Module Contents > set_non_slip",
        "text": "set_non_slip()\n\nSpecify the fluid boundary with a non-slip boundary condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_fsi",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_fsi",
        "section": "Module Contents > set_fsi",
        "text": "set_fsi()\n\nDefine the fluid surface to consider in contact with the solid surfaces\nfor fluid-structure interaction (FSI) analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.compute_drag_force",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > compute_drag_force",
        "section": "Module Contents > compute_drag_force",
        "text": "compute_drag_force()\n\nEnable the computation of drag forces over given surface parts of the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.compute_flux",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > compute_flux",
        "section": "Module Contents > compute_flux",
        "text": "compute_flux()\n\nEnable the computation of the flow rate and average pressure over given parts of the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.compute_temperature",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > compute_temperature",
        "section": "Module Contents > compute_temperature",
        "text": "compute_temperature()\n\nEnable the computation of the average temperature and the heat flux over given parts of the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_boundary_layer",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_boundary_layer",
        "section": "Module Contents > set_boundary_layer",
        "text": "set_boundary_layer(number=3)\n\nDefine a boundary layer mesh as a refinement on the volume mesh.\n\nParameters\n\nnumber\n\npython:int, optional\n\nNumber of elements normal to the surface (in the boundary layer).\nThe default is 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_boundary_layer_symmetry_condition",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_boundary_layer_symmetry_condition",
        "section": "Module Contents > set_boundary_layer_symmetry_condition",
        "text": "set_boundary_layer_symmetry_condition()\n\nSpecify the part that is to have symmetry conditions for the boundary layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_imposed_move",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_imposed_move",
        "section": "Module Contents > set_imposed_move",
        "text": "set_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on a specific ICFD part.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\nvz\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDPart.set_property",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for an ICFD part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > ICFDVolumePart",
        "section": "Module Contents > ICFDVolumePart",
        "text": "class ansys.dyna.core.pre.dynaicfd.ICFDVolumePart(surfaces)\n\nAssigns material properties to the nodes enclosed by surface ICFD parts.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements that define the volume mesh.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'ICFDVOLUME'\n\n\n\n\n\nid\n\n\n\n\n\nsecid = 1\n\n\n\n\n\nmid = 0\n\n\n\n\n\nsurfaces\n\n\n\n\n\ndefined_imposed_move = False\n\n\n\n\n\nset_material(mat)\n\nSet a material.\n\n!! processed by numpydoc !!\n\n\n\nset_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on a specific ICFD part.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\nvz\n\n\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate an ICFD volume part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.stub",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'ICFDVOLUME'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.id",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.secid",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > secid",
        "section": "Module Contents > secid",
        "text": "secid = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.mid",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > mid",
        "section": "Module Contents > mid",
        "text": "mid = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.surfaces",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > surfaces",
        "section": "Module Contents > surfaces",
        "text": "surfaces\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.defined_imposed_move",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > defined_imposed_move",
        "section": "Module Contents > defined_imposed_move",
        "text": "defined_imposed_move = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.set_material",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_material",
        "section": "Module Contents > set_material",
        "text": "set_material(mat)\n\nSet a material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.set_imposed_move",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_imposed_move",
        "section": "Module Contents > set_imposed_move",
        "text": "set_imposed_move(vx=None, vy=None, vz=None)\n\nImpose a velocity on a specific ICFD part.\n\nParameters\n\nvx\n\n\n\nvy\n\n\n\nvz\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.ICFDVolumePart.create",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an ICFD volume part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > MeshedVolume",
        "section": "Module Contents > MeshedVolume",
        "text": "class ansys.dyna.core.pre.dynaicfd.MeshedVolume(surfaces)\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nDefines the volume space to mesh.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements to use to define the volume.\n\n!! processed by numpydoc !!\n\n\n\nsurfaces\n\n\n\n\n\nstub\n\n\n\n\n\nmeshsizeshape = []\n\n\n\n\n\nembeded_surf = []\n\n\n\n\n\nmeshsize_surf = []\n\n\n\n\n\nfluid_interfaces = []\n\n\n\n\n\ntype = 'meshedvolume'\n\n\n\n\n\nembed_shell(embeded)\n\nDefine surfaces that the mesher is to embed inside the volume mesh.\n\nParameters\n\nembeded\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!\n\n\n\nmeshsize_box(size, min_point, max_point)\n\nDefine a local mesh size in specific zones corresponding to given geometrical shapes.\n\nParameters\n\nsize\n\npython:float\n\nMesh size to apply in the zone of the shape defined by SNAME.\n\nparameter\n\npython:list\n\nList of the parameters that define the shape.\n\n!! processed by numpydoc !!\n\n\n\nset_meshsize(surfaces)\n\nDefine the surfaces that the mesher is to use to specify a local mesh size inside the volume.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!\n\n\n\nset_fluid_interfaces(surfaces)\n\nDefine the surfaces that the mesher is to use to specify fluid interfaces in multi-fluid simulations.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate mesh volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.surfaces",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > surfaces",
        "section": "Module Contents > surfaces",
        "text": "surfaces\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.stub",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.meshsizeshape",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > meshsizeshape",
        "section": "Module Contents > meshsizeshape",
        "text": "meshsizeshape = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.embeded_surf",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > embeded_surf",
        "section": "Module Contents > embeded_surf",
        "text": "embeded_surf = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.meshsize_surf",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > meshsize_surf",
        "section": "Module Contents > meshsize_surf",
        "text": "meshsize_surf = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.fluid_interfaces",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > fluid_interfaces",
        "section": "Module Contents > fluid_interfaces",
        "text": "fluid_interfaces = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.type",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'meshedvolume'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.embed_shell",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > embed_shell",
        "section": "Module Contents > embed_shell",
        "text": "embed_shell(embeded)\n\nDefine surfaces that the mesher is to embed inside the volume mesh.\n\nParameters\n\nembeded\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.meshsize_box",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > meshsize_box",
        "section": "Module Contents > meshsize_box",
        "text": "meshsize_box(size, min_point, max_point)\n\nDefine a local mesh size in specific zones corresponding to given geometrical shapes.\n\nParameters\n\nsize\n\npython:float\n\nMesh size to apply in the zone of the shape defined by SNAME.\n\nparameter\n\npython:list\n\nList of the parameters that define the shape.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.set_meshsize",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_meshsize",
        "section": "Module Contents > set_meshsize",
        "text": "set_meshsize(surfaces)\n\nDefine the surfaces that the mesher is to use to specify a local mesh size inside the volume.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.set_fluid_interfaces",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > set_fluid_interfaces",
        "section": "Module Contents > set_fluid_interfaces",
        "text": "set_fluid_interfaces(surfaces)\n\nDefine the surfaces that the mesher is to use to specify fluid interfaces in multi-fluid simulations.\n\nParameters\n\nsurfaces\n\npython:list\n\nList of part IDs for the surface elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaicfd/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaicfd/index.html#ansys.dyna.core.pre.dynaicfd.MeshedVolume.create",
        "title": "ansys.dyna.core.pre.dynaicfd > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate mesh volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansysdynacorepreexamplesdownload_utilities",
        "title": "ansys.dyna.core.pre.examples.download_utilities",
        "section": "ansys.dyna.core.pre.examples.download_utilities",
        "text": "ansys.dyna.core.pre.examples.download_utilities"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#classes",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Classes",
        "section": "Classes",
        "text": "DownloadManager\nManages downloads of example files.\nClasses\nDownloadManager"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#module-contents",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents",
        "section": "Module Contents",
        "text": "Manages downloads of example files.\nLocal paths are saved in this class so that a global cleanup\nof example files can be performed when the client is closed.\nAdd the path for a downloaded example file to a list.\nThis list keeps track of where example files are\ndownloaded so that a global cleanup of these files can be\nperformed when the client is closed.\nLocal path of the downloaded example file.\nRemove downloaded example files from the local path.\nDownload an example file from the PyPrimeMesh repository.\nName of the example file to download.\nPath to download the example file to. The default\nis None, in which case the default path for app data\nis used.\nWhether to always download the example file. The default is\nFalse, in which case if the example file is cached, it\nis reused.\nPath under the PyAnsys Github examples repository.\nTuple containing the filepath to use and the local filepath of the downloaded\ndirectory. The two are different in case of containers.\nModule Contents\npython:str\npython:str\npython:str\noptional\nNone\noptional\nFalse\npython:tuple\npython:str\npython:tuple\npython:str\npython:str"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansys.dyna.core.pre.examples.download_utilities.DownloadManager",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents > DownloadManager",
        "section": "Module Contents > DownloadManager",
        "text": "class ansys.dyna.core.pre.examples.download_utilities.DownloadManager\n\nManages downloads of example files.\n\nLocal paths are saved in this class so that a global cleanup\nof example files can be performed when the client is closed.\n\n!! processed by numpydoc !!\n\n\n\ndownloads_list = []\n\n\n\n\n\nadd_file(file_path: str)\n\nAdd the path for a downloaded example file to a list.\n\nThis list keeps track of where example files are\ndownloaded so that a global cleanup of these files can be\nperformed when the client is closed.\n\nParameters\n\nfile_path\n\npython:str\n\nLocal path of the downloaded example file.\n\n!! processed by numpydoc !!\n\n\n\nclear_download_cache()\n\nRemove downloaded example files from the local path.\n\n!! processed by numpydoc !!\n\n\n\ndownload_file(filename: str, *directory: str, destination: str | None = None, force: bool = False) -> str\n\nDownload an example file from the PyPrimeMesh repository.\n\nParameters\n\nfilename\n\npython:str\n\nName of the example file to download.\n\ndestination\n\npython:str, optional\n\nPath to download the example file to. The default\nis None, in which case the default path for app data\nis used.\n\nforce\n\nbool, optional\n\nWhether to always download the example file. The default is\nFalse, in which case if the example file is cached, it\nis reused.\n\ndirectory\n\npython:tuple[python:str]\n\nPath under the PyAnsys Github examples repository.\n\nReturns\n\npython:tuple[python:str, python:str]\n\nTuple containing the filepath to use and the local filepath of the downloaded\ndirectory. The two are different in case of containers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansys.dyna.core.pre.examples.download_utilities.DownloadManager.downloads_list",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents > downloads_list",
        "section": "Module Contents > downloads_list",
        "text": "downloads_list = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansys.dyna.core.pre.examples.download_utilities.DownloadManager.add_file",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents > add_file",
        "section": "Module Contents > add_file",
        "text": "add_file(file_path: str)\n\nAdd the path for a downloaded example file to a list.\n\nThis list keeps track of where example files are\ndownloaded so that a global cleanup of these files can be\nperformed when the client is closed.\n\nParameters\n\nfile_path\n\npython:str\n\nLocal path of the downloaded example file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansys.dyna.core.pre.examples.download_utilities.DownloadManager.clear_download_cache",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents > clear_download_cache",
        "section": "Module Contents > clear_download_cache",
        "text": "clear_download_cache()\n\nRemove downloaded example files from the local path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/download_utilities/index.html#ansys.dyna.core.pre.examples.download_utilities.DownloadManager.download_file",
        "title": "ansys.dyna.core.pre.examples.download_utilities > Module Contents > download_file",
        "section": "Module Contents > download_file",
        "text": "download_file(filename: str, *directory: str, destination: str | None = None, force: bool = False) -> str\n\nDownload an example file from the PyPrimeMesh repository.\n\nParameters\n\nfilename\n\npython:str\n\nName of the example file to download.\n\ndestination\n\npython:str, optional\n\nPath to download the example file to. The default\nis None, in which case the default path for app data\nis used.\n\nforce\n\nbool, optional\n\nWhether to always download the example file. The default is\nFalse, in which case if the example file is cached, it\nis reused.\n\ndirectory\n\npython:tuple[python:str]\n\nPath under the PyAnsys Github examples repository.\n\nReturns\n\npython:tuple[python:str, python:str]\n\nTuple containing the filepath to use and the local filepath of the downloaded\ndirectory. The two are different in case of containers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansysdynacorelibtable_card",
        "title": "ansys.dyna.core.lib.table_card",
        "section": "ansys.dyna.core.lib.table_card",
        "text": "ansys.dyna.core.lib.table_card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#attributes",
        "title": "ansys.dyna.core.lib.table_card > Attributes",
        "section": "Attributes",
        "text": "CHECK_TYPE\n\nAttributes\nCHECK_TYPE"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#classes",
        "title": "ansys.dyna.core.lib.table_card > Classes",
        "section": "Classes",
        "text": "TableCard\nAbstract base class for all the implementations of keyword cards.\nClasses\nTableCard"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#functions",
        "title": "ansys.dyna.core.lib.table_card > Functions",
        "section": "Functions",
        "text": "try_initialize_table(card, name, **kwargs)\ncard is a TableCard or a TableCardGroup\nget_first_row(→ Dict[str, Any])\nGet the first row data from the kwargs.\nFunctions\ntry_initialize_table\nget_first_row"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.table_card > Module Contents",
        "section": "Module Contents",
        "text": "card is a TableCard or a TableCardGroup\nGet the first row data from the kwargs.\nBases: ansys.dyna.core.lib.card.Card\nAbstract base class for all the implementations of keyword cards.\nGet the card format type.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nReturns a console-friendly representation of the desired parameters for the card\nModule Contents\nansys.dyna.core.lib.card.Card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.CHECK_TYPE",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > CHECK_TYPE",
        "section": "Module Contents > CHECK_TYPE",
        "text": "ansys.dyna.core.lib.table_card.CHECK_TYPE = True\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.try_initialize_table",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > try_initialize_table",
        "section": "Module Contents > try_initialize_table",
        "text": "ansys.dyna.core.lib.table_card.try_initialize_table(card, name: str, **kwargs)\n\ncard is a TableCard or a TableCardGroup\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.get_first_row",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > get_first_row",
        "section": "Module Contents > get_first_row",
        "text": "ansys.dyna.core.lib.table_card.get_first_row(fields: List[ansys.dyna.core.lib.card.Field], **kwargs) -> Dict[str, Any]\n\nGet the first row data from the kwargs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > TableCard",
        "section": "Module Contents > TableCard",
        "text": "class ansys.dyna.core.lib.table_card.TableCard(fields: List[ansys.dyna.core.lib.card.Field], length_func, active_func: Callable = None, name: str = None, format: ansys.dyna.core.lib.format_type.format_type = format_type.default, **kwargs)\n\nBases: ansys.dyna.core.lib.card.Card\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nproperty table\n\n\n\n\n\nproperty format\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\nproperty bounded: bool\n\n\n\n\n\n__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.table",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > table",
        "section": "Module Contents > table",
        "text": "property table\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.format",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.read",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.write",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.bounded",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > bounded",
        "section": "Module Contents > bounded",
        "text": "property bounded: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/table_card/index",
        "href": "autoapi/ansys/dyna/core/lib/table_card/index.html#ansys.dyna.core.lib.table_card.TableCard.__repr__",
        "title": "ansys.dyna.core.lib.table_card > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/index",
        "href": "autoapi/ansys/dyna/core/lib/index.html#ansysdynacorelib",
        "title": "ansys.dyna.core.lib",
        "section": "ansys.dyna.core.lib",
        "text": "ansys.dyna.core.lib"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/index",
        "href": "autoapi/ansys/dyna/core/lib/index.html#submodules",
        "title": "ansys.dyna.core.lib > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansysdynacoresolvergrpc_tags",
        "title": "ansys.dyna.core.solver.grpc_tags",
        "section": "ansys.dyna.core.solver.grpc_tags",
        "text": "ansys.dyna.core.solver.grpc_tags"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#attributes",
        "title": "ansys.dyna.core.solver.grpc_tags > Attributes",
        "section": "Attributes",
        "text": "SWITCH\n\nRUN\n\nCWD\n\nPAUSE\n\nTIME\n\nRESUME\n\nREQUIRES_SYNC\n\nNODE\n\nSETLC\n\nACK\n\nNOTRUNNING\n\nRUNNING\n\nNOTFOUND\n\nAttributes\nSWITCH\nRUN\nCWD\nPAUSE\nTIME\nRESUME\nREQUIRES_SYNC\nNODE\nSETLC\nACK\nNOTRUNNING\nRUNNING\nNOTFOUND"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#module-contents",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.SWITCH",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > SWITCH",
        "section": "Module Contents > SWITCH",
        "text": "ansys.dyna.core.solver.grpc_tags.SWITCH = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.RUN",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > RUN",
        "section": "Module Contents > RUN",
        "text": "ansys.dyna.core.solver.grpc_tags.RUN = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.CWD",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > CWD",
        "section": "Module Contents > CWD",
        "text": "ansys.dyna.core.solver.grpc_tags.CWD = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.PAUSE",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > PAUSE",
        "section": "Module Contents > PAUSE",
        "text": "ansys.dyna.core.solver.grpc_tags.PAUSE = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.TIME",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > TIME",
        "section": "Module Contents > TIME",
        "text": "ansys.dyna.core.solver.grpc_tags.TIME = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.RESUME",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > RESUME",
        "section": "Module Contents > RESUME",
        "text": "ansys.dyna.core.solver.grpc_tags.RESUME = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.REQUIRES_SYNC",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > REQUIRES_SYNC",
        "section": "Module Contents > REQUIRES_SYNC",
        "text": "ansys.dyna.core.solver.grpc_tags.REQUIRES_SYNC = 1000\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.NODE",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > NODE",
        "section": "Module Contents > NODE",
        "text": "ansys.dyna.core.solver.grpc_tags.NODE = 1001\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.SETLC",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > SETLC",
        "section": "Module Contents > SETLC",
        "text": "ansys.dyna.core.solver.grpc_tags.SETLC = 1002\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.ACK",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > ACK",
        "section": "Module Contents > ACK",
        "text": "ansys.dyna.core.solver.grpc_tags.ACK = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.NOTRUNNING",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > NOTRUNNING",
        "section": "Module Contents > NOTRUNNING",
        "text": "ansys.dyna.core.solver.grpc_tags.NOTRUNNING = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.RUNNING",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > RUNNING",
        "section": "Module Contents > RUNNING",
        "text": "ansys.dyna.core.solver.grpc_tags.RUNNING = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/grpc_tags/index",
        "href": "autoapi/ansys/dyna/core/solver/grpc_tags/index.html#ansys.dyna.core.solver.grpc_tags.NOTFOUND",
        "title": "ansys.dyna.core.solver.grpc_tags > Module Contents > NOTFOUND",
        "section": "Module Contents > NOTFOUND",
        "text": "ansys.dyna.core.solver.grpc_tags.NOTFOUND = 3\n\n"
    },
    {
        "objectID": "examples/EM/em_resistive_heating_2d_isopots",
        "href": "examples/EM/em_resistive_heating_2d_isopots.html#resistive-heating-2d-connect-isopotential",
        "title": "Resistive heating 2D connect isopotential",
        "section": "Resistive heating 2D connect isopotential",
        "text": "This example shows how to use the connect_isopotential() method to\nconnect two parts. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.038 seconds)\nDownload Jupyter notebook: em_resistive_heating_2d_isopots.ipynb\nDownload Python source code: em_resistive_heating_2d_isopots.py\nDownload zipped: em_resistive_heating_2d_isopots.zip\nGallery generated by Sphinx-Gallery\nResistive heating 2D connect isopotential\nconnect_isopotential()\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_resistive_heating_2d_isopots.ipynb\nDownload Python source code: em_resistive_heating_2d_isopots.py\nDownload zipped: em_resistive_heating_2d_isopots.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/index",
        "href": "autoapi/ansys/dyna/core/run/index.html#ansysdynacorerun",
        "title": "ansys.dyna.core.run",
        "section": "ansys.dyna.core.run",
        "text": "ansys.dyna.core.run"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/index",
        "href": "autoapi/ansys/dyna/core/run/index.html#submodules",
        "title": "ansys.dyna.core.run > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#ansysdynacorelibtransformsnode_transform",
        "title": "ansys.dyna.core.lib.transforms.node_transform",
        "section": "ansys.dyna.core.lib.transforms.node_transform",
        "text": "Transformation handler for *NODE.\nansys.dyna.core.lib.transforms.node_transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#classes",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Classes",
        "section": "Classes",
        "text": "TransformNode\n\nClasses\nTransformNode"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#functions",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Functions",
        "section": "Functions",
        "text": "apply_rigid_transform(→ None)\n\nFunctions\napply_rigid_transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#module-contents",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.transforms.base_transform.Transform\nModule Contents\nansys.dyna.core.lib.transforms.base_transform.Transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#ansys.dyna.core.lib.transforms.node_transform.apply_rigid_transform",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Module Contents > apply_rigid_transform",
        "section": "Module Contents > apply_rigid_transform",
        "text": "ansys.dyna.core.lib.transforms.node_transform.apply_rigid_transform(mtx: numpy.ndarray, nodes: pandas.DataFrame) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#ansys.dyna.core.lib.transforms.node_transform.TransformNode",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Module Contents > TransformNode",
        "section": "Module Contents > TransformNode",
        "text": "class ansys.dyna.core.lib.transforms.node_transform.TransformNode(xform: ansys.dyna.core.keywords.IncludeTransform)\n\nBases: ansys.dyna.core.lib.transforms.base_transform.Transform\n\n\n\ntransform(keyword: ansys.dyna.core.keywords.Node) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/node_transform/index.html#ansys.dyna.core.lib.transforms.node_transform.TransformNode.transform",
        "title": "ansys.dyna.core.lib.transforms.node_transform > Module Contents > transform",
        "section": "Module Contents > transform",
        "text": "transform(keyword: ansys.dyna.core.keywords.Node) -> None\n\n"
    },
    {
        "objectID": "examples/ICFD/icfd_mesh_morphing",
        "href": "examples/ICFD/icfd_mesh_morphing.html#mesh-morphing",
        "title": "Mesh morphing",
        "section": "Mesh morphing",
        "text": "This example shows a simple ICFD problem with mesh morphing.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.039 seconds)\nDownload Jupyter notebook: icfd_mesh_morphing.ipynb\nDownload Python source code: icfd_mesh_morphing.py\nDownload zipped: icfd_mesh_morphing.zip\nGallery generated by Sphinx-Gallery\nMesh morphing\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_mesh_morphing.ipynb\nDownload Python source code: icfd_mesh_morphing.py\nDownload zipped: icfd_mesh_morphing.zip"
    },
    {
        "objectID": "index",
        "href": "index.html#pydyna-documentation--071",
        "title": "PyDYNA documentation  0.7.1",
        "section": "PyDYNA documentation  0.7.1",
        "text": "PyAnsys Python PyPI GH-CI Codecov MIT Black\nPyDYNA documentation  0.7.1"
    },
    {
        "objectID": "index",
        "href": "index.html#overview",
        "title": "PyDYNA documentation  0.7.1 > Overview",
        "section": "Overview",
        "text": "PyDYNA is a Pythonic package for providing a more convenient and complete way to\nbuild an Ansys DYNA input deck, submit it to the Ansys LS-DYNA solver, and\nfinally postprocess the results.\nPyDYNA contains three submodules, ansys.dyna.core.pre, ansys.dyna.core.solver, and ansys.dyna.core.run.\npre: This module provides highly abstracted APIs for creating and\nsetting up DYNA input decks. There are many classes supported, namely,\nDynaMech, DynaIGA, DynaICFD, DynaSALE, DynaEM,DynaNVH, DynaMaterial,\nDynaISPH, DynaICFD and DynaAirbag. Each of these classes can be used to generate\nLS-DYNA keywords. Since these classes have high-level abstraction, each function call\ngenerates groups of keywords needed to define an input in LS-DYNA.\nsolver: This API provides features to interact directly with the Ansys LS-DYNA solver.\nLS-DYNA is primarily a batch solver with very limited interactive capabilities, the\nsolver service provides a way to push input files to the LS-DYNA solver, monitor the state\nof the running job, change the value of a load curve and finally retrieve result files back from\nthe server\nrun: This module provides the ability to start the LS-DYNA solver. This does not require any\nclient-server library or Docker container.\nOnce you have results, you can use the Ansys Data Processing Framework (DPF),\nwhich is designed to provide numerical simulation users and engineers\nwith a toolbox for accessing and transforming simulation data. DPF\ncan access data from Ansys solver files and from several files with neutral formats,\nincluding CSV, HDF5, and VTK. Using DPF’s various operators,\nyou can manipulate and transform this data.\nThe ansys-dpf-post package provides\na simplified Python interface to DPF, thus enabling rapid postprocessing\nwithout ever leaving a Python environment. For more information on DPF-Post,\nsee the DPF-Post documentation.\nOverview\nansys.dyna.core.pre\nansys.dyna.core.solver\nansys.dyna.core.run\npre\nsolver\nsolver\nrun"
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-issues",
        "title": "PyDYNA documentation  0.7.1 > Documentation and issues",
        "section": "Documentation and issues",
        "text": "Documentation for the latest stable release of PyDyna is hosted at PyDYNA documentation.\nFor examples on how to use PyDYNA, see Examples\nin the PyDYNA documentation.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from\nviewing the documentation for the latest stable release to viewing the documentation for the\ndevelopment version or previously released versions.\nOn the PyDYNA Issues page, you can create issues to\nreport bugs and request new features. On the PyDYNA Discussions\npage or the Discussions page on the Ansys Developer portal,\nyou can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nDocumentation and issues"
    },
    {
        "objectID": "index",
        "href": "index.html#license",
        "title": "PyDYNA documentation  0.7.1 > License",
        "section": "License",
        "text": "PyDYNA is licensed under the MIT license.\nPyDYNA makes no commercial claim over Ansys whatsoever. This library extends the functionality of\nAnsys LS-DYNA by adding a Python interface to LS-DYNA without changing the core behavior or\nlicense of the original software. The use of the interactive control of PyDYNA requires a legally\nlicensed local copy of LS-DYNA.\nFor more information on LS-DYNA, see the\nAnsys LS-DYNA\npage on the Ansys website.\nLicense"
    },
    {
        "objectID": "examples/ICFD/icfd_free_convection_flow",
        "href": "examples/ICFD/icfd_free_convection_flow.html#free-convection-flow",
        "title": "Free convection flow",
        "section": "Free convection flow",
        "text": "This example shows a simple ICFD forced-convection input deck with a coarse mesh.\nThe executable file for LS-DYNA is `` ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe``.\nTotal running time of the script: (0 minutes 0.034 seconds)\nDownload Jupyter notebook: icfd_free_convection_flow.ipynb\nDownload Python source code: icfd_free_convection_flow.py\nDownload zipped: icfd_free_convection_flow.zip\nGallery generated by Sphinx-Gallery\nFree convection flow\nDownload Jupyter notebook: icfd_free_convection_flow.ipynb\nDownload Python source code: icfd_free_convection_flow.py\nDownload zipped: icfd_free_convection_flow.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index.html#ansysdynacorelibtransformselement_transform",
        "title": "ansys.dyna.core.lib.transforms.element_transform",
        "section": "ansys.dyna.core.lib.transforms.element_transform",
        "text": "ansys.dyna.core.lib.transforms.element_transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index.html#classes",
        "title": "ansys.dyna.core.lib.transforms.element_transform > Classes",
        "section": "Classes",
        "text": "TransformElement\n\nClasses\nTransformElement"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index.html#module-contents",
        "title": "ansys.dyna.core.lib.transforms.element_transform > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.transform.Transform\nModule Contents\nansys.dyna.core.lib.transform.Transform"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index.html#ansys.dyna.core.lib.transforms.element_transform.TransformElement",
        "title": "ansys.dyna.core.lib.transforms.element_transform > Module Contents > TransformElement",
        "section": "Module Contents > TransformElement",
        "text": "class ansys.dyna.core.lib.transforms.element_transform.TransformElement(xform: ansys.dyna.core.keywords.IncludeTransform)\n\nBases: ansys.dyna.core.lib.transform.Transform\n\n\n\ntransform(keyword: Any)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/element_transform/index.html#ansys.dyna.core.lib.transforms.element_transform.TransformElement.transform",
        "title": "ansys.dyna.core.lib.transforms.element_transform > Module Contents > transform",
        "section": "Module Contents > transform",
        "text": "transform(keyword: Any)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansysdynacorepreexamplesexamples",
        "title": "ansys.dyna.core.pre.examples.examples",
        "section": "ansys.dyna.core.pre.examples.examples",
        "text": "Examples result files.\nansys.dyna.core.pre.examples.examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#attributes",
        "title": "ansys.dyna.core.pre.examples.examples > Attributes",
        "section": "Attributes",
        "text": "airbag_deploy\n\nem_railgun\n\nem_resistive_heating\n\nem_resistive_heating_2d\n\nem_resistive_heating_2d_isopots\n\nem_resistive_heating_2d_multi_isopots\n\nem_rlc_isopotential\n\nem_rlc_define_func\n\nbelted_dummy\n\nball_plate\n\ncylinder_flow\n\ninternal_3d_flow\n\nplate_flow\n\nmesh_size\n\nthermal_flow\n\nfree_convection_flow\n\ndam_break\n\ndriven_cavity\n\nweak_fsi\n\nstrong_fsi\n\nimposed_move\n\nmesh_adaptivity\n\nmesh_morphing\n\ndem_coupling\n\nsloshing\n\ncamry_rc\n\nsale_efp\n\nisph_rigidtest\n\nnvh_frf_plate_damping\n\nnvh_frf_solid\n\nthermal_stress\n\nAttributes\nairbag_deploy\nem_railgun\nem_resistive_heating\nem_resistive_heating_2d\nem_resistive_heating_2d_isopots\nem_resistive_heating_2d_multi_isopots\nem_rlc_isopotential\nem_rlc_define_func\nbelted_dummy\nball_plate\ncylinder_flow\ninternal_3d_flow\nplate_flow\nmesh_size\nthermal_flow\nfree_convection_flow\ndam_break\ndriven_cavity\nweak_fsi\nstrong_fsi\nimposed_move\nmesh_adaptivity\nmesh_morphing\ndem_coupling\nsloshing\ncamry_rc\nsale_efp\nisph_rigidtest\nnvh_frf_plate_damping\nnvh_frf_solid\nthermal_stress"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#module-contents",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.airbag_deploy",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > airbag_deploy",
        "section": "Module Contents > airbag_deploy",
        "text": "ansys.dyna.core.pre.examples.examples.airbag_deploy\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_railgun",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_railgun",
        "section": "Module Contents > em_railgun",
        "text": "ansys.dyna.core.pre.examples.examples.em_railgun\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_resistive_heating",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_resistive_heating",
        "section": "Module Contents > em_resistive_heating",
        "text": "ansys.dyna.core.pre.examples.examples.em_resistive_heating\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_resistive_heating_2d",
        "section": "Module Contents > em_resistive_heating_2d",
        "text": "ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d_isopots",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_resistive_heating_2d_isopots",
        "section": "Module Contents > em_resistive_heating_2d_isopots",
        "text": "ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d_isopots\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d_multi_isopots",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_resistive_heating_2d_multi_isopots",
        "section": "Module Contents > em_resistive_heating_2d_multi_isopots",
        "text": "ansys.dyna.core.pre.examples.examples.em_resistive_heating_2d_multi_isopots\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_rlc_isopotential",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_rlc_isopotential",
        "section": "Module Contents > em_rlc_isopotential",
        "text": "ansys.dyna.core.pre.examples.examples.em_rlc_isopotential\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.em_rlc_define_func",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > em_rlc_define_func",
        "section": "Module Contents > em_rlc_define_func",
        "text": "ansys.dyna.core.pre.examples.examples.em_rlc_define_func\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.belted_dummy",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > belted_dummy",
        "section": "Module Contents > belted_dummy",
        "text": "ansys.dyna.core.pre.examples.examples.belted_dummy\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.ball_plate",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > ball_plate",
        "section": "Module Contents > ball_plate",
        "text": "ansys.dyna.core.pre.examples.examples.ball_plate\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.cylinder_flow",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > cylinder_flow",
        "section": "Module Contents > cylinder_flow",
        "text": "ansys.dyna.core.pre.examples.examples.cylinder_flow\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.internal_3d_flow",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > internal_3d_flow",
        "section": "Module Contents > internal_3d_flow",
        "text": "ansys.dyna.core.pre.examples.examples.internal_3d_flow\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.plate_flow",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > plate_flow",
        "section": "Module Contents > plate_flow",
        "text": "ansys.dyna.core.pre.examples.examples.plate_flow\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.mesh_size",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > mesh_size",
        "section": "Module Contents > mesh_size",
        "text": "ansys.dyna.core.pre.examples.examples.mesh_size\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.thermal_flow",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > thermal_flow",
        "section": "Module Contents > thermal_flow",
        "text": "ansys.dyna.core.pre.examples.examples.thermal_flow\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.free_convection_flow",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > free_convection_flow",
        "section": "Module Contents > free_convection_flow",
        "text": "ansys.dyna.core.pre.examples.examples.free_convection_flow\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.dam_break",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > dam_break",
        "section": "Module Contents > dam_break",
        "text": "ansys.dyna.core.pre.examples.examples.dam_break\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.driven_cavity",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > driven_cavity",
        "section": "Module Contents > driven_cavity",
        "text": "ansys.dyna.core.pre.examples.examples.driven_cavity\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.weak_fsi",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > weak_fsi",
        "section": "Module Contents > weak_fsi",
        "text": "ansys.dyna.core.pre.examples.examples.weak_fsi\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.strong_fsi",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > strong_fsi",
        "section": "Module Contents > strong_fsi",
        "text": "ansys.dyna.core.pre.examples.examples.strong_fsi\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.imposed_move",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > imposed_move",
        "section": "Module Contents > imposed_move",
        "text": "ansys.dyna.core.pre.examples.examples.imposed_move\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.mesh_adaptivity",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > mesh_adaptivity",
        "section": "Module Contents > mesh_adaptivity",
        "text": "ansys.dyna.core.pre.examples.examples.mesh_adaptivity\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.mesh_morphing",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > mesh_morphing",
        "section": "Module Contents > mesh_morphing",
        "text": "ansys.dyna.core.pre.examples.examples.mesh_morphing\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.dem_coupling",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > dem_coupling",
        "section": "Module Contents > dem_coupling",
        "text": "ansys.dyna.core.pre.examples.examples.dem_coupling\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.sloshing",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > sloshing",
        "section": "Module Contents > sloshing",
        "text": "ansys.dyna.core.pre.examples.examples.sloshing\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.camry_rc",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > camry_rc",
        "section": "Module Contents > camry_rc",
        "text": "ansys.dyna.core.pre.examples.examples.camry_rc\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.sale_efp",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > sale_efp",
        "section": "Module Contents > sale_efp",
        "text": "ansys.dyna.core.pre.examples.examples.sale_efp\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.isph_rigidtest",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > isph_rigidtest",
        "section": "Module Contents > isph_rigidtest",
        "text": "ansys.dyna.core.pre.examples.examples.isph_rigidtest\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.nvh_frf_plate_damping",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > nvh_frf_plate_damping",
        "section": "Module Contents > nvh_frf_plate_damping",
        "text": "ansys.dyna.core.pre.examples.examples.nvh_frf_plate_damping\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.nvh_frf_solid",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > nvh_frf_solid",
        "section": "Module Contents > nvh_frf_solid",
        "text": "ansys.dyna.core.pre.examples.examples.nvh_frf_solid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/examples/index.html#ansys.dyna.core.pre.examples.examples.thermal_stress",
        "title": "ansys.dyna.core.pre.examples.examples > Module Contents > thermal_stress",
        "section": "Module Contents > thermal_stress",
        "text": "ansys.dyna.core.pre.examples.examples.thermal_stress\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansysdynacorepredynasale",
        "title": "ansys.dyna.core.pre.dynasale",
        "section": "ansys.dyna.core.pre.dynasale",
        "text": "Module for creating a S-ALE (Structured ALE) DYNA input deck.\nansys.dyna.core.pre.dynasale"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#classes",
        "title": "ansys.dyna.core.pre.dynasale > Classes",
        "section": "Classes",
        "text": "AdvectionMethod\nCreate a collection of name/value pairs.\nFillDirection\nCreate a collection of name/value pairs.\nControlPoint\nProvides spacing information for generating a 3D S-ALE mesh.\nStructuredMesh\nGenerates a structured 2D or 3D mesh and invokes the S-ALE solver.\nDynaSALE\nSets up the S-ALE simulation process.\nClasses\nAdvectionMethod\nFillDirection\nControlPoint\nStructuredMesh\nDynaSALE"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nProvides spacing information for generating a 3D S-ALE mesh.\nControl point node number.\nControl point position.\nRatio for progressive mesh spacing.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nGenerates a structured 2D or 3D mesh and invokes the S-ALE solver.\nPerform volume-filling operations on a S-ALE mesh.\nMaterial name.\nGeometry type. The default is \"Null\". Options are:\nBOXCOR\nBOXCPT\nCYLINDER\nPARTSET\nPART\nPLANE\nSEGSET\nSPHERE\nNumber of sampling points. The default is 4.\nList of values having different definitions for different options.\nThe default is [0, 0, 0, 0, 0].\nFlag for whether to fill inside or outside of the geometry. The\ndefault is INSIDE_THE_GEOMETRY.\nFlag for assigning the initial velocity to the material filling the domain.\nThe default is 0.\nTrue when successful, False when failed.\nRefine existing S-ALE meshes.\nRefinement factor for the x-direction. The default is 1.\nRefinement factor for the y-direction. The default is 1.\nRefinement factor for the z-direction. The default is 1.\nDefine a point for initiating the location of a high-explosive detonation.\nCoordinates (x,y,z) of the detonation point.\nCreate a mesh.\nBases: ansys.dyna.core.pre.dynabase.DynaBase\nSets up the S-ALE simulation process.\nSet the time for ending the simulation.\nTime for ending the simulation.\nTrue when successful, False when failed.\nRequest binary output.\nTime interval between output states.\nTrue when successful, False when failed.\nSet the analysis type.\nTotal time of simulation for the fluid problem. The\ndefault is 1.\nTime step for the fluid problem. The default is\nDONOR_CELL_WITH_HALF_INDEX_SHIFT.\nReference pressure for computing the internal forces.\nThe default is 0.\nTrue when successful, False when failed.\nObtain output files containing the results.\nTime interval between outputs of part energies. The\ndefault is 0.\nTime interval between outputs of global statistics and energies.\nThe default is 0.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nModule Contents\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.Enum\npython:int\npython:float\npython:float\nansys.dyna.core.pre.dynabase.BaseObj\npython:str\npython:str\n\"Null\"\npython:int\noptional\n4\npython:list\n[0, 0, 0, 0, 0]\npython:int\noptional\nINSIDE_THE_GEOMETRY\npython:int\noptional\n0\nTrue\nFalse\npython:int\noptional\n1\npython:int\noptional\n1\npython:int\noptional\n1\nPoint\nansys.dyna.core.pre.dynabase.DynaBase\npython:float\nTrue\nFalse\npython:float\nTrue\nFalse\npython:float\noptional\n1\npython:float\noptional\nDONOR_CELL_WITH_HALF_INDEX_SHIFT\npython:int\noptional\n0\nTrue\nFalse\npython:float\noptional\n0\npython:float\noptional\n0\nTrue\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.AdvectionMethod",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > AdvectionMethod",
        "section": "Module Contents > AdvectionMethod",
        "text": "class ansys.dyna.core.pre.dynasale.AdvectionMethod(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nDONOR_CELL_WITH_HALF_INDEX_SHIFT = 1\n\n\n\n\n\nVAN_LEER_WITH_HIS = 2\n\n\n\n\n\nDONOR_CELL_WITH_HIS = 3\n\n\n\n\n\nFINITE_VOLUME_METHOD = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.AdvectionMethod.DONOR_CELL_WITH_HALF_INDEX_SHIFT",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > DONOR_CELL_WITH_HALF_INDEX_SHIFT",
        "section": "Module Contents > DONOR_CELL_WITH_HALF_INDEX_SHIFT",
        "text": "DONOR_CELL_WITH_HALF_INDEX_SHIFT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.AdvectionMethod.VAN_LEER_WITH_HIS",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > VAN_LEER_WITH_HIS",
        "section": "Module Contents > VAN_LEER_WITH_HIS",
        "text": "VAN_LEER_WITH_HIS = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.AdvectionMethod.DONOR_CELL_WITH_HIS",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > DONOR_CELL_WITH_HIS",
        "section": "Module Contents > DONOR_CELL_WITH_HIS",
        "text": "DONOR_CELL_WITH_HIS = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.AdvectionMethod.FINITE_VOLUME_METHOD",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > FINITE_VOLUME_METHOD",
        "section": "Module Contents > FINITE_VOLUME_METHOD",
        "text": "FINITE_VOLUME_METHOD = 6\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.FillDirection",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > FillDirection",
        "section": "Module Contents > FillDirection",
        "text": "class ansys.dyna.core.pre.dynasale.FillDirection(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nINSIDE_THE_GEOMETRY = 0\n\n\n\n\n\nOUTSIDE_THE_GEOMETRY = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.FillDirection.INSIDE_THE_GEOMETRY",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > INSIDE_THE_GEOMETRY",
        "section": "Module Contents > INSIDE_THE_GEOMETRY",
        "text": "INSIDE_THE_GEOMETRY = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.FillDirection.OUTSIDE_THE_GEOMETRY",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > OUTSIDE_THE_GEOMETRY",
        "section": "Module Contents > OUTSIDE_THE_GEOMETRY",
        "text": "OUTSIDE_THE_GEOMETRY = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.ControlPoint",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > ControlPoint",
        "section": "Module Contents > ControlPoint",
        "text": "class ansys.dyna.core.pre.dynasale.ControlPoint(number, position, ratio)\n\nProvides spacing information for generating a 3D S-ALE mesh.\n\nParameters\n\nnumber\n\npython:int\n\nControl point node number.\n\nposition\n\npython:float\n\nControl point position.\n\nratio\n\npython:float\n\nRatio for progressive mesh spacing.\n\n!! processed by numpydoc !!\n\n\n\nnumber\n\n\n\n\n\nposition\n\n\n\n\n\nratio\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.ControlPoint.number",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > number",
        "section": "Module Contents > number",
        "text": "number\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.ControlPoint.position",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > position",
        "section": "Module Contents > position",
        "text": "position\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.ControlPoint.ratio",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > ratio",
        "section": "Module Contents > ratio",
        "text": "ratio\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > StructuredMesh",
        "section": "Module Contents > StructuredMesh",
        "text": "class ansys.dyna.core.pre.dynasale.StructuredMesh(control_points_x, control_points_y, control_points_z)\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nGenerates a structured 2D or 3D mesh and invokes the S-ALE solver.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncontrol_points_x\n\n\n\n\n\ncontrol_points_y\n\n\n\n\n\ncontrol_points_z\n\n\n\n\n\nrefine_factor_x = 1\n\n\n\n\n\nrefine_factor_y = 1\n\n\n\n\n\nrefine_factor_z = 1\n\n\n\n\n\nfillings = []\n\n\n\n\n\ntype = 'structured_mesh'\n\n\n\n\n\nfill(material, geometry_type='NULL', nsample=4, define_geometry_parameters=[0, 0, 0, 0, 0], inout=FillDirection.INSIDE_THE_GEOMETRY, vid=0, reference_pressure=0)\n\nPerform volume-filling operations on a S-ALE mesh.\n\nParameters\n\nmaterial_name\n\npython:str\n\nMaterial name.\n\ngeometry_type\n\npython:str\n\nGeometry type. The default is \"Null\". Options are:\n\nBOXCOR\n\nBOXCPT\n\nCYLINDER\n\nPARTSET\n\nPART\n\nPLANE\n\nSEGSET\n\nSPHERE\n\nnsample\n\npython:int, optional\n\nNumber of sampling points. The default is 4.\n\ndefine_geometry_parameters\n\npython:list\n\nList of values having different definitions for different options.\nThe default is [0, 0, 0, 0, 0].\n\nin_out\n\npython:int, optional\n\nFlag for whether to fill inside or outside of the geometry. The\ndefault is INSIDE_THE_GEOMETRY.\n\nvid\n\npython:int, optional\n\nFlag for assigning the initial velocity to the material filling the domain.\nThe default is 0.\n\nreference_pressure\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nrefine(refine_factor_x=1, refine_factor_y=1, refine_factor_z=1)\n\nRefine existing S-ALE meshes.\n\nParameters\n\nrefine_factor_x\n\npython:int, optional\n\nRefinement factor for the x-direction. The default is 1.\n\nrefine_factor_y\n\npython:int, optional\n\nRefinement factor for the y-direction. The default is 1.\n\nrefine_factor_z\n\npython:int, optional\n\nRefinement factor for the z-direction. The default is 1.\n\n!! processed by numpydoc !!\n\n\n\ninitial_detonation(detonation_point)\n\nDefine a point for initiating the location of a high-explosive detonation.\n\nParameters\n\ndetonation_point\n\nPoint\n\nCoordinates (x,y,z) of the detonation point.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.stub",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.control_points_x",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > control_points_x",
        "section": "Module Contents > control_points_x",
        "text": "control_points_x\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.control_points_y",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > control_points_y",
        "section": "Module Contents > control_points_y",
        "text": "control_points_y\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.control_points_z",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > control_points_z",
        "section": "Module Contents > control_points_z",
        "text": "control_points_z\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.refine_factor_x",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > refine_factor_x",
        "section": "Module Contents > refine_factor_x",
        "text": "refine_factor_x = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.refine_factor_y",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > refine_factor_y",
        "section": "Module Contents > refine_factor_y",
        "text": "refine_factor_y = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.refine_factor_z",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > refine_factor_z",
        "section": "Module Contents > refine_factor_z",
        "text": "refine_factor_z = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.fillings",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > fillings",
        "section": "Module Contents > fillings",
        "text": "fillings = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.type",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'structured_mesh'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.fill",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > fill",
        "section": "Module Contents > fill",
        "text": "fill(material, geometry_type='NULL', nsample=4, define_geometry_parameters=[0, 0, 0, 0, 0], inout=FillDirection.INSIDE_THE_GEOMETRY, vid=0, reference_pressure=0)\n\nPerform volume-filling operations on a S-ALE mesh.\n\nParameters\n\nmaterial_name\n\npython:str\n\nMaterial name.\n\ngeometry_type\n\npython:str\n\nGeometry type. The default is \"Null\". Options are:\n\nBOXCOR\n\nBOXCPT\n\nCYLINDER\n\nPARTSET\n\nPART\n\nPLANE\n\nSEGSET\n\nSPHERE\n\nnsample\n\npython:int, optional\n\nNumber of sampling points. The default is 4.\n\ndefine_geometry_parameters\n\npython:list\n\nList of values having different definitions for different options.\nThe default is [0, 0, 0, 0, 0].\n\nin_out\n\npython:int, optional\n\nFlag for whether to fill inside or outside of the geometry. The\ndefault is INSIDE_THE_GEOMETRY.\n\nvid\n\npython:int, optional\n\nFlag for assigning the initial velocity to the material filling the domain.\nThe default is 0.\n\nreference_pressure\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.refine",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > refine",
        "section": "Module Contents > refine",
        "text": "refine(refine_factor_x=1, refine_factor_y=1, refine_factor_z=1)\n\nRefine existing S-ALE meshes.\n\nParameters\n\nrefine_factor_x\n\npython:int, optional\n\nRefinement factor for the x-direction. The default is 1.\n\nrefine_factor_y\n\npython:int, optional\n\nRefinement factor for the y-direction. The default is 1.\n\nrefine_factor_z\n\npython:int, optional\n\nRefinement factor for the z-direction. The default is 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.initial_detonation",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > initial_detonation",
        "section": "Module Contents > initial_detonation",
        "text": "initial_detonation(detonation_point)\n\nDefine a point for initiating the location of a high-explosive detonation.\n\nParameters\n\ndetonation_point\n\nPoint\n\nCoordinates (x,y,z) of the detonation point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.StructuredMesh.create",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > DynaSALE",
        "section": "Module Contents > DynaSALE",
        "text": "class ansys.dyna.core.pre.dynasale.DynaSALE\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nSets up the S-ALE simulation process.\n\n!! processed by numpydoc !!\n\n\n\nset_termination(endtime)\n\nSet the time for ending the simulation.\n\nParameters\n\nendtime\n\npython:float\n\nTime for ending the simulation.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_output_interval(database_plot_interval)\n\nRequest binary output.\n\nParameters\n\ndatabase_plot_interval\n\npython:float\n\nTime interval between output states.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_analysis_type(num_of_cycle=1, method=AdvectionMethod.DONOR_CELL_WITH_HALF_INDEX_SHIFT, background_pressure=0)\n\nSet the analysis type.\n\nParameters\n\nnum_of_cycle\n\npython:float, optional\n\nTotal time of simulation for the fluid problem. The\ndefault is 1.\n\nmethod\n\npython:float, optional\n\nTime step for the fluid problem. The default is\nDONOR_CELL_WITH_HALF_INDEX_SHIFT.\n\nbackground_pressure\n\npython:int, optional\n\nReference pressure for computing the internal forces.\nThe default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_output_database(matsum=0, glstat=0)\n\nObtain output files containing the results.\n\nParameters\n\nmatsum\n\npython:float, optional\n\nTime interval between outputs of part energies. The\ndefault is 0.\n\nglstat\n\npython:float, optional\n\nTime interval between outputs of global statistics and energies.\nThe default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE.set_termination",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > set_termination",
        "section": "Module Contents > set_termination",
        "text": "set_termination(endtime)\n\nSet the time for ending the simulation.\n\nParameters\n\nendtime\n\npython:float\n\nTime for ending the simulation.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE.set_output_interval",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > set_output_interval",
        "section": "Module Contents > set_output_interval",
        "text": "set_output_interval(database_plot_interval)\n\nRequest binary output.\n\nParameters\n\ndatabase_plot_interval\n\npython:float\n\nTime interval between output states.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE.set_analysis_type",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > set_analysis_type",
        "section": "Module Contents > set_analysis_type",
        "text": "set_analysis_type(num_of_cycle=1, method=AdvectionMethod.DONOR_CELL_WITH_HALF_INDEX_SHIFT, background_pressure=0)\n\nSet the analysis type.\n\nParameters\n\nnum_of_cycle\n\npython:float, optional\n\nTotal time of simulation for the fluid problem. The\ndefault is 1.\n\nmethod\n\npython:float, optional\n\nTime step for the fluid problem. The default is\nDONOR_CELL_WITH_HALF_INDEX_SHIFT.\n\nbackground_pressure\n\npython:int, optional\n\nReference pressure for computing the internal forces.\nThe default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE.set_output_database",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > set_output_database",
        "section": "Module Contents > set_output_database",
        "text": "set_output_database(matsum=0, glstat=0)\n\nObtain output files containing the results.\n\nParameters\n\nmatsum\n\npython:float, optional\n\nTime interval between outputs of part energies. The\ndefault is 0.\n\nglstat\n\npython:float, optional\n\nTime interval between outputs of global statistics and energies.\nThe default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasale/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasale/index.html#ansys.dyna.core.pre.dynasale.DynaSALE.save_file",
        "title": "ansys.dyna.core.pre.dynasale > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#thermal-stress-example",
        "title": "Thermal stress example",
        "section": "Thermal stress example",
        "text": "This example shows how to create a thermal stress model with the PyDYNA pre service.\nThe executable file for LS-DYNA is ls-dyna_smp_s_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nThermal stress example\npre\nls-dyna_smp_s_R13.0_365-gf8a97bda2a_winx64_ifort190.exe"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#perform-required-imports",
        "title": "Thermal stress example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#start-the-pre-service",
        "title": "Thermal stress example > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nrefefring to the README.rst file in this server package.\nOnce the pre servic is running, you can connect a client to it using\nthe hostname and the port. This example uses the default local host and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#start-the-solution-workflow",
        "title": "Thermal stress example > Start the solution workflow",
        "section": "Start the solution workflow",
        "text": "NODES and ELEMENTS are read in from the thermal_stress.k file. This file also has the\nPART defined in it, but the section and material fields are empty to begin with.\nStart the solution workflow\nthermal_stress.k"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#set-simulation-termination-time",
        "title": "Thermal stress example > Set simulation termination time",
        "section": "Set simulation termination time",
        "text": "Set the simulation termination time.\nTo invoke the transient thermal solver, set the thermal analysis type for\nCONTROL_SOLUTION to 2 by ThermalAnalysisType.TRANSIENT.\nSet simulation termination time\nCONTROL_SOLUTION\nThermalAnalysisType.TRANSIENT"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#define-material-and-section-properties",
        "title": "Thermal stress example > Define material and section properties",
        "section": "Define material and section properties",
        "text": "Define the MAT_4 material, which can have temperature-dependent\nproperties. For the MAT_THERMAL_ISOTROPIC property, which is associated\nwith the same part, define the specific heat, thermal conductivity, and thermal\ngeneration rate.\nDefine material and section properties\nMAT_4\nMAT_THERMAL_ISOTROPIC"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#set-initial-conditions",
        "title": "Thermal stress example > Set initial conditions",
        "section": "Set initial conditions",
        "text": "Initialize nodes 1 through 8 with a temperature of 10 degrees.\nSet initial conditions"
    },
    {
        "objectID": "examples/Thermal/thermal_stress",
        "href": "examples/Thermal/thermal_stress.html#define-output-frequencies-and-save-input-file",
        "title": "Thermal stress example > Define output frequencies and save input file",
        "section": "Define output frequencies and save input file",
        "text": "Define output frequencies and save the input file to disk.\nTotal running time of the script: (0 minutes 0.039 seconds)\nDownload Jupyter notebook: thermal_stress.ipynb\nDownload Python source code: thermal_stress.py\nDownload zipped: thermal_stress.zip\nGallery generated by Sphinx-Gallery\nDefine output frequencies and save input file\nDownload Jupyter notebook: thermal_stress.ipynb\nDownload Python source code: thermal_stress.py\nDownload zipped: thermal_stress.zip"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#taylor-bar-example",
        "title": "Taylor bar example",
        "section": "Taylor bar example",
        "text": "This example is inspired by the “Taylor Bar” example on the\nLS-DYNA Knowledge Base site. It shows how\nto use PyDyna to create a keyword file for LS-DYNA and solve it within\na Pythonic environment.\nTaylor bar example"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#perform-required-imports",
        "title": "Taylor bar example > Perform required imports",
        "section": "Perform required imports",
        "text": "Import required packages, including those for the keywords, deck, and solver.\nPerform required imports"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#create-a-deck-and-keywords",
        "title": "Taylor bar example > Create a deck and keywords",
        "section": "Create a deck and keywords",
        "text": "Create a deck, which is the container for all the keywords.\nThen, create and append individual keywords to the deck.\nCreate a deck and keywords"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#define-the-dyna-solver-function",
        "title": "Taylor bar example > Define the Dyna solver function",
        "section": "Define the Dyna solver function",
        "text": "Define the Dyna solver function"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#define-the-dpf-output-function",
        "title": "Taylor bar example > Define the DPF output function",
        "section": "Define the DPF output function",
        "text": "Define the DPF output function"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#view-the-model",
        "title": "Taylor bar example > View the model",
        "section": "View the model",
        "text": "etc etc\nView the model"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#run-a-parametric-solve",
        "title": "Taylor bar example > Run a parametric solve",
        "section": "Run a parametric solve",
        "text": "etc etc\nRun a parametric solve"
    },
    {
        "objectID": "examples/Taylor_Bar/plot_taylor_bar",
        "href": "examples/Taylor_Bar/plot_taylor_bar.html#generate-graphical-output",
        "title": "Taylor bar example > Generate graphical output",
        "section": "Generate graphical output",
        "text": "etc etc\nTotal running time of the script: (0 minutes 48.127 seconds)\nDownload Jupyter notebook: plot_taylor_bar.ipynb\nDownload Python source code: plot_taylor_bar.py\nDownload zipped: plot_taylor_bar.zip\nGallery generated by Sphinx-Gallery\nGenerate graphical output\nDownload Jupyter notebook: plot_taylor_bar.ipynb\nDownload Python source code: plot_taylor_bar.py\nDownload zipped: plot_taylor_bar.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansysdynacorelibdeck_plotter",
        "title": "ansys.dyna.core.lib.deck_plotter",
        "section": "ansys.dyna.core.lib.deck_plotter",
        "text": "ansys.dyna.core.lib.deck_plotter"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#functions",
        "title": "ansys.dyna.core.lib.deck_plotter > Functions",
        "section": "Functions",
        "text": "get_nid_to_index_mapping(→ Dict)\nGiven a node id, output the node index as a dict\nmerge_keywords(→ Tuple[pandas.DataFrame, Dict])\nMerge mesh keywords.\nprocess_nodes(nodes_df)\n\nshell_facet_array(→ numpy.array)\nGet the shell facet array from the DataFrame.\nsolid_array(solids)\nGet the solid array from the DataFrame.\nline_array(→ numpy.array)\nConvert DataFrame to lines array.\nmap_facet_nid_to_index(→ numpy.array)\nConvert mapping to numpy array.\nextract_shell_facets(shells, mapping)\nExtract shell faces from DataFrame.\nextract_lines(→ numpy.ndarray)\nExtract lines from DataFrame.\nextract_solids(solids, mapping)\n\nget_pyvista()\n\nget_polydata(deck[, cwd])\nCreate the PolyData Object for plotting from a given deck with nodes and elements.\nplot_deck(deck, **args)\nPlot the deck.\nFunctions\nget_nid_to_index_mapping\nmerge_keywords\nprocess_nodes\nshell_facet_array\nsolid_array\nline_array\nmap_facet_nid_to_index\nextract_shell_facets\nextract_lines\nextract_solids\nget_pyvista\nget_polydata\nplot_deck"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#module-contents",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents",
        "section": "Module Contents",
        "text": "Given a node id, output the node index as a dict\nMerge mesh keywords.\nGiven a deck, merges specific keywords (NODE, ELEMENT_SHELL, ELEMENT_BEAM, ELEMENT_SOLID)\nand returns tham as data frames.\nGet the shell facet array from the DataFrame.\nFacets are a pandas frame that is a sequence of integers\nor NAs with max length of 8.\nvalid rows contain 3,4,6, or 8 items consecutive from the\nleft.  we don’t plot quadratic edges so 6/8 collapse to 3/4\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 4 or 5 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,3]=>[3,1,2,3]\n[1,2,3,0]=>[3,1,2,3]\n[1,2,3,NA]=>[3,1,2,3]\nGet the solid array from the DataFrame.\nSolids are a pandas frame that is a sequence of integers\nor NAs with max length of 28.\nvalid rows contain 3, 4, 6, or 8 items consecutive from the\nleft.  We don’t plot quadratic edges so 6/8 collapse to 3/4\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 4 or 5 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,3]=>[3,1,2,3]\n[1,2,3,0]=>[3,1,2,3]\n[1,2,3,NA]=>[3,1,2,3]\nConvert DataFrame to lines array.\nlines is a pandas frame that is a sequence of integers\nor NAs with max length of 2.\nvalid rows contain 2 items consecutive from the\nleft.\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 3 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,]=>[2,1,2]\n[1,2,3,0]=>[]\n[1,2,3,NA]=>[]\nConvert mapping to numpy array.\nGiven a flat list of facets or lines, use the mapping from nid to python index\nto output the numbering system for pyvista from the numbering from dyna\nExtract shell faces from DataFrame.\nShells table comes in with the form\n|  eid  | nid1 | nid2 | nid3 | nid4\n|  1    | 10   | 11   | 12   |\n|  20   | 21   | 22   | 23   | 24\nbut the array needed for pyvista polydata is\nof the form where each element is prefixed by the length of the element node list\n[3,10,11,12,4,21,22,23,24]\nTake individual rows, extract the appropriate nid’s and output a flat list of\nfacets for pyvista\nExtract lines from DataFrame.\nBeams table comes in with the form with extra information not supported,\n|  eid  | nid1 | nid2\n|  1    | 10   | 11\n|  20   | 21   | 22\nwe only care about nid 1 and 2\nbut the array needed for pyvista polydata is the same as in extract facets\nof the form where each element is prefixed by the length of the element node list\n[2,10,11,2,21,22]\nTake individual rows, extract the appropriate nid’s and output a flat list of\nfacets for pyvista\nCreate the PolyData Object for plotting from a given deck with nodes and elements.\nPlot the deck.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.get_nid_to_index_mapping",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > get_nid_to_index_mapping",
        "section": "Module Contents > get_nid_to_index_mapping",
        "text": "ansys.dyna.core.lib.deck_plotter.get_nid_to_index_mapping(nodes) -> Dict\n\nGiven a node id, output the node index as a dict\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.merge_keywords",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > merge_keywords",
        "section": "Module Contents > merge_keywords",
        "text": "ansys.dyna.core.lib.deck_plotter.merge_keywords(deck: ansys.dyna.core.Deck) -> Tuple[pandas.DataFrame, Dict]\n\nMerge mesh keywords.\n\nGiven a deck, merges specific keywords (NODE, ELEMENT_SHELL, ELEMENT_BEAM, ELEMENT_SOLID)\nand returns tham as data frames.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.process_nodes",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > process_nodes",
        "section": "Module Contents > process_nodes",
        "text": "ansys.dyna.core.lib.deck_plotter.process_nodes(nodes_df)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.shell_facet_array",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > shell_facet_array",
        "section": "Module Contents > shell_facet_array",
        "text": "ansys.dyna.core.lib.deck_plotter.shell_facet_array(facets: pandas.DataFrame) -> numpy.array\n\nGet the shell facet array from the DataFrame.\n\nFacets are a pandas frame that is a sequence of integers\nor NAs with max length of 8.\nvalid rows contain 3,4,6, or 8 items consecutive from the\nleft.  we don’t plot quadratic edges so 6/8 collapse to 3/4\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 4 or 5 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,3]=>[3,1,2,3]\n[1,2,3,0]=>[3,1,2,3]\n[1,2,3,NA]=>[3,1,2,3]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.solid_array",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > solid_array",
        "section": "Module Contents > solid_array",
        "text": "ansys.dyna.core.lib.deck_plotter.solid_array(solids: pandas.DataFrame)\n\nGet the solid array from the DataFrame.\n\nSolids are a pandas frame that is a sequence of integers\nor NAs with max length of 28.\nvalid rows contain 3, 4, 6, or 8 items consecutive from the\nleft.  We don’t plot quadratic edges so 6/8 collapse to 3/4\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 4 or 5 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,3]=>[3,1,2,3]\n[1,2,3,0]=>[3,1,2,3]\n[1,2,3,NA]=>[3,1,2,3]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.line_array",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > line_array",
        "section": "Module Contents > line_array",
        "text": "ansys.dyna.core.lib.deck_plotter.line_array(lines: pandas.DataFrame) -> numpy.array\n\nConvert DataFrame to lines array.\n\nlines is a pandas frame that is a sequence of integers\nor NAs with max length of 2.\nvalid rows contain 2 items consecutive from the\nleft.\ninvalid rows are ignored, meaning they return an empty array\nreturn an array of length 3 using the pyvista spec\nfor facets which includes a length prefix\n[1,2,]=>[2,1,2]\n[1,2,3,0]=>[]\n[1,2,3,NA]=>[]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.map_facet_nid_to_index",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > map_facet_nid_to_index",
        "section": "Module Contents > map_facet_nid_to_index",
        "text": "ansys.dyna.core.lib.deck_plotter.map_facet_nid_to_index(flat_facets: numpy.array, mapping: Dict) -> numpy.array\n\nConvert mapping to numpy array.\n\nGiven a flat list of facets or lines, use the mapping from nid to python index\nto output the numbering system for pyvista from the numbering from dyna\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.extract_shell_facets",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > extract_shell_facets",
        "section": "Module Contents > extract_shell_facets",
        "text": "ansys.dyna.core.lib.deck_plotter.extract_shell_facets(shells: pandas.DataFrame, mapping)\n\nExtract shell faces from DataFrame.\n\nShells table comes in with the form\n|  eid  | nid1 | nid2 | nid3 | nid4\n|  1    | 10   | 11   | 12   |\n|  20   | 21   | 22   | 23   | 24\n\nbut the array needed for pyvista polydata is\nof the form where each element is prefixed by the length of the element node list\n[3,10,11,12,4,21,22,23,24]\n\nTake individual rows, extract the appropriate nid’s and output a flat list of\nfacets for pyvista\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.extract_lines",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > extract_lines",
        "section": "Module Contents > extract_lines",
        "text": "ansys.dyna.core.lib.deck_plotter.extract_lines(beams: pandas.DataFrame, mapping: Dict[int, int]) -> numpy.ndarray\n\nExtract lines from DataFrame.\n\nBeams table comes in with the form with extra information not supported,\n|  eid  | nid1 | nid2\n|  1    | 10   | 11\n|  20   | 21   | 22\n\nwe only care about nid 1 and 2\n\nbut the array needed for pyvista polydata is the same as in extract facets\nof the form where each element is prefixed by the length of the element node list\n[2,10,11,2,21,22]\n\nTake individual rows, extract the appropriate nid’s and output a flat list of\nfacets for pyvista\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.extract_solids",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > extract_solids",
        "section": "Module Contents > extract_solids",
        "text": "ansys.dyna.core.lib.deck_plotter.extract_solids(solids: pandas.DataFrame, mapping: Dict[int, int])\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.get_pyvista",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > get_pyvista",
        "section": "Module Contents > get_pyvista",
        "text": "ansys.dyna.core.lib.deck_plotter.get_pyvista()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.get_polydata",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > get_polydata",
        "section": "Module Contents > get_polydata",
        "text": "ansys.dyna.core.lib.deck_plotter.get_polydata(deck: ansys.dyna.core.Deck, cwd=None)\n\nCreate the PolyData Object for plotting from a given deck with nodes and elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_plotter/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_plotter/index.html#ansys.dyna.core.lib.deck_plotter.plot_deck",
        "title": "ansys.dyna.core.lib.deck_plotter > Module Contents > plot_deck",
        "section": "Module Contents > plot_deck",
        "text": "ansys.dyna.core.lib.deck_plotter.plot_deck(deck, **args)\n\nPlot the deck.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/index.html#ansysdynacorepreexamples",
        "title": "ansys.dyna.core.pre.examples",
        "section": "ansys.dyna.core.pre.examples",
        "text": "ansys.dyna.core.pre.examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/examples/index",
        "href": "autoapi/ansys/dyna/core/pre/examples/index.html#submodules",
        "title": "ansys.dyna.core.pre.examples > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/index.html#ansysdynacorelibtransformsutils",
        "title": "ansys.dyna.core.lib.transforms.utils",
        "section": "ansys.dyna.core.lib.transforms.utils",
        "text": "ansys.dyna.core.lib.transforms.utils"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/index.html#submodules",
        "title": "ansys.dyna.core.lib.transforms.utils > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index",
        "href": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index.html#ansysdynacorelibencrypted_keyword",
        "title": "ansys.dyna.core.lib.encrypted_keyword",
        "section": "ansys.dyna.core.lib.encrypted_keyword",
        "text": "Module provides an encrypted keyword class.\nansys.dyna.core.lib.encrypted_keyword"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index",
        "href": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index.html#classes",
        "title": "ansys.dyna.core.lib.encrypted_keyword > Classes",
        "section": "Classes",
        "text": "EncryptedKeyword\n\nClasses\nEncryptedKeyword"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index",
        "href": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index.html#module-contents",
        "title": "ansys.dyna.core.lib.encrypted_keyword > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index",
        "href": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index.html#ansys.dyna.core.lib.encrypted_keyword.EncryptedKeyword",
        "title": "ansys.dyna.core.lib.encrypted_keyword > Module Contents > EncryptedKeyword",
        "section": "Module Contents > EncryptedKeyword",
        "text": "class ansys.dyna.core.lib.encrypted_keyword.EncryptedKeyword\n\n\n\ndata: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index",
        "href": "autoapi/ansys/dyna/core/lib/encrypted_keyword/index.html#ansys.dyna.core.lib.encrypted_keyword.EncryptedKeyword.data",
        "title": "ansys.dyna.core.lib.encrypted_keyword > Module Contents > data",
        "section": "Module Contents > data",
        "text": "data: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansysdynacorepremisc",
        "title": "ansys.dyna.core.pre.misc",
        "section": "ansys.dyna.core.pre.misc",
        "text": "Module providing miscellaneous functions and methods.\nansys.dyna.core.pre.misc"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#attributes",
        "title": "ansys.dyna.core.pre.misc > Attributes",
        "section": "Attributes",
        "text": "MODULE_PATH\n\nbase_report_class\n\nAttributes\nMODULE_PATH\nbase_report_class"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#classes",
        "title": "ansys.dyna.core.pre.misc > Classes",
        "section": "Classes",
        "text": "Plain_Report\n\nClasses\nPlain_Report"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#functions",
        "title": "ansys.dyna.core.pre.misc > Functions",
        "section": "Functions",
        "text": "is_float(input_string)\nDetermine if a string can be converted to a float.\nrandom_string([stringLength, letters])\nGenerate a random string of a fixed length.\ncreate_temp_dir([tmpdir])\nCreate a unique working directory in a temporary directory.\ncheck_valid_ip(ip)\nCheck if an IP address is valid.\ncheck_valid_port(port[, lower_bound, high_bound])\nCheck if a port is valid.\nFunctions\nis_float\nrandom_string\ncreate_temp_dir\ncheck_valid_ip\ncheck_valid_port"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#module-contents",
        "title": "ansys.dyna.core.pre.misc > Module Contents",
        "section": "Module Contents",
        "text": "Determine if a string can be converted to a float.\nString.\nGenerate a random string of a fixed length.\nLength of the string. The default is 10.\nCreate a unique working directory in a temporary directory.\nName of the temporary directory to create the working\ndirectory in. The default is None.\nCheck if an IP address is valid.\nIP address.\nCheck if a port is valid.\nPort.\nLowest value for the port range. The default is 1000.\nHighest value for the port range. The default is 6000.\nModule Contents\npython:str\nTrue\nwhen\nthe\npython:str\ncan\nbe\nconverted\nto\na\npython:float\nFalse\npython:int\noptional\n10\npython:str\noptional\nNone\npython:int\npython:int\noptional\n1000\npython:int\noptional\n6000"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.MODULE_PATH",
        "title": "ansys.dyna.core.pre.misc > Module Contents > MODULE_PATH",
        "section": "Module Contents > MODULE_PATH",
        "text": "ansys.dyna.core.pre.misc.MODULE_PATH\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report",
        "title": "ansys.dyna.core.pre.misc > Module Contents > Plain_Report",
        "section": "Module Contents > Plain_Report",
        "text": "class ansys.dyna.core.pre.misc.Plain_Report(core, optional=None, additional=None, **kwargs)\n\n\n\nadditional = None\n\n\n\n\n\ncore\n\n\n\n\n\noptional = None\n\n\n\n\n\nkwargs\n\n\n\n\n\nget_version(package)\n\n\n\n\n\n__repr__()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.additional",
        "title": "ansys.dyna.core.pre.misc > Module Contents > additional",
        "section": "Module Contents > additional",
        "text": "additional = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.core",
        "title": "ansys.dyna.core.pre.misc > Module Contents > core",
        "section": "Module Contents > core",
        "text": "core\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.optional",
        "title": "ansys.dyna.core.pre.misc > Module Contents > optional",
        "section": "Module Contents > optional",
        "text": "optional = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.kwargs",
        "title": "ansys.dyna.core.pre.misc > Module Contents > kwargs",
        "section": "Module Contents > kwargs",
        "text": "kwargs\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.get_version",
        "title": "ansys.dyna.core.pre.misc > Module Contents > get_version",
        "section": "Module Contents > get_version",
        "text": "get_version(package)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.Plain_Report.__repr__",
        "title": "ansys.dyna.core.pre.misc > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.base_report_class",
        "title": "ansys.dyna.core.pre.misc > Module Contents > base_report_class",
        "section": "Module Contents > base_report_class",
        "text": "ansys.dyna.core.pre.misc.base_report_class\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.is_float",
        "title": "ansys.dyna.core.pre.misc > Module Contents > is_float",
        "section": "Module Contents > is_float",
        "text": "ansys.dyna.core.pre.misc.is_float(input_string)\n\nDetermine if a string can be converted to a float.\n\nParameters\n\ninput_string\n\npython:str\n\nString.\n\nReturns\n\nTrue when the python:str can be converted to a python:float, False otherwise.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.random_string",
        "title": "ansys.dyna.core.pre.misc > Module Contents > random_string",
        "section": "Module Contents > random_string",
        "text": "ansys.dyna.core.pre.misc.random_string(stringLength=10, letters=string.ascii_lowercase)\n\nGenerate a random string of a fixed length.\n\nParameters\n\nstringLength\n\npython:int, optional\n\nLength of the string. The default is 10.\n\nletters\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.create_temp_dir",
        "title": "ansys.dyna.core.pre.misc > Module Contents > create_temp_dir",
        "section": "Module Contents > create_temp_dir",
        "text": "ansys.dyna.core.pre.misc.create_temp_dir(tmpdir=None)\n\nCreate a unique working directory in a temporary directory.\n\nParameters\n\ntempdir\n\npython:str, optional\n\nName of the temporary directory to create the working\ndirectory in. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.check_valid_ip",
        "title": "ansys.dyna.core.pre.misc > Module Contents > check_valid_ip",
        "section": "Module Contents > check_valid_ip",
        "text": "ansys.dyna.core.pre.misc.check_valid_ip(ip)\n\nCheck if an IP address is valid.\n\nParameters\n\nip\n\nIP address.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/misc/index",
        "href": "autoapi/ansys/dyna/core/pre/misc/index.html#ansys.dyna.core.pre.misc.check_valid_port",
        "title": "ansys.dyna.core.pre.misc > Module Contents > check_valid_port",
        "section": "Module Contents > check_valid_port",
        "text": "ansys.dyna.core.pre.misc.check_valid_port(port, lower_bound=1000, high_bound=60000)\n\nCheck if a port is valid.\n\nParameters\n\nport\n\npython:int\n\nPort.\n\nlower_bound\n\npython:int, optional\n\nLowest value for the port range. The default is 1000.\n\nhigh_bound\n\npython:int, optional\n\nHighest value for the port range. The default is 6000.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Implicit/sg_execution_times",
        "href": "examples/Implicit/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:13.931 total execution time for 1 file from examples/Implicit:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Implicit_camry_rc.py (camry_rc.py)\n00:13.931\n0.0\nComputation times\ncamry_rc.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#ansysdynacorerunwindows_runner",
        "title": "ansys.dyna.core.run.windows_runner",
        "section": "ansys.dyna.core.run.windows_runner",
        "text": "Windows implementation of LS-DYNA runner.\nansys.dyna.core.run.windows_runner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#classes",
        "title": "ansys.dyna.core.run.windows_runner > Classes",
        "section": "Classes",
        "text": "WindowsRunner\nWindows implementation to Run LS-DYNA.\nClasses\nWindowsRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#module-contents",
        "title": "ansys.dyna.core.run.windows_runner > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.run.base_runner.BaseRunner\nWindows implementation to Run LS-DYNA.\nTested when LS-DYNA is installed as part of the\nunified Ansys installation.\nSet input file and working directory.\nRun LS-DYNA.\nModule Contents\nansys.dyna.core.run.base_runner.BaseRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#ansys.dyna.core.run.windows_runner.WindowsRunner",
        "title": "ansys.dyna.core.run.windows_runner > Module Contents > WindowsRunner",
        "section": "Module Contents > WindowsRunner",
        "text": "class ansys.dyna.core.run.windows_runner.WindowsRunner(**kwargs)\n\nBases: ansys.dyna.core.run.base_runner.BaseRunner\n\nWindows implementation to Run LS-DYNA.\n\nTested when LS-DYNA is installed as part of the\nunified Ansys installation.\n\n!! processed by numpydoc !!\n\n\n\nset_input(input_file: str, working_directory: str) -> None\n\nSet input file and working directory.\n\n!! processed by numpydoc !!\n\n\n\nrun() -> None\n\nRun LS-DYNA.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#ansys.dyna.core.run.windows_runner.WindowsRunner.set_input",
        "title": "ansys.dyna.core.run.windows_runner > Module Contents > set_input",
        "section": "Module Contents > set_input",
        "text": "set_input(input_file: str, working_directory: str) -> None\n\nSet input file and working directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/windows_runner/index",
        "href": "autoapi/ansys/dyna/core/run/windows_runner/index.html#ansys.dyna.core.run.windows_runner.WindowsRunner.run",
        "title": "ansys.dyna.core.run.windows_runner > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run() -> None\n\nRun LS-DYNA.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansysdynacorelibcard_set",
        "title": "ansys.dyna.core.lib.card_set",
        "section": "ansys.dyna.core.lib.card_set",
        "text": "Set of cards that act as one card.\nIt is a generic card, so it needs to be given a type as an argument.\nThat type is used for each card, and behaves like a keyword.\nansys.dyna.core.lib.card_set"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#classes",
        "title": "ansys.dyna.core.lib.card_set > Classes",
        "section": "Classes",
        "text": "CardSet\nAbstract base class for all the implementations of keyword cards.\nClasses\nCardSet"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#module-contents",
        "title": "ansys.dyna.core.lib.card_set > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nAbstract base class for all the implementations of keyword cards.\nReturn whether the card is active.\nAdd a card to the set. Return the index of the added card.\nGet the card format type.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nReads the card data from an input text buffer.\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > CardSet",
        "section": "Module Contents > CardSet",
        "text": "class ansys.dyna.core.lib.card_set.CardSet(set_type: type, length_func: Callable = None, active_func: Callable = None, option_specs: List[ansys.dyna.core.lib.option_card.OptionSpec] = None, **kwargs)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\ninitialize()\n\n\n\n\n\nproperty option_specs\n\n\n\n\n\nproperty active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!\n\n\n\nadd_item(**kwargs) -> int\n\nAdd a card to the set. Return the index of the added card.\n\n!! processed by numpydoc !!\n\n\n\nitems() -> List[ansys.dyna.core.lib.cards.Cards]\n\n\n\n\n\nproperty bounded: bool\n\n\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.initialize",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > initialize",
        "section": "Module Contents > initialize",
        "text": "initialize()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.option_specs",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > option_specs",
        "section": "Module Contents > option_specs",
        "text": "property option_specs\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.active",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.add_item",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > add_item",
        "section": "Module Contents > add_item",
        "text": "add_item(**kwargs) -> int\n\nAdd a card to the set. Return the index of the added card.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.items",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > items",
        "section": "Module Contents > items",
        "text": "items() -> List[ansys.dyna.core.lib.cards.Cards]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.bounded",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > bounded",
        "section": "Module Contents > bounded",
        "text": "property bounded: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.format",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.write",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_set/index",
        "href": "autoapi/ansys/dyna/core/lib/card_set/index.html#ansys.dyna.core.lib.card_set.CardSet.read",
        "title": "ansys.dyna.core.lib.card_set > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/index.html#ansysdynacorelibtransforms",
        "title": "ansys.dyna.core.lib.transforms",
        "section": "ansys.dyna.core.lib.transforms",
        "text": "ansys.dyna.core.lib.transforms"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/index.html#submodules",
        "title": "ansys.dyna.core.lib.transforms > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual_keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual_keywords/index.html#ansysdynacorekeywordskeyword_classesmanual_keywords",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual_keywords",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual_keywords",
        "text": "ansys.dyna.core.keywords.keyword_classes.manual_keywords"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#ansysdynacorepredynaiga",
        "title": "ansys.dyna.core.pre.dynaiga",
        "section": "ansys.dyna.core.pre.dynaiga",
        "text": "Module for creating an IGA DYNA input deck.\nansys.dyna.core.pre.dynaiga"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#classes",
        "title": "ansys.dyna.core.pre.dynaiga > Classes",
        "section": "Classes",
        "text": "DynaIGA\nContains methods for creating a keyword related to IGA.\nClasses\nDynaIGA"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynaiga > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for creating a keyword related to IGA.\nDefine section properties for isogeometric shell elements.\nSection ID. SECID is referenced on the \\*PART card.\nA unique number or label must be specified.\nElement formulation.\nShear correction factor, which scales the transverse shear stress.\nShell thickness.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nModule Contents\nansys.dyna.core.pre.dynabase.DynaBase\npython:int\nSECID\n\\*PART\npython:int\npython:float\npython:float\nTrue\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#ansys.dyna.core.pre.dynaiga.DynaIGA",
        "title": "ansys.dyna.core.pre.dynaiga > Module Contents > DynaIGA",
        "section": "Module Contents > DynaIGA",
        "text": "class ansys.dyna.core.pre.dynaiga.DynaIGA\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating a keyword related to IGA.\n\n!! processed by numpydoc !!\n\n\n\ncasetype\n\n\n\n\n\ncreate_section_igashell(secid, elform, shrf, thickness)\n\nDefine section properties for isogeometric shell elements.\n\nParameters\n\nsecid\n\npython:int\n\nSection ID. SECID is referenced on the \\*PART card.\nA unique number or label must be specified.\n\nelform\n\npython:int\n\nElement formulation.\n\nshrf\n\npython:float\n\nShear correction factor, which scales the transverse shear stress.\n\nthickness\n\npython:float\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#ansys.dyna.core.pre.dynaiga.DynaIGA.casetype",
        "title": "ansys.dyna.core.pre.dynaiga > Module Contents > casetype",
        "section": "Module Contents > casetype",
        "text": "casetype\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#ansys.dyna.core.pre.dynaiga.DynaIGA.create_section_igashell",
        "title": "ansys.dyna.core.pre.dynaiga > Module Contents > create_section_igashell",
        "section": "Module Contents > create_section_igashell",
        "text": "create_section_igashell(secid, elform, shrf, thickness)\n\nDefine section properties for isogeometric shell elements.\n\nParameters\n\nsecid\n\npython:int\n\nSection ID. SECID is referenced on the \\*PART card.\nA unique number or label must be specified.\n\nelform\n\npython:int\n\nElement formulation.\n\nshrf\n\npython:float\n\nShear correction factor, which scales the transverse shear stress.\n\nthickness\n\npython:float\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaiga/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaiga/index.html#ansys.dyna.core.pre.dynaiga.DynaIGA.save_file",
        "title": "ansys.dyna.core.pre.dynaiga > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/ICFD/index",
        "href": "examples/ICFD/index.html#icfd-examples",
        "title": "ICFD examples",
        "section": "ICFD examples",
        "text": "These examples show how to create and use ICFD\nincompressible computational fluid dynamics) models.\nsphx_glr_examples_ICFD_icfd_cylinderflow.py\nsphx_glr_examples_ICFD_icfd_dam_break.py\nsphx_glr_examples_ICFD_icfd_dem_coupling.py\nsphx_glr_examples_ICFD_icfd_driven_cavity.py\nsphx_glr_examples_ICFD_icfd_free_convection_flow.py\nsphx_glr_examples_ICFD_icfd_imposed_move.py\nsphx_glr_examples_ICFD_icfd_internal_3d_flow.py\nsphx_glr_examples_ICFD_icfd_mesh_adaptivity.py\nsphx_glr_examples_ICFD_icfd_mesh_morphing.py\nsphx_glr_examples_ICFD_icfd_mesh_size.py\nsphx_glr_examples_ICFD_icfd_plate_flow.py\nsphx_glr_examples_ICFD_icfd_sloshing.py\nsphx_glr_examples_ICFD_icfd_strong_fsi.py\nsphx_glr_examples_ICFD_icfd_thermal_flow.py\nsphx_glr_examples_ICFD_icfd_weak_fsi.py\nICFD examples"
    },
    {
        "objectID": "examples/ICFD/icfd_thermal_flow",
        "href": "examples/ICFD/icfd_thermal_flow.html#thermal-flow",
        "title": "Thermal flow",
        "section": "Thermal flow",
        "text": "This example shows a simple ICFD forced-convection input deck with\na coarse mesh. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.036 seconds)\nDownload Jupyter notebook: icfd_thermal_flow.ipynb\nDownload Python source code: icfd_thermal_flow.py\nDownload zipped: icfd_thermal_flow.zip\nGallery generated by Sphinx-Gallery\nThermal flow\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_thermal_flow.ipynb\nDownload Python source code: icfd_thermal_flow.py\nDownload zipped: icfd_thermal_flow.zip"
    },
    {
        "objectID": "examples/Airbag/index",
        "href": "examples/Airbag/index.html#airbag-examples",
        "title": "Airbag examples",
        "section": "Airbag examples",
        "text": "These examples show how to create and use airbag models.\nsphx_glr_examples_Airbag_airbag_deploy.py\nsphx_glr_examples_Airbag_airbag_post.py\nAirbag examples"
    },
    {
        "objectID": "examples/ICFD/icfd_dem_coupling",
        "href": "examples/ICFD/icfd_dem_coupling.html#dem-coupling",
        "title": "DEM coupling",
        "section": "DEM coupling",
        "text": "This example shows how to couple the ICFD fluid solver with DEM particles.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R101_winx64_ifort131.exe.\nTotal running time of the script: (0 minutes 0.082 seconds)\nDownload Jupyter notebook: icfd_dem_coupling.ipynb\nDownload Python source code: icfd_dem_coupling.py\nDownload zipped: icfd_dem_coupling.zip\nGallery generated by Sphinx-Gallery\nDEM coupling\nls-dyna_smp_d_R101_winx64_ifort131.exe\nDownload Jupyter notebook: icfd_dem_coupling.ipynb\nDownload Python source code: icfd_dem_coupling.py\nDownload zipped: icfd_dem_coupling.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index.html#ansysdynacorekeywordskeyword_classestype_mapping",
        "title": "ansys.dyna.core.keywords.keyword_classes.type_mapping",
        "section": "ansys.dyna.core.keywords.keyword_classes.type_mapping",
        "text": "ansys.dyna.core.keywords.keyword_classes.type_mapping"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index.html#attributes",
        "title": "ansys.dyna.core.keywords.keyword_classes.type_mapping > Attributes",
        "section": "Attributes",
        "text": "TypeMapping\n\nAttributes\nTypeMapping"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.type_mapping > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/type_mapping/index.html#ansys.dyna.core.keywords.keyword_classes.type_mapping.TypeMapping",
        "title": "ansys.dyna.core.keywords.keyword_classes.type_mapping > Module Contents > TypeMapping",
        "section": "Module Contents > TypeMapping",
        "text": "ansys.dyna.core.keywords.keyword_classes.type_mapping.TypeMapping\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansysdynacorerunoptions",
        "title": "ansys.dyna.core.run.options",
        "section": "ansys.dyna.core.run.options",
        "text": "Options to run LS-DYNA.\nansys.dyna.core.run.options"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#classes",
        "title": "ansys.dyna.core.run.options > Classes",
        "section": "Classes",
        "text": "MpiOption\nMPI option to configure the LS-DYNA execution command line\nPrecision\nPrecision for LS-DYNA\nMemoryUnit\nMemory unit for LS-DYNA command line.  Only MB and GB are currently supported.\nClasses\nMpiOption\nPrecision\nMemoryUnit"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#module-contents",
        "title": "ansys.dyna.core.run.options > Module Contents",
        "section": "Module Contents",
        "text": "MPI option to configure the LS-DYNA execution command line\nPrecision for LS-DYNA\nMemory unit for LS-DYNA command line.  Only MB and GB are currently supported.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MpiOption",
        "title": "ansys.dyna.core.run.options > Module Contents > MpiOption",
        "section": "Module Contents > MpiOption",
        "text": "class ansys.dyna.core.run.options.MpiOption\n\nMPI option to configure the LS-DYNA execution command line\n\n!! processed by numpydoc !!\n\n\n\nSMP = 0\n\n\n\n\n\nMPP_INTEL_MPI = 1\n\n\n\n\n\nMPP_MS_MPI = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MpiOption.SMP",
        "title": "ansys.dyna.core.run.options > Module Contents > SMP",
        "section": "Module Contents > SMP",
        "text": "SMP = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MpiOption.MPP_INTEL_MPI",
        "title": "ansys.dyna.core.run.options > Module Contents > MPP_INTEL_MPI",
        "section": "Module Contents > MPP_INTEL_MPI",
        "text": "MPP_INTEL_MPI = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MpiOption.MPP_MS_MPI",
        "title": "ansys.dyna.core.run.options > Module Contents > MPP_MS_MPI",
        "section": "Module Contents > MPP_MS_MPI",
        "text": "MPP_MS_MPI = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.Precision",
        "title": "ansys.dyna.core.run.options > Module Contents > Precision",
        "section": "Module Contents > Precision",
        "text": "class ansys.dyna.core.run.options.Precision\n\nPrecision for LS-DYNA\n\n!! processed by numpydoc !!\n\n\n\nSINGLE = 0\n\n\n\n\n\nDOUBLE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.Precision.SINGLE",
        "title": "ansys.dyna.core.run.options > Module Contents > SINGLE",
        "section": "Module Contents > SINGLE",
        "text": "SINGLE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.Precision.DOUBLE",
        "title": "ansys.dyna.core.run.options > Module Contents > DOUBLE",
        "section": "Module Contents > DOUBLE",
        "text": "DOUBLE = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit",
        "title": "ansys.dyna.core.run.options > Module Contents > MemoryUnit",
        "section": "Module Contents > MemoryUnit",
        "text": "class ansys.dyna.core.run.options.MemoryUnit\n\nMemory unit for LS-DYNA command line.  Only MB and GB are currently supported.\n\n!! processed by numpydoc !!\n\n\n\nBYTE = 0\n\n\n\n\n\nKB = 1\n\n\n\n\n\nMB = 2\n\n\n\n\n\nGB = 3\n\n\n\n\n\nTB = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit.BYTE",
        "title": "ansys.dyna.core.run.options > Module Contents > BYTE",
        "section": "Module Contents > BYTE",
        "text": "BYTE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit.KB",
        "title": "ansys.dyna.core.run.options > Module Contents > KB",
        "section": "Module Contents > KB",
        "text": "KB = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit.MB",
        "title": "ansys.dyna.core.run.options > Module Contents > MB",
        "section": "Module Contents > MB",
        "text": "MB = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit.GB",
        "title": "ansys.dyna.core.run.options > Module Contents > GB",
        "section": "Module Contents > GB",
        "text": "GB = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/options/index",
        "href": "autoapi/ansys/dyna/core/run/options/index.html#ansys.dyna.core.run.options.MemoryUnit.TB",
        "title": "ansys.dyna.core.run.options > Module Contents > TB",
        "section": "Module Contents > TB",
        "text": "TB = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#ansysdynacorerunlinux_runner",
        "title": "ansys.dyna.core.run.linux_runner",
        "section": "ansys.dyna.core.run.linux_runner",
        "text": "ansys.dyna.core.run.linux_runner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#classes",
        "title": "ansys.dyna.core.run.linux_runner > Classes",
        "section": "Classes",
        "text": "LinuxRunner\nLinux implementation to Run LS-DYNA. Tested with a custom exutable\nClasses\nLinuxRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#module-contents",
        "title": "ansys.dyna.core.run.linux_runner > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.run.base_runner.BaseRunner\nLinux implementation to Run LS-DYNA. Tested with a custom exutable\nand when LS-DYNA is installed as part of the unified Ansys installation\nModule Contents\nansys.dyna.core.run.base_runner.BaseRunner"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#ansys.dyna.core.run.linux_runner.LinuxRunner",
        "title": "ansys.dyna.core.run.linux_runner > Module Contents > LinuxRunner",
        "section": "Module Contents > LinuxRunner",
        "text": "class ansys.dyna.core.run.linux_runner.LinuxRunner(**kwargs)\n\nBases: ansys.dyna.core.run.base_runner.BaseRunner\n\nLinux implementation to Run LS-DYNA. Tested with a custom exutable\nand when LS-DYNA is installed as part of the unified Ansys installation\n\n!! processed by numpydoc !!\n\n\n\nexecutable\n\n\n\n\n\nset_input(input_file: str, working_directory: str) -> None\n\n\n\n\n\nrun() -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#ansys.dyna.core.run.linux_runner.LinuxRunner.executable",
        "title": "ansys.dyna.core.run.linux_runner > Module Contents > executable",
        "section": "Module Contents > executable",
        "text": "executable\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#ansys.dyna.core.run.linux_runner.LinuxRunner.set_input",
        "title": "ansys.dyna.core.run.linux_runner > Module Contents > set_input",
        "section": "Module Contents > set_input",
        "text": "set_input(input_file: str, working_directory: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/linux_runner/index",
        "href": "autoapi/ansys/dyna/core/run/linux_runner/index.html#ansys.dyna.core.run.linux_runner.LinuxRunner.run",
        "title": "ansys.dyna.core.run.linux_runner > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run() -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#ansysdynacorerunlocal_solver",
        "title": "ansys.dyna.core.run.local_solver",
        "section": "ansys.dyna.core.run.local_solver",
        "text": "ansys.dyna.core.run.local_solver"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#attributes",
        "title": "ansys.dyna.core.run.local_solver > Attributes",
        "section": "Attributes",
        "text": "HAS_DOCKER\n\nAttributes\nHAS_DOCKER"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#functions",
        "title": "ansys.dyna.core.run.local_solver > Functions",
        "section": "Functions",
        "text": "get_runner(→ Any)\nReturn the runner for the job.\nrun_dyna(→ str)\nRun the Ls-Dyna solver with the given input file.\nFunctions\nget_runner\nrun_dyna"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#module-contents",
        "title": "ansys.dyna.core.run.local_solver > Module Contents",
        "section": "Module Contents",
        "text": "Return the runner for the job.\nRun the Ls-Dyna solver with the given input file.\nEither the path to a dyna keyword file or an instance of\nansys.dyna.keywords.Deck.\nThe mpi option to use. Choose from the values defined in MpiOption.\nDefaults to MpiOption.SMP.\nFloating point precision. Choose from the values defined in Precision.\nDefaults to Precision.DOUBLE.\nVersion of Ansys Unified installed to use.\nDefaults to: TODO (find the latest one?).\nOptional and Linux-Only: The name of the DYNA solver executable.\nDefault is s based on the value of the mpi_option argument.\nOn linux: it can be the full path.\nAlso on linux, ansys-tools-path can be used to save a custom location of\na dyna executable so that it doesn’t need to be set here each time.\nNumber of cpus.\nDefaults to 1.\nAmount of memory units, as defined by memory_unit for DYNA to use.\nDefaults to 20.\nMemory unit.  Choose from the values defined in MemoryUnit.\nDefaults to MemoryUnit.MB.\nWorking directory.\nIf the input parameter is a path to the input file,\ndefaults to the same folder as that file.  Otherwise, the job is run\nin a new folder under $TMP/ansys/pydyna/jobs.\nDockerContainer to run LS-DYNA in.\nEnvironment variables to pass into the docker container.\nCurrently only affects runs using the container option.\nIf True, the stdout of solver is streamed to python’s stdout during the solve.\nIf False, the solver stdout is printed once after the container exits.\nDefaults to True.\nThe working directory where the solver is launched.\nIf stream is False and container is set, returns the stdout of the run\nModule Contents\npython:str\nobject\nansys.dyna.keywords.Deck\npython:dict\nMpiOption\nPrecision\nmpi_option\nMemoryUnit\npython:str"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#ansys.dyna.core.run.local_solver.HAS_DOCKER",
        "title": "ansys.dyna.core.run.local_solver > Module Contents > HAS_DOCKER",
        "section": "Module Contents > HAS_DOCKER",
        "text": "ansys.dyna.core.run.local_solver.HAS_DOCKER = True\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#ansys.dyna.core.run.local_solver.get_runner",
        "title": "ansys.dyna.core.run.local_solver > Module Contents > get_runner",
        "section": "Module Contents > get_runner",
        "text": "ansys.dyna.core.run.local_solver.get_runner(**kwargs) -> Any\n\nReturn the runner for the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/run/local_solver/index",
        "href": "autoapi/ansys/dyna/core/run/local_solver/index.html#ansys.dyna.core.run.local_solver.run_dyna",
        "title": "ansys.dyna.core.run.local_solver > Module Contents > run_dyna",
        "section": "Module Contents > run_dyna",
        "text": "ansys.dyna.core.run.local_solver.run_dyna(input: str | object, **kwargs) -> str\n\nRun the Ls-Dyna solver with the given input file.\n\nParameters\n\ninput\n\npython:str or object\n\nEither the path to a dyna keyword file or an instance of\nansys.dyna.keywords.Deck.\n\n**kwargs\n\npython:dict\n\nmpi_option\n\nint\n\nThe mpi option to use. Choose from the values defined in MpiOption.\nDefaults to MpiOption.SMP.\n\nprecision\n\nint\n\nFloating point precision. Choose from the values defined in Precision.\nDefaults to Precision.DOUBLE.\n\nversion\n\nstr\n\nVersion of Ansys Unified installed to use.\nDefaults to: TODO (find the latest one?).\n\nexecutable\n\nstr\n\nOptional and Linux-Only: The name of the DYNA solver executable.\nDefault is s based on the value of the mpi_option argument.\nOn linux: it can be the full path.\nAlso on linux, ansys-tools-path can be used to save a custom location of\na dyna executable so that it doesn’t need to be set here each time.\n\nncpu\n\nint\n\nNumber of cpus.\nDefaults to 1.\n\nmemory\n\nint\n\nAmount of memory units, as defined by memory_unit for DYNA to use.\nDefaults to 20.\n\nmemory_unit\n\nint\n\nMemory unit.  Choose from the values defined in MemoryUnit.\nDefaults to MemoryUnit.MB.\n\nworking_directory\n\nstr\n\nWorking directory.\nIf the input parameter is a path to the input file,\ndefaults to the same folder as that file.  Otherwise, the job is run\nin a new folder under $TMP/ansys/pydyna/jobs.\n\ncontainer\n\nstr\n\nDockerContainer to run LS-DYNA in.\n\ncontainer_env\n\ndict()\n\nEnvironment variables to pass into the docker container.\n\nstream\n\nbool\n\nCurrently only affects runs using the container option.\nIf True, the stdout of solver is streamed to python’s stdout during the solve.\nIf False, the solver stdout is printed once after the container exits.\nDefaults to True.\n\nReturns\n\nresult\n\npython:str\n\nThe working directory where the solver is launched.\nIf stream is False and container is set, returns the stdout of the run\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/ICFD/icfd_dam_break",
        "href": "examples/ICFD/icfd_dam_break.html#dam-break",
        "title": "Dam break",
        "section": "Dam break",
        "text": "This example shows how to use the ICFD solver on a simple free surface.\nA column of water collapses under the load of gravity. The executable file\nfor LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.026 seconds)\nDownload Jupyter notebook: icfd_dam_break.ipynb\nDownload Python source code: icfd_dam_break.py\nDownload zipped: icfd_dam_break.zip\nGallery generated by Sphinx-Gallery\nDam break\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_dam_break.ipynb\nDownload Python source code: icfd_dam_break.py\nDownload zipped: icfd_dam_break.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/index",
        "href": "autoapi/ansys/dyna/core/pre/index.html#ansysdynacorepre",
        "title": "ansys.dyna.core.pre",
        "section": "ansys.dyna.core.pre",
        "text": "ansys.dyna.core.pre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/index",
        "href": "autoapi/ansys/dyna/core/pre/index.html#submodules",
        "title": "ansys.dyna.core.pre > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "To use the solver features of PyDYNA, you must have a valid LS-DYNA license.\nFor information on getting a licensed copy of LS-DYNA, see\nthe Ansys LS-DYNA\npage on the Ansys website.\nGetting started"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "PyDYNA consists of four modules, ansys.dyna.core.pre, ansys.dyna.core.solver,\nansys.dyna.core.run, and ansys.dyna.core.keywords.\nansys.dyna.core.pre and ansys.dyna.core.solver use gRPC and hence need to be run\nusing server-client connection.\nInstallation\nansys.dyna.core.pre\nansys.dyna.core.solver\nansys.dyna.core.run\nansys.dyna.core.keywords\nansys.dyna.core.pre\nansys.dyna.core.solver"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#install-the-client",
        "title": "Getting started > Install the client",
        "section": "Install the client",
        "text": "The ansys.dyna.core package supports Python 3.9 through\nPython 3.12 on Windows, Linux, and MacOS.\nYou should consider installing PyDYNA in a virtual environment.\nFor more information, see Python’s\nvenv – Creation of virtual environments.\nPyDYNA has three installation modes: user, developer, and offline.\nInstall the client\nansys.dyna.core"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#install-in-user-mode",
        "title": "Getting started > Install in user mode",
        "section": "Install in user mode",
        "text": "Before installing PyDYNA in user mode, make sure you have the latest version of\npip with this command:\nThen, install PyDYNA with this command:\nInstall in user mode"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#install-in-developer-mode",
        "title": "Getting started > Install in developer mode",
        "section": "Install in developer mode",
        "text": "Installing PyDYNA in developer mode allows you to modify the source and enhance it.\nBefore contributing to the project, ensure that you are thoroughly familiar\nwith the PyAnsys Developer’s Guide.\nStart by cloning and installing the repository with these commands:\nInstall in developer mode"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#install-in-offline-mode",
        "title": "Getting started > Install in offline mode",
        "section": "Install in offline mode",
        "text": "If you lack an internet connection on your installation machine, you should install\nPyDYNA by downloading the wheelhouse archive for your corresponding machine\narchitecture from the Releases Page.\nEach wheelhouse archive contains all the Python wheels necessary to install\nPyDYNA from scratch on Windows and Linux for Python 3.9 through 3.12. You can install\nPyDYNA on an isolated system with a fresh Python installation or on a virtual environment.\nFor example, on Linux with Python 3.9, unzip the wheelhouse archive and install PyDYNA\nwith these commands:\nIf you’re on Windows with Python 3.9, unzip the wheelhouse archive to a wheelhouse\ndirectory and install PyDYNA using the preceding command.\nInstall in offline mode\nwheelhouse"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#working-with-ls-dyna-keywords",
        "title": "Getting started > Working with LS-DYNA keywords",
        "section": "Working with LS-DYNA keywords",
        "text": "The keywords module can be used to interact with LS-DYNA keywords.\nWorking with LS-DYNA keywords\nkeywords"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Getting started"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#overview",
        "title": "Getting started > Overview",
        "section": "Overview",
        "text": "The keywords` module of PyDyna provides Python libraries to build an Ansys LS-DYNA keyword deck.\nOverview"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#usage",
        "title": "Getting started > Usage",
        "section": "Usage",
        "text": "Here’s an example of how you can generate a *SECTION_TSHELL` keyword:\nUsage"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#examples",
        "title": "Getting started > Examples",
        "section": "Examples",
        "text": "Examples showing end-to-end workflows for using PyDyna -\nwrite a deck using the keywords module and run the solver using the run module.\nBuckling_Beer_Can\nJohn_Reid_Pendulum\nJohn_Reid_Pipe\nTaylor_Bar\nExamples\nkeywords\nrun\nBuckling_Beer_Can\nJohn_Reid_Pendulum\nJohn_Reid_Pipe\nTaylor_Bar"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-pydyna-server-locally",
        "title": "Getting started > Run PyDYNA server locally",
        "section": "Run PyDYNA server locally",
        "text": "Launching the servers directly on local machines.\nRun PyDYNA server locally"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#start-pydyna-preprocessing-server-locally",
        "title": "Getting started > Start PyDYNA preprocessing server locally",
        "section": "Start PyDYNA preprocessing server locally",
        "text": "Start PyDYNA preprocessing server locally"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-an-example-on-the-client-side",
        "title": "Getting started > Run an example on the client side",
        "section": "Run an example on the client side",
        "text": "The function of launch_dynapre() can download and start the preprocessing server automatically.\nRun an example on the client side"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#start-pydyna-solver-server-locally",
        "title": "Getting started > Start PyDYNA solver server locally",
        "section": "Start PyDYNA solver server locally",
        "text": "Start PyDYNA solver server locally"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "Prerequisites"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#start-server-on-windows",
        "title": "Getting started > Start server on Windows",
        "section": "Start server on Windows",
        "text": "If you want to start the server on Windows,please ensure that you have installed the ANSYS locally.\nStart server on Windows"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#start-server-on-linuxcentos7",
        "title": "Getting started > Start server on Linux(Centos7)",
        "section": "Start server on Linux(Centos7)",
        "text": "If you want to start the server on Linux,please ensure that you have installed the Open MPI package.\nset environment variable for Open MPI\nStart server on Linux(Centos7)"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-an-example-on-the-client-side",
        "title": "Getting started > Run an example on the client side",
        "section": "Run an example on the client side",
        "text": "The function of DynaSolver() can download and start the solver server automatically.\nRun an example on the client side"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-pydyna-server-in-a-docker-container",
        "title": "Getting started > Run PyDYNA Server in a Docker container",
        "section": "Run PyDYNA Server in a Docker container",
        "text": "PyDYNA server can be run in a Docker container.\nRun PyDYNA Server in a Docker container"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#build-the-docker-image-for-the-pre-service",
        "title": "Getting started > Build the Docker image for the pre service",
        "section": "Build the Docker image for the pre service",
        "text": "You must build the Docker image for the PyDYNA pre service and then\nrun the image as a container.\nBuild the Docker image for the pre service\npre\npre"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "Ensure that you have cloned the PyDYNA repository locally with these commands:\nThe docker file in the  docker/pre directory is used to build the\nLinux-based Docker image.\nIf you are building the image on Windows, ensure that the Windows Subsystem for Linux (WSL)\nis installed. For installation information, see Microsoft’s\nInstall Linux on Windows with WSL.\nInstall docker engine. Based on the Linux distro you can use the corresponding installation\ninstructions from this page.\nDownload the latest Linux release artifacts for the pre Docker container:\nlinux-binaries.zip.\nMove this ZIP file to the docker/pre directory.\nOnce all prerequisites are met, you can build the Docker container for the pre service.\nPrerequisites\ndocker\ndocker/pre\ndocker\npre\ndocker/pre\npre"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#build-the-docker-container-for-the-pre-service",
        "title": "Getting started > Build the Docker container for the pre service",
        "section": "Build the Docker container for the pre service",
        "text": "To build the Docker image, perform these steps:\nIn your terminal, go to the docker directory.\nRun the following Docker command, replacing <DOCKERFILE_NAME>\nwith Dockerfile and <DOCKER_IMAGE_TAG> with latest.\nCheck that the image has been built successfully by running this command:\nYour output should look similar to this:\nBuild the Docker container for the pre service\npre\ndocker\n<DOCKERFILE_NAME>\nDockerfile\n<DOCKER_IMAGE_TAG>\nlatest"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-the-image-as-a-container",
        "title": "Getting started > Run the image as a container",
        "section": "Run the image as a container",
        "text": "Once the Docker image of the pre service is built successfully, perform these steps to\nrun this image as a container:\nRun this Docker command:\nCheck that the image is running successfully by running this command.\nYour output should look similar to this:\nAlternatively, you can start the container for the pre service from a\ndocker-compose.yml file.\nEnsure that Docker Compose has been installed on your computer. If Docker Compose is not\ninstalled, see Overview of installing Docker Compose\nin the Docker documentation.\nIn your terminal, go to the docker/pre directory and run this Docker command:\nRun the image as a container\npre\npre\ndocker-compose.yml\ndocker/pre"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#copy-files-from-docker",
        "title": "Getting started > Copy files from Docker",
        "section": "Copy files from Docker",
        "text": "To copy files back from the pre docker container to your host machine use the command below:\nThe path within the container is /server/output.\nCopy files from Docker\npre\n/server/output"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#build-the-docker-image-for-the-solver-service",
        "title": "Getting started > Build the Docker image for the solver service",
        "section": "Build the Docker image for the solver service",
        "text": "You must build the Docker image for the PyDYNA solver service and then\nrun the image as a container.\nBuild the Docker image for the solver service\nsolver\nsolver"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "Ensure that you have cloned the PyDYNA repository locally with these commands:\nThe docker file in the  docker/solver directory is used to build the\nLinux-based Docker image.\nIf you are building the image on Windows, ensure that the Windows Subsystem for Linux (WSL)\nis installed. For installation information, see Microsoft’s\nInstall Linux on Windows with WSL.\nInstall docker engine. Based on the Linux distro you can use the corresponding installation\ninstructions from this page.\nDownload the latest Linux release artifacts for the solver Docker container:\nmppdyna_docker_centos7.zip.\nMove this ZIP file to the docker/solver directory.\nThe files in this folder should look similar to this:\nOnce all prerequisites are met, you can build the Docker image for the solver service.\nPrerequisites\ndocker\ndocker/solver\ndocker\nsolver\ndocker/solver\nsolver"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#build-the-docker-image",
        "title": "Getting started > Build the Docker image",
        "section": "Build the Docker image",
        "text": "To build the Docker image for the solver service, perform these steps:\nIn your terminal, go to the pydyna/docker/solver directory.\nRun this Docker command:\nCheck that the image has been built successfully by running this command:\nYour output should look similar to this:\nBuild the Docker image\nsolver\npydyna/docker/solver"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#start-the-container-from-a-docker-composeyml-file",
        "title": "Getting started > Start the container from a docker-compose.yml file",
        "section": "Start the container from a docker-compose.yml file",
        "text": "Alternatively, you can start the container for the pre service from a\ndocker-compose.yml file.\nEnsure that Docker Compose has been installed on your computer. If Docker Compose is not\ninstalled, see Overview of installing Docker Compose\nin the Docker documentation.\nIn the docker-compose.yml file, replace <license_server_name> with the correct\nlicense server hosting the LS-DYNA license.\nIn your terminal, go to the docker/solver directory and run this Docker command:\nCheck that the image is running successfully by running this command.\nYour output should look similar to this:\nStart the container from a docker-compose.yml file\ndocker-compose.yml\npre\ndocker-compose.yml\ndocker-compose.yml\n<license_server_name>\ndocker/solver"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#copy-files-from-docker",
        "title": "Getting started > Copy files from Docker",
        "section": "Copy files from Docker",
        "text": "To copy files back from the solver container to your host machine use the command below:\nThe path within the container is /rundir.\nRun DYNA using ansys.dyna.core.run on a local machine,\nthis does not require Docker.\nCopy files from Docker\nsolver\n/rundir\nansys.dyna.core.run"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#use-pydyna-to-run-lsdyna-locally",
        "title": "Getting started > Use PyDYNA to run LSDYNA locally",
        "section": "Use PyDYNA to run LSDYNA locally",
        "text": "Use PyDYNA to run LSDYNA locally"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#run-ls-dyna-using-ansysdynacorerun",
        "title": "Getting started > Run LS-DYNA using ansys.dyna.core.run",
        "section": "Run LS-DYNA using ansys.dyna.core.run",
        "text": "Run LS-DYNA using ansys.dyna.core.run"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#how-it-works",
        "title": "Getting started > How it works",
        "section": "How it works",
        "text": "run_dyna attempts to find an installation of the LS-DYNA solver on your machine.\nIt uses the Python dependency ansys-tools-path to discover where LS-DYNA is installed.\nAfter installing ansys-tools-path, the location of LS-DYNA can be saved by running\nsave-ansys-path --name dyna {path/to/dyna} so that subsequent usages of run_dyna\nlook there.\nHow it works\nrun_dyna\nansys-tools-path\nansys-tools-path\nsave-ansys-path --name dyna {path/to/dyna}\nrun_dyna"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#keyword-and-run-example",
        "title": "Getting started > Keyword and run example",
        "section": "Keyword and run example",
        "text": "The next few sections show how to generate, preview, solve, and review a Taylor bar impact problem.\nAn example of a sweep over impact velocities for this problem can be found in this repository at\nexamples/Taylor_Bar/plot_taylor_bar_example.py.\nKeyword and run example\nexamples/Taylor_Bar/plot_taylor_bar_example.py"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#preprocessing",
        "title": "Getting started > Preprocessing",
        "section": "Preprocessing",
        "text": "The following code describes an LS-DYNA Model for a Taylor bar impact problem. It assumes that the mesh file\ntaylor_bar_mesh.k exists in the working directory. This mesh file can be found in this repository at\nexamples/Taylor_Bar/taylor_bar_mesh.k.\nPreprocessing\nexamples/Taylor_Bar/taylor_bar_mesh.k"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#preview",
        "title": "Getting started > Preview",
        "section": "Preview",
        "text": "The following code opens a 3D graphics window to preview the mesh for the LS-DYNA Model\nPreview"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#write-to-file",
        "title": "Getting started > Write to file",
        "section": "Write to file",
        "text": "The following code writes the LS-DYNA model to an input.k keyword file in the working directory.\nWrite to file"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#solve",
        "title": "Getting started > Solve",
        "section": "Solve",
        "text": "The following code runs LS-DYNA using the input.k file.\nSolve"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#post-processing",
        "title": "Getting started > Post processing",
        "section": "Post processing",
        "text": "The following code processes results and generates a line chart of Time vs. Energy from the impact. This requires an installation\nof a matplotlib backend.\nPost processing\nmatplotlib"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#pre-and-solver-example",
        "title": "Getting started > Pre and solver example",
        "section": "Pre and solver example",
        "text": "The next few sections show how to preprocessing, solve, and postprocessing a ball plate example.\nPre and solver example"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#preprocessing",
        "title": "Getting started > Preprocessing",
        "section": "Preprocessing",
        "text": "The following code processes a ball plate example. In the repository, you can get the\ninput file from src/ansys/dyna/core/pre/examples/explicit/ball_plate/ball_plate.k and\nthe Python file from examples/Explicit/ball_plate.py.\nPreprocessing\nsrc/ansys/dyna/core/pre/examples/explicit/ball_plate/ball_plate.k\nexamples/Explicit/ball_plate.py"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#solve",
        "title": "Getting started > Solve",
        "section": "Solve",
        "text": "The following code solves this basic ball plate example. In the repository,\nyou can get the Python file from examples/solver/ball_plate_solver.py.\nSolve\nexamples/solver/ball_plate_solver.py"
    },
    {
        "objectID": "getting-started/index",
        "href": "getting-started/index.html#post-processing",
        "title": "Getting started > Post processing",
        "section": "Post processing",
        "text": "The following code processes results from the solve of this basic ball plate example:\nFor more examples, see Examples\nin the PyDYNA documentation.\nPost processing"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansysdynacorelibcards",
        "title": "ansys.dyna.core.lib.cards",
        "section": "ansys.dyna.core.lib.cards",
        "text": "Base class for cards and I/O.\nansys.dyna.core.lib.cards"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#classes",
        "title": "ansys.dyna.core.lib.cards > Classes",
        "section": "Classes",
        "text": "Cards\nAbstract base class for option card api interface.\nClasses\nCards"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#module-contents",
        "title": "ansys.dyna.core.lib.cards > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.option_card.OptionsInterface\nAbstract base class for option card api interface.\nGets the options_api of this keyword, if any\nGet the card format type.\nWrites the cards to buf using format.\nReturns whether a superfluous newline is added\nModule Contents\nansys.dyna.core.lib.option_card.OptionsInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards",
        "title": "ansys.dyna.core.lib.cards > Module Contents > Cards",
        "section": "Module Contents > Cards",
        "text": "class ansys.dyna.core.lib.cards.Cards(keyword)\n\nBases: ansys.dyna.core.lib.option_card.OptionsInterface\n\nAbstract base class for option card api interface.\n\n!! processed by numpydoc !!\n\n\n\nproperty options: ansys.dyna.core.lib.option_card.Options\n\nGets the options_api of this keyword, if any\n\n!! processed by numpydoc !!\n\n\n\nis_option_active(option: str) -> bool\n\n\n\n\n\nactivate_option(option: str) -> None\n\n\n\n\n\ndeactivate_option(option: str) -> None\n\n\n\n\n\nget_option_spec(name: str) -> ansys.dyna.core.lib.option_card.OptionSpec\n\n\n\n\n\nproperty option_specs: Iterable[ansys.dyna.core.lib.option_card.OptionSpec]\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nwrite(buf: TextIO, format: ansys.dyna.core.lib.format_type.format_type, comment: bool | None = True) -> bool\n\nWrites the cards to buf using format.\nReturns whether a superfluous newline is added\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.options",
        "title": "ansys.dyna.core.lib.cards > Module Contents > options",
        "section": "Module Contents > options",
        "text": "property options: ansys.dyna.core.lib.option_card.Options\n\nGets the options_api of this keyword, if any\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.is_option_active",
        "title": "ansys.dyna.core.lib.cards > Module Contents > is_option_active",
        "section": "Module Contents > is_option_active",
        "text": "is_option_active(option: str) -> bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.activate_option",
        "title": "ansys.dyna.core.lib.cards > Module Contents > activate_option",
        "section": "Module Contents > activate_option",
        "text": "activate_option(option: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.deactivate_option",
        "title": "ansys.dyna.core.lib.cards > Module Contents > deactivate_option",
        "section": "Module Contents > deactivate_option",
        "text": "deactivate_option(option: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.get_option_spec",
        "title": "ansys.dyna.core.lib.cards > Module Contents > get_option_spec",
        "section": "Module Contents > get_option_spec",
        "text": "get_option_spec(name: str) -> ansys.dyna.core.lib.option_card.OptionSpec\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.option_specs",
        "title": "ansys.dyna.core.lib.cards > Module Contents > option_specs",
        "section": "Module Contents > option_specs",
        "text": "property option_specs: Iterable[ansys.dyna.core.lib.option_card.OptionSpec]\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards/index",
        "href": "autoapi/ansys/dyna/core/lib/cards/index.html#ansys.dyna.core.lib.cards.Cards.write",
        "title": "ansys.dyna.core.lib.cards > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(buf: TextIO, format: ansys.dyna.core.lib.format_type.format_type, comment: bool | None = True) -> bool\n\nWrites the cards to buf using format.\nReturns whether a superfluous newline is added\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansysdynacorekeywordskeyword_classesmanualdefine_function",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual.define_function",
        "text": "Module to define function.\nansys.dyna.core.keywords.keyword_classes.manual.define_function"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#classes",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Classes",
        "section": "Classes",
        "text": "DefineFunction\nDYNA DEFINE_FUNCTION keyword.\nClasses\nDefineFunction"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.keyword_base.KeywordBase\nDYNA DEFINE_FUNCTION keyword.\nGet or set the Function ID.\nFunctions, tables (see *DEFINE_TABLE), and load curves may not share common ID’s.\nA unique number has to be defined.\nGet or set the An optional descriptive heading.\nGet or set the Arithmetic expression involving a combination\nof independent variables and other functions.\n,i.e., f(a,b,c)=a*2+b*c+sqrt(a*c)\nwhere a, b, and c are the independent variables.  The function name, f(a,b,c), must be\nunique since other functions can then use and reference this function.\nFor example, g(a,b,c,d)=f(a,b,c)**2+d.  In this example, two *DEFINE_ FUNCTION definitions\nare needed to define functions f and g.\nModule Contents\nansys.dyna.core.lib.keyword_base.KeywordBase"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > DefineFunction",
        "section": "Module Contents > DefineFunction",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction(**kwargs)\n\nBases: ansys.dyna.core.lib.keyword_base.KeywordBase\n\nDYNA DEFINE_FUNCTION keyword.\n\n!! processed by numpydoc !!\n\n\n\nkeyword = 'DEFINE'\n\n\n\n\n\nsubkeyword = 'FUNCTION'\n\n\n\n\n\nproperty fid: int | None\n\nGet or set the Function ID.\n\nFunctions, tables (see *DEFINE_TABLE), and load curves may not share common ID’s.\nA unique number has to be defined.\n\n!! processed by numpydoc !!\n\n\n\nproperty heading: str | None\n\nGet or set the An optional descriptive heading.\n\n!! processed by numpydoc !!\n\n\n\nproperty function: str | None\n\nGet or set the Arithmetic expression involving a combination\nof independent variables and other functions.\n\n,i.e., f(a,b,c)=a*2+b*c+sqrt(a*c)\nwhere a, b, and c are the independent variables.  The function name, f(a,b,c), must be\nunique since other functions can then use and reference this function.\nFor example, g(a,b,c,d)=f(a,b,c)**2+d.  In this example, two *DEFINE_ FUNCTION definitions\nare needed to define functions f and g.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction.keyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > keyword",
        "section": "Module Contents > keyword",
        "text": "keyword = 'DEFINE'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction.subkeyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > subkeyword",
        "section": "Module Contents > subkeyword",
        "text": "subkeyword = 'FUNCTION'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction.fid",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > fid",
        "section": "Module Contents > fid",
        "text": "property fid: int | None\n\nGet or set the Function ID.\n\nFunctions, tables (see *DEFINE_TABLE), and load curves may not share common ID’s.\nA unique number has to be defined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction.heading",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > heading",
        "section": "Module Contents > heading",
        "text": "property heading: str | None\n\nGet or set the An optional descriptive heading.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/define_function/index.html#ansys.dyna.core.keywords.keyword_classes.manual.define_function.DefineFunction.function",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.define_function > Module Contents > function",
        "section": "Module Contents > function",
        "text": "property function: str | None\n\nGet or set the Arithmetic expression involving a combination\nof independent variables and other functions.\n\n,i.e., f(a,b,c)=a*2+b*c+sqrt(a*c)\nwhere a, b, and c are the independent variables.  The function name, f(a,b,c), must be\nunique since other functions can then use and reference this function.\nFor example, g(a,b,c,d)=f(a,b,c)**2+d.  In this example, two *DEFINE_ FUNCTION definitions\nare needed to define functions f and g.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/EM/sg_execution_times",
        "href": "examples/EM/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.296 total execution time for 6 files from examples/EM:\nExample\nTime\nMem (MB)\nsphx_glr_examples_EM_em_resistive_heating.py (em_resistive_heating.py)\n00:00.121\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d_multi_isopots.py (em_resistive_heating_2d_multi_isopots.py)\n00:00.041\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d_isopots.py (em_resistive_heating_2d_isopots.py)\n00:00.038\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d.py (em_resistive_heating_2d.py)\n00:00.033\n0.0\nsphx_glr_examples_EM_em_rlc_isopotential.py (em_rlc_isopotential.py)\n00:00.032\n0.0\nsphx_glr_examples_EM_em_rlc_define_func.py (em_rlc_define_func.py)\n00:00.031\n0.0\nComputation times\nem_resistive_heating.py\nem_resistive_heating_2d_multi_isopots.py\nem_resistive_heating_2d_isopots.py\nem_resistive_heating_2d.py\nem_rlc_isopotential.py\nem_rlc_define_func.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansysdynacorepredynadem",
        "title": "ansys.dyna.core.pre.dynadem",
        "section": "ansys.dyna.core.pre.dynadem",
        "text": "Module for creating a DEM DYNA input deck.\nansys.dyna.core.pre.dynadem"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#classes",
        "title": "ansys.dyna.core.pre.dynadem > Classes",
        "section": "Classes",
        "text": "DynaDEM\nContains methods for creating a keyword related to a discrete element method.\nDEMAnalysis\nActivates DEM analysis and defines associated control parameters.\nClasses\nDynaDEM\nDEMAnalysis"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for creating a keyword related to a discrete element method.\nSet global control parameters for discrete element spheres.\nNormal damping coefficient. The default is 0.0.\nTangential damping coefficient. The default is 0.0.\nStatic coefficient of friction. The default is 0.0.\nEQ.0: 3 DOF\nNE.0: 6 DOF\nRolling friction coefficient. The default is 0.0.\nScale factor of the normal spring constant.  The default is 0.01.\nRatio between the sheark/normk. The default is 0.2857.\nTrue when successful, False when failed.\nCreate discrete element sphere (DES) elements on the surface of shell elements.\nPart or part set ID for the region of the mesh to place DES elements on.\nSID type:\ntype=0: Part set ID\ntype=1: Part ID\nPart ID for the generated DES elements.\nSection ID for the generated DES elements.\nNumber of equally spaced DES elements created on a shell element in each\nlocal shell direction. The default is 1.\nIf defined, this card creates a node set with ID NSID for the nodes generated\nby this card. The default is 0.\nScale factor for determining the DES radius. The default is 1.0.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nActivates DEM analysis and defines associated control parameters.\nSet global control parameters for discrete element spheres.\nNormal damping coefficient. The default value is 0.0.\nTangential damping coefficient. The default value is 0.0.\nStatic coefficient of friction. The default is 0.0.\nRolling coefficient of friction. The default is 0.0.\nNormal spring constant. The default is 0.01.\nRatio. The default is 0.2857.\nCreate a DEM analysis.\nModule Contents\nansys.dyna.core.pre.dynabase.DynaBase\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.01\npython:float\noptional\n0.2857\nTrue\nFalse\npython:int\npython:int\npython:int\npython:int\npython:int\noptional\n1\npython:int\noptional\n0\npython:float\noptional\n1.0\nTrue\nFalse\nTrue\nFalse\nansys.dyna.core.pre.dynabase.BaseObj\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.0\npython:float\noptional\n0.01\npython:float\noptional\n0.2857"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DynaDEM",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > DynaDEM",
        "section": "Module Contents > DynaDEM",
        "text": "class ansys.dyna.core.pre.dynadem.DynaDEM\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating a keyword related to a discrete element method.\n\n!! processed by numpydoc !!\n\n\n\nset_des(ndamp=0.0, tdamp=0.0, frics=0.0, fricr=0.0, normk=0.01, sheark=0.2857)\n\nSet global control parameters for discrete element spheres.\n\nParameters\n\nndamp\n\npython:float, optional\n\nNormal damping coefficient. The default is 0.0.\n\ntdamp\n\npython:float, optional\n\nTangential damping coefficient. The default is 0.0.\n\nfrics\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.0.\n\nEQ.0: 3 DOF\n\nNE.0: 6 DOF\n\nfricr\n\npython:float, optional\n\nRolling friction coefficient. The default is 0.0.\n\nnormk\n\npython:float, optional\n\nScale factor of the normal spring constant.  The default is 0.01.\n\nsheark\n\npython:float, optional\n\nRatio between the sheark/normk. The default is 0.2857.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_define_de_mesh_surface(sid, type, despid, desxid, nquad=1, nsid=0, rsf=1.0)\n\nCreate discrete element sphere (DES) elements on the surface of shell elements.\n\nParameters\n\nsid\n\npython:int\n\nPart or part set ID for the region of the mesh to place DES elements on.\n\ntype\n\npython:int\n\nSID type:\n\ntype=0: Part set ID\n\ntype=1: Part ID\n\ndespid\n\npython:int\n\nPart ID for the generated DES elements.\n\ndesxid\n\npython:int\n\nSection ID for the generated DES elements.\n\nnquad\n\npython:int, optional\n\nNumber of equally spaced DES elements created on a shell element in each\nlocal shell direction. The default is 1.\n\nnsid\n\npython:int, optional\n\nIf defined, this card creates a node set with ID NSID for the nodes generated\nby this card. The default is 0.\n\nrsf\n\npython:float, optional\n\nScale factor for determining the DES radius. The default is 1.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DynaDEM.set_des",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > set_des",
        "section": "Module Contents > set_des",
        "text": "set_des(ndamp=0.0, tdamp=0.0, frics=0.0, fricr=0.0, normk=0.01, sheark=0.2857)\n\nSet global control parameters for discrete element spheres.\n\nParameters\n\nndamp\n\npython:float, optional\n\nNormal damping coefficient. The default is 0.0.\n\ntdamp\n\npython:float, optional\n\nTangential damping coefficient. The default is 0.0.\n\nfrics\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.0.\n\nEQ.0: 3 DOF\n\nNE.0: 6 DOF\n\nfricr\n\npython:float, optional\n\nRolling friction coefficient. The default is 0.0.\n\nnormk\n\npython:float, optional\n\nScale factor of the normal spring constant.  The default is 0.01.\n\nsheark\n\npython:float, optional\n\nRatio between the sheark/normk. The default is 0.2857.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DynaDEM.create_define_de_mesh_surface",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > create_define_de_mesh_surface",
        "section": "Module Contents > create_define_de_mesh_surface",
        "text": "create_define_de_mesh_surface(sid, type, despid, desxid, nquad=1, nsid=0, rsf=1.0)\n\nCreate discrete element sphere (DES) elements on the surface of shell elements.\n\nParameters\n\nsid\n\npython:int\n\nPart or part set ID for the region of the mesh to place DES elements on.\n\ntype\n\npython:int\n\nSID type:\n\ntype=0: Part set ID\n\ntype=1: Part ID\n\ndespid\n\npython:int\n\nPart ID for the generated DES elements.\n\ndesxid\n\npython:int\n\nSection ID for the generated DES elements.\n\nnquad\n\npython:int, optional\n\nNumber of equally spaced DES elements created on a shell element in each\nlocal shell direction. The default is 1.\n\nnsid\n\npython:int, optional\n\nIf defined, this card creates a node set with ID NSID for the nodes generated\nby this card. The default is 0.\n\nrsf\n\npython:float, optional\n\nScale factor for determining the DES radius. The default is 1.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DynaDEM.save_file",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > DEMAnalysis",
        "section": "Module Contents > DEMAnalysis",
        "text": "class ansys.dyna.core.pre.dynadem.DEMAnalysis\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nActivates DEM analysis and defines associated control parameters.\n\n!! processed by numpydoc !!\n\n\n\ndefined_des = False\n\n\n\n\n\nstub\n\n\n\n\n\ntype = 'analysis_dem'\n\n\n\n\n\nset_des(normal_damping_coeff=0.0, tangential_damping_coeff=0.0, static_friction_coeff=0.0, rolling_friction_coeff=0.0, normal_spring_constant_sf=0.01, ratio=0.2857)\n\nSet global control parameters for discrete element spheres.\n\nParameters\n\nnormal_damping_coeff\n\npython:float, optional\n\nNormal damping coefficient. The default value is 0.0.\n\ntangential_damping_coeff\n\npython:float, optional\n\nTangential damping coefficient. The default value is 0.0.\n\nstatic_friction_coeff\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.0.\n\nrolling_friction_coeff\n\npython:float, optional\n\nRolling coefficient of friction. The default is 0.0.\n\nnormal_spring_constant_sf\n\npython:float, optional\n\nNormal spring constant. The default is 0.01.\n\nratio\n\npython:float, optional\n\nRatio. The default is 0.2857.\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate a DEM analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis.defined_des",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > defined_des",
        "section": "Module Contents > defined_des",
        "text": "defined_des = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis.type",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'analysis_dem'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis.set_des",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > set_des",
        "section": "Module Contents > set_des",
        "text": "set_des(normal_damping_coeff=0.0, tangential_damping_coeff=0.0, static_friction_coeff=0.0, rolling_friction_coeff=0.0, normal_spring_constant_sf=0.01, ratio=0.2857)\n\nSet global control parameters for discrete element spheres.\n\nParameters\n\nnormal_damping_coeff\n\npython:float, optional\n\nNormal damping coefficient. The default value is 0.0.\n\ntangential_damping_coeff\n\npython:float, optional\n\nTangential damping coefficient. The default value is 0.0.\n\nstatic_friction_coeff\n\npython:float, optional\n\nStatic coefficient of friction. The default is 0.0.\n\nrolling_friction_coeff\n\npython:float, optional\n\nRolling coefficient of friction. The default is 0.0.\n\nnormal_spring_constant_sf\n\npython:float, optional\n\nNormal spring constant. The default is 0.01.\n\nratio\n\npython:float, optional\n\nRatio. The default is 0.2857.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynadem/index",
        "href": "autoapi/ansys/dyna/core/pre/dynadem/index.html#ansys.dyna.core.pre.dynadem.DEMAnalysis.create",
        "title": "ansys.dyna.core.pre.dynadem > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate a DEM analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansysdynacorelibimport_handler",
        "title": "ansys.dyna.core.lib.import_handler",
        "section": "ansys.dyna.core.lib.import_handler",
        "text": "Import handler used by the import deck feature\nansys.dyna.core.lib.import_handler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#classes",
        "title": "ansys.dyna.core.lib.import_handler > Classes",
        "section": "Classes",
        "text": "ImportContext\nOptional transformation to apply, using type IncludeTransform\nImportHandler\nBase class for import handlers.\nClasses\nImportContext\nImportHandler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#module-contents",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents",
        "section": "Module Contents",
        "text": "Optional transformation to apply, using type IncludeTransform\nDeck into which the import is occurring.\nPath of file that is importing.\nBase class for import handlers.\nEvent called before reading a keyword.\nkeyword is the string label of the keyword\nbuffer is a copy of the buffer to read from.\nUsage:\nReturn True if the keyword is to be imported as usual.\nReturn False if the keyword is not to be imported.\nEvent called after a keyword is imported.\nkeyword is the imported keyword. It could be a string or a keyword object\nDepending on the context is a\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportContext",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > ImportContext",
        "section": "Module Contents > ImportContext",
        "text": "class ansys.dyna.core.lib.import_handler.ImportContext\n\nOptional transformation to apply, using type IncludeTransform\n\n!! processed by numpydoc !!\n\n\n\nxform: Any = None\n\nDeck into which the import is occurring.\n\n!! processed by numpydoc !!\n\n\n\ndeck: Any = None\n\nPath of file that is importing.\n\n!! processed by numpydoc !!\n\n\n\npath: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportContext.xform",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > xform",
        "section": "Module Contents > xform",
        "text": "xform: Any = None\n\nDeck into which the import is occurring.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportContext.deck",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > deck",
        "section": "Module Contents > deck",
        "text": "deck: Any = None\n\nPath of file that is importing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportContext.path",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > path",
        "section": "Module Contents > path",
        "text": "path: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportHandler",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > ImportHandler",
        "section": "Module Contents > ImportHandler",
        "text": "class ansys.dyna.core.lib.import_handler.ImportHandler\n\nBase class for import handlers.\n\n!! processed by numpydoc !!\n\n\n\nbefore_import(context: ImportContext, keyword: str, buffer: TextIO)\n\nEvent called before reading a keyword.\n\nkeyword is the string label of the keyword\nbuffer is a copy of the buffer to read from.\n\nUsage:\nReturn True if the keyword is to be imported as usual.\nReturn False if the keyword is not to be imported.\n\n!! processed by numpydoc !!\n\n\n\nafter_import(context: ImportContext, keyword: str | ansys.dyna.core.lib.keyword_base.KeywordBase)\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!\n\n\n\non_error(error)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportHandler.before_import",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > before_import",
        "section": "Module Contents > before_import",
        "text": "before_import(context: ImportContext, keyword: str, buffer: TextIO)\n\nEvent called before reading a keyword.\n\nkeyword is the string label of the keyword\nbuffer is a copy of the buffer to read from.\n\nUsage:\nReturn True if the keyword is to be imported as usual.\nReturn False if the keyword is not to be imported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportHandler.after_import",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > after_import",
        "section": "Module Contents > after_import",
        "text": "after_import(context: ImportContext, keyword: str | ansys.dyna.core.lib.keyword_base.KeywordBase)\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/import_handler/index",
        "href": "autoapi/ansys/dyna/core/lib/import_handler/index.html#ansys.dyna.core.lib.import_handler.ImportHandler.on_error",
        "title": "ansys.dyna.core.lib.import_handler > Module Contents > on_error",
        "section": "Module Contents > on_error",
        "text": "on_error(error)\n\n"
    },
    {
        "objectID": "examples/Thermal/index",
        "href": "examples/Thermal/index.html#thermal-examples",
        "title": "Thermal examples",
        "section": "Thermal examples",
        "text": "These examples show how to create and use thermal models.\nsphx_glr_examples_Thermal_thermal_stress.py\nThermal examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/io_utils/index",
        "href": "autoapi/ansys/dyna/core/lib/io_utils/index.html#ansysdynacorelibio_utils",
        "title": "ansys.dyna.core.lib.io_utils",
        "section": "ansys.dyna.core.lib.io_utils",
        "text": "Utils for i/o.\nansys.dyna.core.lib.io_utils"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/io_utils/index",
        "href": "autoapi/ansys/dyna/core/lib/io_utils/index.html#functions",
        "title": "ansys.dyna.core.lib.io_utils > Functions",
        "section": "Functions",
        "text": "write_or_return(→ Optional[str])\nWrite to buffer or returns a string.\nFunctions\nwrite_or_return"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/io_utils/index",
        "href": "autoapi/ansys/dyna/core/lib/io_utils/index.html#module-contents",
        "title": "ansys.dyna.core.lib.io_utils > Module Contents",
        "section": "Module Contents",
        "text": "Write to buffer or returns a string.\nUses the callable func to write. If buf is None, then the function will create a string buffer\nbefore calling func and return the result as a string.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/io_utils/index",
        "href": "autoapi/ansys/dyna/core/lib/io_utils/index.html#ansys.dyna.core.lib.io_utils.write_or_return",
        "title": "ansys.dyna.core.lib.io_utils > Module Contents > write_or_return",
        "section": "Module Contents > write_or_return",
        "text": "ansys.dyna.core.lib.io_utils.write_or_return(buf: TextIO | None, func: Callable) -> str | None\n\nWrite to buffer or returns a string.\n\nUses the callable func to write. If buf is None, then the function will create a string buffer\nbefore calling func and return the result as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/EM/em_rlc_define_func",
        "href": "examples/EM/em_rlc_define_func.html#rlc-circuit-by-function",
        "title": "RLC circuit by function",
        "section": "RLC circuit by function",
        "text": "This example shows how to use the Function object to define an\nRLC circuit as an inlet boundary condition. The executable file for\nLS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.031 seconds)\nDownload Jupyter notebook: em_rlc_define_func.ipynb\nDownload Python source code: em_rlc_define_func.py\nDownload zipped: em_rlc_define_func.zip\nGallery generated by Sphinx-Gallery\nRLC circuit by function\nFunction\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_rlc_define_func.ipynb\nDownload Python source code: em_rlc_define_func.py\nDownload zipped: em_rlc_define_func.zip"
    },
    {
        "objectID": "examples/EM/index",
        "href": "examples/EM/index.html#em-examples",
        "title": "EM examples",
        "section": "EM examples",
        "text": "These examples show how to create and use electromagnetic models.\nsphx_glr_examples_EM_em_resistive_heating.py\nsphx_glr_examples_EM_em_resistive_heating_2d.py\nsphx_glr_examples_EM_em_resistive_heating_2d_isopots.py\nsphx_glr_examples_EM_em_resistive_heating_2d_multi_isopots.py\nsphx_glr_examples_EM_em_rlc_define_func.py\nsphx_glr_examples_EM_em_rlc_isopotential.py\nEM examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansysdynacoresolverlauncher",
        "title": "ansys.dyna.core.solver.launcher",
        "section": "ansys.dyna.core.solver.launcher",
        "text": "Module for launching the pydyna solver service locally.\nansys.dyna.core.solver.launcher"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#attributes",
        "title": "ansys.dyna.core.solver.launcher > Attributes",
        "section": "Attributes",
        "text": "LOCALHOST\n\nDYNA_DEFAULT_PORT\n\nSERVER_SOLVER_VERSION\n\nMAX_MESSAGE_LENGTH\n\nAttributes\nLOCALHOST\nDYNA_DEFAULT_PORT\nSERVER_SOLVER_VERSION\nMAX_MESSAGE_LENGTH"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#classes",
        "title": "ansys.dyna.core.solver.launcher > Classes",
        "section": "Classes",
        "text": "ServerThread\nProvides server thread properties.\nClasses\nServerThread"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#functions",
        "title": "ansys.dyna.core.solver.launcher > Functions",
        "section": "Functions",
        "text": "check_ports(port_range[, ip])\nCheck the state of ports in a port range.\nport_in_use(port[, host])\nDetermine if a port is in use at a given host.\nlaunch_grpc(→ tuple)\nLaunch the solver service locally in gRPC mode.\nlaunch_remote_dyna(→ ansys.dyna.core.solver.DynaSolver)\nStart DYNA remotely using the product instance management API.\nlaunch_dyna(→ ansys.dyna.core.solver.DynaSolver)\nStart DYNA locally.\nFunctions\ncheck_ports\nport_in_use\nlaunch_grpc\nlaunch_remote_dyna\nlaunch_dyna"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#module-contents",
        "title": "ansys.dyna.core.solver.launcher > Module Contents",
        "section": "Module Contents",
        "text": "Check the state of ports in a port range.\nIP address. The default is \"localhost\", in which case\n``”127.0.0.1”``is used.\nDetermine if a port is in use at a given host.\nPort.\nis used.\nThe port must “bind” the address. Just checking if a socket can be created\nis insufficient because it is possible to run into permission\nerrors like this one:\n“An attempt was made to access a socket in a way forbidden by its\naccess permissions.”\nLaunch the solver service locally in gRPC mode.\nPort to launch the solver service on. The default is DYNAPRE_DEFAULT_PORT.\nThe final port is the first port available after (or including) this\nport.\nIP address. The default is LOCALHOST, in which case \"127.0.0.1\"\nis used.\nPath to the solver service. The default is None.\nPort number that the gRPC instance started on.\nStart DYNA remotely using the product instance management API.\nWhen calling this method, you need to ensure that you are in an environment where PyPIM is configured.\nThis can be verified with pypim.is_configured.\nThe DYNA version to run, in the 3 digits format, such as “212”.\nIf unspecified, the version will be chosen by the server.\nExit DYNA when python exits or the dyna Python instance is\ngarbage collected.\nIf unspecified, it will be cleaned up.\nAn instance of DynaSolver.\nStart DYNA locally.\nThe product version to be started. Goes from v20.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nAnsys products versions and their corresponding int values:\n241 : Ansys 24R1\n242 : Ansys 24R2\nPort to launch DYNA gRPC on.  Final port will be the first\nport available after (or including) this port.  Defaults to\n5000.\nYou can provide a hostname as an alternative to an IP address.\nDefaults to '127.0.0.1'.\nLaunch DYNA using the best protocol.\nConnect to an existing instance of DYNA at IP 192.168.1.30 and\nport 5000.\nProvides server thread properties.\nModule Contents\npython:str\noptional\n\"localhost\"\npython:int\nLOCALHOST\n\"127.0.0.1\"\nTrue\nwhen\na\nport\nis\nin\nuse\nat\nthe\ngiven\nhost\nFalse\npython:int\noptional\nDYNAPRE_DEFAULT_PORT\npython:str\noptional\nLOCALHOST\n\"127.0.0.1\"\npython:str\noptional\nNone\npython:int\npypim.is_configured\npython:str\noptional\noptional\nansys.dyna.core.solver.DynaSolver\nNone\n241\n242\npython:int\noptional\n'127.0.0.1'"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.LOCALHOST",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > LOCALHOST",
        "section": "Module Contents > LOCALHOST",
        "text": "ansys.dyna.core.solver.launcher.LOCALHOST = '127.0.0.1'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.DYNA_DEFAULT_PORT",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > DYNA_DEFAULT_PORT",
        "section": "Module Contents > DYNA_DEFAULT_PORT",
        "text": "ansys.dyna.core.solver.launcher.DYNA_DEFAULT_PORT = 5000\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.SERVER_SOLVER_VERSION",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > SERVER_SOLVER_VERSION",
        "section": "Module Contents > SERVER_SOLVER_VERSION",
        "text": "ansys.dyna.core.solver.launcher.SERVER_SOLVER_VERSION = 'v0.4.13'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.MAX_MESSAGE_LENGTH",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > MAX_MESSAGE_LENGTH",
        "section": "Module Contents > MAX_MESSAGE_LENGTH",
        "text": "ansys.dyna.core.solver.launcher.MAX_MESSAGE_LENGTH = 8388608\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.check_ports",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > check_ports",
        "section": "Module Contents > check_ports",
        "text": "ansys.dyna.core.solver.launcher.check_ports(port_range, ip='localhost')\n\nCheck the state of ports in a port range.\n\nParameters\n\nport_range\n\n\n\nip\n\npython:str, optional\n\nIP address. The default is \"localhost\", in which case\n``”127.0.0.1”``is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.port_in_use",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > port_in_use",
        "section": "Module Contents > port_in_use",
        "text": "ansys.dyna.core.solver.launcher.port_in_use(port, host=LOCALHOST)\n\nDetermine if a port is in use at a given host.\n\nParameters\n\nport\n\npython:int\n\nPort.\n\nhost\n\nHost. The default is LOCALHOST, in which case \"127.0.0.1\"\n\nis used.\n\nReturns\n\nTrue when a port is in use at the given host, False otherwise.\n\n\n\nNotes\n\nThe port must “bind” the address. Just checking if a socket can be created\nis insufficient because it is possible to run into permission\nerrors like this one:\n\n“An attempt was made to access a socket in a way forbidden by its\naccess permissions.”\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.launch_grpc",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > launch_grpc",
        "section": "Module Contents > launch_grpc",
        "text": "ansys.dyna.core.solver.launcher.launch_grpc(port=DYNA_DEFAULT_PORT, ip=LOCALHOST, server_path='', product_version=None) -> tuple\n\nLaunch the solver service locally in gRPC mode.\n\nParameters\n\nport\n\npython:int, optional\n\nPort to launch the solver service on. The default is DYNAPRE_DEFAULT_PORT.\nThe final port is the first port available after (or including) this\nport.\n\nip\n\npython:str, optional\n\nIP address. The default is LOCALHOST, in which case \"127.0.0.1\"\nis used.\n\nserver_path\n\npython:str, optional\n\nPath to the solver service. The default is None.\n\nReturns\n\npython:int\n\nPort number that the gRPC instance started on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.launch_remote_dyna",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > launch_remote_dyna",
        "section": "Module Contents > launch_remote_dyna",
        "text": "ansys.dyna.core.solver.launcher.launch_remote_dyna(version=None, cleanup_on_exit=True) -> ansys.dyna.core.solver.DynaSolver\n\nStart DYNA remotely using the product instance management API.\n\nWhen calling this method, you need to ensure that you are in an environment where PyPIM is configured.\nThis can be verified with pypim.is_configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe DYNA version to run, in the 3 digits format, such as “212”.\n\nIf unspecified, the version will be chosen by the server.\n\ncleanup_on_exit\n\nbool, optional\n\nExit DYNA when python exits or the dyna Python instance is\ngarbage collected.\n\nIf unspecified, it will be cleaned up.\n\nReturns\n\nansys.dyna.core.solver.DynaSolver\n\nAn instance of DynaSolver.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.launch_dyna",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > launch_dyna",
        "section": "Module Contents > launch_dyna",
        "text": "ansys.dyna.core.solver.launcher.launch_dyna(product_version: int = None, port=None, ip=None) -> ansys.dyna.core.solver.DynaSolver\n\nStart DYNA locally.\n\nParameters\n\nproduct_version: int, optional\n\nThe product version to be started. Goes from v20.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nAnsys products versions and their corresponding int values:\n\n241 : Ansys 24R1\n\n242 : Ansys 24R2\n\nport\n\npython:int\n\nPort to launch DYNA gRPC on.  Final port will be the first\nport available after (or including) this port.  Defaults to\n5000.\n\nip\n\nbool, optional\n\nYou can provide a hostname as an alternative to an IP address.\nDefaults to '127.0.0.1'.\n\nExamples\n\nLaunch DYNA using the best protocol.\n\n>>> from ansys.dyna.core.solver import launch_dyna\n>>> solution = launch_dyna()\n\nConnect to an existing instance of DYNA at IP 192.168.1.30 and\nport 5000.\n\n>>> solution = launch_dyna(ip='192.168.1.30',port=5000)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > ServerThread",
        "section": "Module Contents > ServerThread",
        "text": "class ansys.dyna.core.solver.launcher.ServerThread(threadID, port, ip, server_path)\n\nProvides server thread properties.\n\nParameters\n\nthreadID\n\n\n\nport\n\n\n\nip\n\n\n\nserver_path\n\n\n\n!! processed by numpydoc !!\n\n\n\nthreadID\n\n\n\n\n\nport\n\n\n\n\n\nip\n\n\n\n\n\nserver_path\n\n\n\n\n\nprocess = None\n\n\n\n\n\nrun()\n\n\n\n\n\ntermination()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.threadID",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > threadID",
        "section": "Module Contents > threadID",
        "text": "threadID\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.port",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > port",
        "section": "Module Contents > port",
        "text": "port\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.ip",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > ip",
        "section": "Module Contents > ip",
        "text": "ip\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.server_path",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > server_path",
        "section": "Module Contents > server_path",
        "text": "server_path\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.process",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > process",
        "section": "Module Contents > process",
        "text": "process = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.run",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/launcher/index",
        "href": "autoapi/ansys/dyna/core/solver/launcher/index.html#ansys.dyna.core.solver.launcher.ServerThread.termination",
        "title": "ansys.dyna.core.solver.launcher > Module Contents > termination",
        "section": "Module Contents > termination",
        "text": "termination()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansysdynacorelibcard_interface",
        "title": "ansys.dyna.core.lib.card_interface",
        "section": "ansys.dyna.core.lib.card_interface",
        "text": "ansys.dyna.core.lib.card_interface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#classes",
        "title": "ansys.dyna.core.lib.card_interface > Classes",
        "section": "Classes",
        "text": "CardInterface\nAbstract base class for all the implementations of keyword cards.\nClasses\nCardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#module-contents",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents",
        "section": "Module Contents",
        "text": "Abstract base class for all the implementations of keyword cards.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nGet the card format type.\nReturn whether the card is active.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > CardInterface",
        "section": "Module Contents > CardInterface",
        "text": "class ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod __subclasshook__(subclass)\n\n\n\n\n\nabstractmethod read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet | None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nabstractmethod write(format: ansys.dyna.core.lib.format_type.format_type | None, buf: TextIO | None, comment: bool | None) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nAbstractmethod\n\n\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\nAbstractmethod\n\n\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface.__subclasshook__",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > __subclasshook__",
        "section": "Module Contents > __subclasshook__",
        "text": "classmethod __subclasshook__(subclass)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface.read",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > read",
        "section": "Module Contents > read",
        "text": "abstractmethod read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet | None) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface.write",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > write",
        "section": "Module Contents > write",
        "text": "abstractmethod write(format: ansys.dyna.core.lib.format_type.format_type | None, buf: TextIO | None, comment: bool | None) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface.format",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nAbstractmethod\n\n\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_interface/index",
        "href": "autoapi/ansys/dyna/core/lib/card_interface/index.html#ansys.dyna.core.lib.card_interface.CardInterface.active",
        "title": "ansys.dyna.core.lib.card_interface > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nAbstractmethod\n\n\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/index",
        "href": "examples/John_Reid_Pendulum/index.html#pendulum",
        "title": "Pendulum",
        "section": "Pendulum",
        "text": "This example is adapted from https://lsdyna.ansys.com/pendlum/ to run from Python.\nsphx_glr_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py\nPendulum"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/index",
        "href": "autoapi/ansys/dyna/core/solver/index.html#ansysdynacoresolver",
        "title": "ansys.dyna.core.solver",
        "section": "ansys.dyna.core.solver",
        "text": "ansys.dyna.core.solver"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/index",
        "href": "autoapi/ansys/dyna/core/solver/index.html#submodules",
        "title": "ansys.dyna.core.solver > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the PyDyna project.\nRelease notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#071---2025-02-25",
        "title": "Release notes > 0.7.1 - 2025-02-25",
        "section": "0.7.1 - 2025-02-25",
        "text": "0.7.1 - 2025-02-25"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: Add .remove method to deck class (#681) #682\nfix: BOUNDARY_PRESCRIBED_MOTION_*_ID option and CONTROL_MPP_DECOMPOSITION_TRANSFORMATION (Issue #696) #701\nfix: Mat 196 (#707) #708\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build(deps): bump numpy from 2.1.3 to 2.2.2 #670\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "build(deps): bump pyvista from 0.44.1 to 0.44.2 #651\nbuild(deps): bump jupyterlab from 4.3.1 to 4.3.4 #652\nbuild(deps): bump nbsphinx from 0.9.5 to 0.9.6 #655\nbuild(deps): bump ansys-sphinx-theme from 1.2.2 to 1.2.6 #665\n[pre-commit.ci] pre-commit autoupdate #666\nfix: Options api rework #671\nbuild(deps): bump ipython from 8.29.0 to 8.31.0 #673\nbuild(deps): bump imageio from 2.36.1 to 2.37.0 #674\nbuild(deps): bump scikit-learn from 1.6.0 to 1.6.1 #675\nbuild(deps): bump sphinx-autodoc-typehints from 2.5.0 to 3.0.1 #676\nbuild(deps): bump pypandoc from 1.14 to 1.15 #677\nchore: [pre-commit.ci] pre-commit autoupdate #678, #743\nbuild(deps): bump imageio-ffmpeg from 0.5.1 to 0.6.0 #694\nfix: Support multiline include #699\nfix: SET_PART_LIST_GENERATE #702\nRename variable card #703\nchore: add dependabot groups #704\nchore: bump the doc group with 5 updates #705\nfix: Assign series card property #706\nfeat: Assign fields for duplicate cards in constructor #716\nchore: bump numpy from 2.2.2 to 2.2.3 #722\nchore: pre-commit autoupdate #724\nchore: bump the doc group across 1 directory with 2 updates #727\nfix: Read parameters #728\nfix: add test scenario for bug 584 #729\nfix: Rework defaults #730\nchore: bump the doc group with 3 updates #741\nfix: Contact mpp fix #744\nfeat: add api to get keyword names #745\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Fix BOUNDARY_PRESCRIBED_MOTION and CONSTRAINED_BEAM_IN_SOLID #668\nfix: *CONSTRAINED_ADAPTIVITY (#650) #683\nfix: deck.get() in the presence of Encrypted keywords #720\nfix: mat295 iso #725\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: update CHANGELOG for v0.7.0 #661\nRelease/0.7 #662\nsupport single path in *INCLUDE_PATH in the expand method #697\nfeat: Start to handle *INCLUDE_TRANSFORM in Deck.expand() #709\nfeat: Import encrypted file #712\nfix: Allow setting option fields to None #713\nci: use main version of the action for doc-style #715\nadd active func to codegen for duplicate card group #718\nDefault duplicate card #731\nfix: Rename cards #732\nfix: Contact options #733\nRefactor codegen #734\nFix issues #742\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#test",
        "title": "Release notes > Test",
        "section": "Test",
        "text": "feat: get by subkeyword and add transform links #735\nfeat: begin to handle *DEFINE_TRANSFORMATION when expanding include decks #740\nTest"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#070---2025-01-10",
        "title": "Release notes > 0.7.0 - 2025-01-10",
        "section": "0.7.0 - 2025-01-10",
        "text": "0.7.0 - 2025-01-10"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "fix: CONTROL_TIMESTEP and CONTROL_TIME_STEP (#629) #631\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build(deps): bump ansys-sphinx-theme from 1.2.1 to 1.2.2 #630\nbuild(deps): bump matplotlib from 3.9.2 to 3.10.0 #640\nbuild(deps): bump scikit-learn from 1.5.2 to 1.6.0 #642\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "chore: update CHANGELOG for v0.6.1 #627\nfix: update launcher,add argument to define ansys version #632\nbuild(deps): bump pytest from 8.3.3 to 8.3.4 #633\nbuild(deps): bump sphinx-autoapi from 3.3.3 to 3.4.0 #635\nbuild(deps): bump imageio from 2.36.0 to 2.36.1 #636\nbuild(deps): bump ansys-api-dyna from 0.4.1 to 0.4.2 #637\n[pre-commit.ci] pre-commit autoupdate #638\nadd parameter set to lib #644\nfeat: support 3.13 #645\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: reading *CONTROL_DEBUG #643\nfix run_dyna #658\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "fix: warn out of bounds characters when reading lines #647\ntest: add test for deepcopy #648\nfeat: Option to disable LSPP defaults #649\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#061---2024-11-22",
        "title": "Release notes > 0.6.1 - 2024-11-22",
        "section": "0.6.1 - 2024-11-22",
        "text": "0.6.1 - 2024-11-22"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "build(deps): bump jupyterlab from 4.3.0 to 4.3.1 #618\nbuild(deps): bump ansys-sphinx-theme from 1.2.0 to 1.2.1 #619\nbuild: allow Numpy 1.X #626\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: update CHANGELOG for v0.6.0 #625\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#060---2024-11-20",
        "title": "Release notes > 0.6.0 - 2024-11-20",
        "section": "0.6.0 - 2024-11-20",
        "text": "0.6.0 - 2024-11-20"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: changelog actions #613\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "fix: make pr-check-title independent #624\nMiscellaneous"
    },
    {
        "objectID": "examples/NVH/nvh_frf_solid",
        "href": "examples/NVH/nvh_frf_solid.html#frf-for-a-colume-model-with-a-hole",
        "title": "FRF for a colume model with a hole",
        "section": "FRF for a colume model with a hole",
        "text": "This example shows a column with a hole using solid elements.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.030 seconds)\nDownload Jupyter notebook: nvh_frf_solid.ipynb\nDownload Python source code: nvh_frf_solid.py\nDownload zipped: nvh_frf_solid.zip\nGallery generated by Sphinx-Gallery\nFRF for a colume model with a hole\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: nvh_frf_solid.ipynb\nDownload Python source code: nvh_frf_solid.py\nDownload zipped: nvh_frf_solid.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index.html#ansysdynacorelibtransformsutilsdefine_transformation",
        "title": "ansys.dyna.core.lib.transforms.utils.define_transformation",
        "section": "ansys.dyna.core.lib.transforms.utils.define_transformation",
        "text": "Algorithms to compute 4x4 transformation matrices from a *DEFINE_TRANSFORMATION keyword.\nansys.dyna.core.lib.transforms.utils.define_transformation"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index.html#functions",
        "title": "ansys.dyna.core.lib.transforms.utils.define_transformation > Functions",
        "section": "Functions",
        "text": "get_transform_matrix(→ Optional[numpy.ndarray])\n\nFunctions\nget_transform_matrix"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index.html#module-contents",
        "title": "ansys.dyna.core.lib.transforms.utils.define_transformation > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index",
        "href": "autoapi/ansys/dyna/core/lib/transforms/utils/define_transformation/index.html#ansys.dyna.core.lib.transforms.utils.define_transformation.get_transform_matrix",
        "title": "ansys.dyna.core.lib.transforms.utils.define_transformation > Module Contents > get_transform_matrix",
        "section": "Module Contents > get_transform_matrix",
        "text": "ansys.dyna.core.lib.transforms.utils.define_transformation.get_transform_matrix(kwd: ansys.dyna.core.keywords.keyword_classes.auto.define_transformation.DefineTransformation | None) -> numpy.ndarray | None\n\n"
    },
    {
        "objectID": "examples/ISPH/index",
        "href": "examples/ISPH/index.html#isph-examples",
        "title": "ISPH examples",
        "section": "ISPH examples",
        "text": "These examples show how to create and use ISPH (incompressible\nsmooth particle hydrodynamics) models.\nsphx_glr_examples_ISPH_rigidtest.py\nISPH examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#ansysdynacorekeywords",
        "title": "ansys.dyna.core.keywords",
        "section": "ansys.dyna.core.keywords",
        "text": "ANSYS Dyna Keywords Module.\nansys.dyna.core.keywords"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#submodules",
        "title": "ansys.dyna.core.keywords > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#attributes",
        "title": "ansys.dyna.core.keywords > Attributes",
        "section": "Attributes",
        "text": "USER_DATA_PATH\n\nEXAMPLES_PATH\n\nAttributes\nUSER_DATA_PATH\nEXAMPLES_PATH"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#package-contents",
        "title": "ansys.dyna.core.keywords > Package Contents",
        "section": "Package Contents",
        "text": "Package Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#ansys.dyna.core.keywords.USER_DATA_PATH",
        "title": "ansys.dyna.core.keywords > Package Contents > USER_DATA_PATH",
        "section": "Package Contents > USER_DATA_PATH",
        "text": "ansys.dyna.core.keywords.USER_DATA_PATH = b'.'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/index",
        "href": "autoapi/ansys/dyna/core/keywords/index.html#ansys.dyna.core.keywords.EXAMPLES_PATH",
        "title": "ansys.dyna.core.keywords > Package Contents > EXAMPLES_PATH",
        "section": "Package Contents > EXAMPLES_PATH",
        "text": "ansys.dyna.core.keywords.EXAMPLES_PATH\n\n"
    },
    {
        "objectID": "examples/SALE/sg_execution_times",
        "href": "examples/SALE/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.222 total execution time for 1 file from examples/SALE:\nExample\nTime\nMem (MB)\nsphx_glr_examples_SALE_sale_efp.py (sale_efp.py)\n00:00.222\n0.0\nComputation times\nsale_efp.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansysdynacorepredynalogging",
        "title": "ansys.dyna.core.pre.dynalogging",
        "section": "ansys.dyna.core.pre.dynalogging",
        "text": "Logging module supplying a general framework for logging in the PyDYNA\npre service.\nThis module is built upon the Python logging\nmodule. It is not intended to replace this Python module but rather to provide a way\nfor it and the PyDyna pre service to interact.\nThe loggers used in this PyDyna logging mdoule include the name of the instance,\nwhich is intended to be unique. This name is printed in all the active\noutputs and is used to track the different instances of the PyDyNA pre\nservice.\nansys.dyna.core.pre.dynalogging\npre\npre\npre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#global-logger",
        "title": "ansys.dyna.core.pre.dynalogging > Global logger",
        "section": "Global logger",
        "text": "The global logger, named pydyna_global, is created at\nansys.dyna.core.__init__.  If you want to use the global logger,\nyou must call it at the top of your module:\nYou can rename the global logger to avoid conflicts with other loggers (if any):\nThe default logging level of LOG is ERROR. To change this to output\nlower-level messages, you can use this code:\nAlternatively, you can set the logging level of LOG to DEBUG\nwith one line of code:\nLOG.setLevel(“DEBUG”)\nUsing the preceding line ensures that all the handlers are set to the input log level.\nBy default, this logger does not log to a file. If you want to log to a file,\nyou can add a file handler:\nThe preceding code sets the logger to also redirect to a file. If you want\nto change the characteristics of the global logger from the beginning\nof the execution, you must edit the __init__ file in the\nansys.dyna.core.pre directory.\nTo log using this logger, call the desired method as a normal logger.\nGlobal logger\npydyna_global\nansys.dyna.core.__init__\nLOG\nERROR\nLOG\nDEBUG\n__init__\nansys.dyna.core.pre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#instance-loggers",
        "title": "ansys.dyna.core.pre.dynalogging > Instance loggers",
        "section": "Instance loggers",
        "text": "Every time an instance of the Mapdl\nclass is created, a logger is created and stored in two places:\n_MapdlCore._log: For backward compatibility.\nLOG._instances: This field is a dictionary  where the key is the name\nof the created logger.\nInstance loggers inheritate the pydyna_global output handlers and\nlogging level unless otherwise specified. Instance loggers work in a\nsimilar way to the global logger. You can use the\nlog_to_file() method to add\na file handler or the logger.Logging.setLevel() method to change\nthe log level.\nInstance loggers\nMapdl\n_MapdlCore._log\nLOG._instances\npydyna_global\nlog_to_file()\nlogger.Logging.setLevel()"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#other-loggers",
        "title": "ansys.dyna.core.pre.dynalogging > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using the Python logging module as\nyou would do in any other script. No conflicts between these loggers exist.\nOther loggers\nlogging"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#attributes",
        "title": "ansys.dyna.core.pre.dynalogging > Attributes",
        "section": "Attributes",
        "text": "LOG_LEVEL\n\nFILE_NAME\n\nDEBUG\n\nINFO\n\nWARN\n\nERROR\n\nCRITICAL\n\nSTDOUT_MSG_FORMAT\n\nFILE_MSG_FORMAT\n\nDEFAULT_STDOUT_HEADER\n\nDEFAULT_FILE_HEADER\n\nNEW_SESSION_HEADER\n\nstring_to_loglevel\n\nLOG\n\nAttributes\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nstring_to_loglevel\nLOG"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#classes",
        "title": "ansys.dyna.core.pre.dynalogging > Classes",
        "section": "Classes",
        "text": "PymapdlCustomAdapter\nAdapter for keeping the reference to an MAPDL instance name dynamic.\nPymapdlPercentStyle\n\nPymapdlFormatter\nProvides a customized Formatter class for overwriting the default format styles.\nInstanceFilter\nEnsures that the instance_name record always exists.\nLogger\nProvides the logger used for each PyDyna pre session.\nClasses\nPymapdlCustomAdapter\nPymapdlPercentStyle\nPymapdlFormatter\nFormatter\nInstanceFilter\ninstance_name\nLogger\npre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#functions",
        "title": "ansys.dyna.core.pre.dynalogging > Functions",
        "section": "Functions",
        "text": "addfile_handler(logger[, filename, level, write_headers])\nAdd a file handler to the input.\nadd_stdout_handler(logger[, level, write_headers])\nAdd a file handler to the logger.\nFunctions\naddfile_handler\nadd_stdout_handler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents",
        "section": "Module Contents",
        "text": "Bases: logging.LoggerAdapter\nAdapter for keeping the reference to an MAPDL instance name dynamic.\nUsing the standard approach, extra parameters must be supplied\nto the logger to indicate the MAPDL instance for which messages\nmust be logged.\nWith this class, you only have to specify the MAPDL instance\nthat you are referring to once.\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\nAdd a file handler to the logger.\nName of the file where logs are recorded. The default is FILE_NAME.\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\nAdd a standard output handler to the logger.\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\nChange the log level of the object and the attached handlers.\nLevel of logging record. The default is \"DEBUG.\nBases: logging.PercentStyle\nBases: logging.Formatter\nProvides a customized Formatter class for overwriting the default format styles.\nBases: logging.Filter\nEnsures that the instance_name record always exists.\nDetermine if the specified record is to be logged.\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\nProvides the logger used for each PyDyna pre session.\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\nWhether to write log messages to a file. The default is False.\nWhether to write log messages to the standard output. The default is\nTrue.\nName of the file to write log messages to if to_file=True. The default\nis FILE_NAME.\nDemonstrate logger usage from an MAPDL instance mapdl. This logger is\nautomatically created when an MAPDL instance is created.\nImport the global PYMAPDL logger and add a file output handler.\nAdd a file handler to logger.\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\nWrite to the pymapdl.log file in the current working directory.\nAdd a standard output handler to the logger.\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\nWhether to write the headers to the file. The default is True.\nChange the log level of the object and the attached handlers.\nLevel of logging. The default is 'DEBUG'.\nAdd a child logger to the main logger.\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName of the logger.\nLevel of logging. The default is None.\nLogger class.\nCreate a logger for an MAPDL instance.\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\nName for the new logger.\nMAPDL instance object. This should contain the name attribute.\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\nYou can only input strings as name to this method.\nRedirect the output of an exception to the logger.\nAdd a file handler to the input.\nLogger to add the file handler to.\nName of the output file. The default is FILE_NAME.\nLevel of logging. The default is LOG_LEVEL.\nWhether to write the headers to the file. The default is False.\nLogger or Logger object.\nAdd a file handler to the logger.\nLogger to add the file handler to.\nLevel of logging. The default is LOG_LEVEL, in which\ncase \"\"DEBUG\" is used.\nWhether to write the headers to the file. The default is False.\nLogger or Logger object.\nModule Contents\nlogging.LoggerAdapter\npython:str\noptional\nFILE_NAME\npython:str\noptional\nLOG_LEVEL\nDEBUG\npython:str\noptional\nLOG_LEVEL\n\"DEBUG\"\npython:str\noptional\n\"DEBUG\nlogging.PercentStyle\nlogging.Formatter\nFormatter\nlogging.Filter\ninstance_name\npre\npython:int\noptional\nlogging.DEBUG\noptional\nFalse\noptional\nTrue\npython:str\noptional\nto_file=True\nFILE_NAME\npython:str\noptional\nFILE_NAME\n'pymapdl.log'\npython:str\noptional\nLOG_LEVEL\n'DEBUG'\npymapdl.log\npython:str\noptional\nFILE_NAME\n'pymapdl.log'\npython:str\noptional\nLOG_LEVEL\n'DEBUG'\noptional\nTrue\npython:str\noptional\n'DEBUG'\n_global\npython:str\npython:str\noptional\nNone\nlogging.logger\n_instances\npython:str\nansys.mapdl.core.mapdl._MapdlCore\nname\nansys.mapdl.core.logging.PymapdlCustomAdapter\nlogger\nException\nname\nlogging.Logger\nlogging.Logger\npython:str\noptional\nFILE_NAME\npython:str\noptional\nLOG_LEVEL\noptional\nFalse\nlogger\nlogging.Logger\nlogging.Logger\npython:str\noptional\nLOG_LEVEL\n\"\"DEBUG\" is used\noptional\nFalse\nlogger"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.LOG_LEVEL",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > LOG_LEVEL",
        "section": "Module Contents > LOG_LEVEL",
        "text": "ansys.dyna.core.pre.dynalogging.LOG_LEVEL = 10\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.FILE_NAME",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > FILE_NAME",
        "section": "Module Contents > FILE_NAME",
        "text": "ansys.dyna.core.pre.dynalogging.FILE_NAME = 'pydyna.log'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.DEBUG",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > DEBUG",
        "section": "Module Contents > DEBUG",
        "text": "ansys.dyna.core.pre.dynalogging.DEBUG = 10\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.INFO",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > INFO",
        "section": "Module Contents > INFO",
        "text": "ansys.dyna.core.pre.dynalogging.INFO = 20\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.WARN",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > WARN",
        "section": "Module Contents > WARN",
        "text": "ansys.dyna.core.pre.dynalogging.WARN = 30\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.ERROR",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > ERROR",
        "section": "Module Contents > ERROR",
        "text": "ansys.dyna.core.pre.dynalogging.ERROR = 40\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.CRITICAL",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > CRITICAL",
        "section": "Module Contents > CRITICAL",
        "text": "ansys.dyna.core.pre.dynalogging.CRITICAL = 50\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.STDOUT_MSG_FORMAT",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > STDOUT_MSG_FORMAT",
        "section": "Module Contents > STDOUT_MSG_FORMAT",
        "text": "ansys.dyna.core.pre.dynalogging.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.FILE_MSG_FORMAT",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > FILE_MSG_FORMAT",
        "section": "Module Contents > FILE_MSG_FORMAT",
        "text": "ansys.dyna.core.pre.dynalogging.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.DEFAULT_STDOUT_HEADER",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > DEFAULT_STDOUT_HEADER",
        "section": "Module Contents > DEFAULT_STDOUT_HEADER",
        "text": "ansys.dyna.core.pre.dynalogging.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.DEFAULT_FILE_HEADER",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > DEFAULT_FILE_HEADER",
        "section": "Module Contents > DEFAULT_FILE_HEADER",
        "text": "ansys.dyna.core.pre.dynalogging.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.NEW_SESSION_HEADER",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > NEW_SESSION_HEADER",
        "section": "Module Contents > NEW_SESSION_HEADER",
        "text": "ansys.dyna.core.pre.dynalogging.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.string_to_loglevel",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > string_to_loglevel",
        "section": "Module Contents > string_to_loglevel",
        "text": "ansys.dyna.core.pre.dynalogging.string_to_loglevel\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > PymapdlCustomAdapter",
        "section": "Module Contents > PymapdlCustomAdapter",
        "text": "class ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nAdapter for keeping the reference to an MAPDL instance name dynamic.\n\nUsing the standard approach, extra parameters must be supplied\nto the logger to indicate the MAPDL instance for which messages\nmust be logged.\n\nWith this class, you only have to specify the MAPDL instance\nthat you are referring to once.\n\n!! processed by numpydoc !!\n\n\n\nlevel = None\n\n\n\n\n\nfile_handler = None\n\n\n\n\n\nstdout_handler = None\n\n\n\n\n\nlogger\n\n\n\n\n\nstd_out_handler\n\n\n\n\n\nprocess(msg, kwargs)\n\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\n\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\n\n!! processed by numpydoc !!\n\n\n\nlog_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\n\n!! processed by numpydoc !!\n\n\n\nlog_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\n\n!! processed by numpydoc !!\n\n\n\nsetLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is \"DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.level",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > level",
        "section": "Module Contents > level",
        "text": "level = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.file_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > file_handler",
        "section": "Module Contents > file_handler",
        "text": "file_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.stdout_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > stdout_handler",
        "section": "Module Contents > stdout_handler",
        "text": "stdout_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.logger",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > logger",
        "section": "Module Contents > logger",
        "text": "logger\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.std_out_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > std_out_handler",
        "section": "Module Contents > std_out_handler",
        "text": "std_out_handler\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.process",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > process",
        "section": "Module Contents > process",
        "text": "process(msg, kwargs)\n\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\n\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.log_to_file",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > log_to_file",
        "section": "Module Contents > log_to_file",
        "text": "log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.log_to_stdout",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > log_to_stdout",
        "section": "Module Contents > log_to_stdout",
        "text": "log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlCustomAdapter.setLevel",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > setLevel",
        "section": "Module Contents > setLevel",
        "text": "setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is \"DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlPercentStyle",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > PymapdlPercentStyle",
        "section": "Module Contents > PymapdlPercentStyle",
        "text": "class ansys.dyna.core.pre.dynalogging.PymapdlPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.PymapdlFormatter",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > PymapdlFormatter",
        "section": "Module Contents > PymapdlFormatter",
        "text": "class ansys.dyna.core.pre.dynalogging.PymapdlFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides a customized Formatter class for overwriting the default format styles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.InstanceFilter",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > InstanceFilter",
        "section": "Module Contents > InstanceFilter",
        "text": "class ansys.dyna.core.pre.dynalogging.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists.\n\n!! processed by numpydoc !!\n\n\n\nfilter(record)\n\nDetermine if the specified record is to be logged.\n\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.InstanceFilter.filter",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > filter",
        "section": "Module Contents > filter",
        "text": "filter(record)\n\nDetermine if the specified record is to be logged.\n\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > Logger",
        "section": "Module Contents > Logger",
        "text": "class ansys.dyna.core.pre.dynalogging.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides the logger used for each PyDyna pre session.\n\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\n\nto_file\n\nbool, optional\n\nWhether to write log messages to a file. The default is False.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output. The default is\nTrue.\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to if to_file=True. The default\nis FILE_NAME.\n\nExamples\n\nDemonstrate logger usage from an MAPDL instance mapdl. This logger is\nautomatically created when an MAPDL instance is created.\n\n>>> from ansys.mapdl.core import launch_mapdl\n>>> mapdl = launch_mapdl(loglevel='DEBUG')\n>>> mapdl._log.info('This is a useful message')\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the global PYMAPDL logger and add a file output handler.\n\n>>> import os\n>>> from ansys.mapdl.core import LOG\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!\n\n\n\nfile_handler = None\n\n\n\n\n\nstd_out_handler = None\n\n\n\n\n\nlogger\n\n\n\n\n\nlevel = 0\n\n\n\n\n\ndebug\n\n\n\n\n\ninfo\n\n\n\n\n\nwarning\n\n\n\n\n\nerror\n\n\n\n\n\ncritical\n\n\n\n\n\nlog\n\n\n\n\n\nlog_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nExamples\n\nWrite to the pymapdl.log file in the current working directory.\n\n>>> from ansys.mapdl.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!\n\n\n\nlog_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is True.\n\n!! processed by numpydoc !!\n\n\n\nsetLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 'DEBUG'.\n\n!! processed by numpydoc !!\n\n\n\nadd_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!\n\n\n\nadd_instance_logger(name, mapdl_instance, level=None)\n\nCreate a logger for an MAPDL instance.\n\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmapdl_instance\n\nansys.mapdl.core.mapdl._MapdlCore\n\nMAPDL instance object. This should contain the name attribute.\n\nReturns\n\nansys.mapdl.core.logging.PymapdlCustomAdapter\n\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n!! processed by numpydoc !!\n\n\n\n__getitem__(key)\n\n\n\n\n\nadd_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.file_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > file_handler",
        "section": "Module Contents > file_handler",
        "text": "file_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.std_out_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > std_out_handler",
        "section": "Module Contents > std_out_handler",
        "text": "std_out_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.logger",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > logger",
        "section": "Module Contents > logger",
        "text": "logger\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.level",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > level",
        "section": "Module Contents > level",
        "text": "level = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.debug",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > debug",
        "section": "Module Contents > debug",
        "text": "debug\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.info",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > info",
        "section": "Module Contents > info",
        "text": "info\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.warning",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > warning",
        "section": "Module Contents > warning",
        "text": "warning\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.error",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > error",
        "section": "Module Contents > error",
        "text": "error\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.critical",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > critical",
        "section": "Module Contents > critical",
        "text": "critical\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.log",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > log",
        "section": "Module Contents > log",
        "text": "log\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.log_to_file",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > log_to_file",
        "section": "Module Contents > log_to_file",
        "text": "log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nExamples\n\nWrite to the pymapdl.log file in the current working directory.\n\n>>> from ansys.mapdl.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.log_to_stdout",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > log_to_stdout",
        "section": "Module Contents > log_to_stdout",
        "text": "log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.setLevel",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > setLevel",
        "section": "Module Contents > setLevel",
        "text": "setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 'DEBUG'.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.add_child_logger",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > add_child_logger",
        "section": "Module Contents > add_child_logger",
        "text": "add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.add_instance_logger",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > add_instance_logger",
        "section": "Module Contents > add_instance_logger",
        "text": "add_instance_logger(name, mapdl_instance, level=None)\n\nCreate a logger for an MAPDL instance.\n\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmapdl_instance\n\nansys.mapdl.core.mapdl._MapdlCore\n\nMAPDL instance object. This should contain the name attribute.\n\nReturns\n\nansys.mapdl.core.logging.PymapdlCustomAdapter\n\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.__getitem__",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > __getitem__",
        "section": "Module Contents > __getitem__",
        "text": "__getitem__(key)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.Logger.add_handling_uncaught_expections",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > add_handling_uncaught_expections",
        "section": "Module Contents > add_handling_uncaught_expections",
        "text": "add_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.addfile_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > addfile_handler",
        "section": "Module Contents > addfile_handler",
        "text": "ansys.dyna.core.pre.dynalogging.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.add_stdout_handler",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > add_stdout_handler",
        "section": "Module Contents > add_stdout_handler",
        "text": "ansys.dyna.core.pre.dynalogging.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase \"\"DEBUG\" is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/pre/dynalogging/index.html#ansys.dyna.core.pre.dynalogging.LOG",
        "title": "ansys.dyna.core.pre.dynalogging > Module Contents > LOG",
        "section": "Module Contents > LOG",
        "text": "ansys.dyna.core.pre.dynalogging.LOG\n\n"
    },
    {
        "objectID": "examples/ICFD/icfd_sloshing",
        "href": "examples/ICFD/icfd_sloshing.html#sloshing",
        "title": "Sloshing",
        "section": "Sloshing",
        "text": "This example shows how to directly impose a displacement of the entire volume mesh\nthrough the use of the ICFD_CONTROL_IMPOSED_MOVE keyword. The executable file\nfor LS-DYNA is ls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.224 seconds)\nDownload Jupyter notebook: icfd_sloshing.ipynb\nDownload Python source code: icfd_sloshing.py\nDownload zipped: icfd_sloshing.zip\nGallery generated by Sphinx-Gallery\nSloshing\nICFD_CONTROL_IMPOSED_MOVE\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_sloshing.ipynb\nDownload Python source code: icfd_sloshing.py\nDownload zipped: icfd_sloshing.zip"
    },
    {
        "objectID": "examples/ISPH/sg_execution_times",
        "href": "examples/ISPH/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.698 total execution time for 1 file from examples/ISPH:\nExample\nTime\nMem (MB)\nsphx_glr_examples_ISPH_rigidtest.py (rigidtest.py)\n00:00.698\n0.0\nComputation times\nrigidtest.py"
    },
    {
        "objectID": "getting-started/example1",
        "href": "getting-started/example1.html#preprocessing",
        "title": "Preprocessing",
        "section": "Preprocessing",
        "text": "The following code describes an LS-DYNA Model for a Taylor bar impact problem. It assumes that the mesh file\ntaylor_bar_mesh.k exists in the working directory. This mesh file can be found in this repository at\nexamples/Taylor_Bar/taylor_bar_mesh.k.\nPreprocessing\nexamples/Taylor_Bar/taylor_bar_mesh.k"
    },
    {
        "objectID": "getting-started/example1",
        "href": "getting-started/example1.html#preview",
        "title": "Preprocessing > Preview",
        "section": "Preview",
        "text": "The following code opens a 3D graphics window to preview the mesh for the LS-DYNA Model\nPreview"
    },
    {
        "objectID": "getting-started/example1",
        "href": "getting-started/example1.html#write-to-file",
        "title": "Preprocessing > Write to file",
        "section": "Write to file",
        "text": "The following code writes the LS-DYNA model to an input.k keyword file in the working directory.\nWrite to file"
    },
    {
        "objectID": "getting-started/example1",
        "href": "getting-started/example1.html#solve",
        "title": "Preprocessing > Solve",
        "section": "Solve",
        "text": "The following code runs LS-DYNA using the input.k file.\nSolve"
    },
    {
        "objectID": "getting-started/example1",
        "href": "getting-started/example1.html#post-processing",
        "title": "Preprocessing > Post processing",
        "section": "Post processing",
        "text": "The following code processes results and generates a line chart of Time vs. Energy from the impact. This requires an installation\nof a matplotlib backend.\nPost processing\nmatplotlib"
    },
    {
        "objectID": "examples/Airbag/sg_execution_times",
        "href": "examples/Airbag/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.106 total execution time for 2 files from examples/Airbag:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Airbag_airbag_deploy.py (airbag_deploy.py)\n00:00.105\n0.0\nsphx_glr_examples_Airbag_airbag_post.py (airbag_post.py)\n00:00.001\n0.0\nComputation times\nairbag_deploy.py\nairbag_post.py"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#ball-plate",
        "title": "Ball plate",
        "section": "Ball plate",
        "text": "This example shows how to use the PyDYNA pre service to create\na ball plate model. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nBall plate\npre\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#perform-required-imports",
        "title": "Ball plate > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#start-the-pre-service",
        "title": "Ball plate > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nrefefring to the README.rst file in this server package.\nOnce the pre service is running, you can connect a client to it using\nthe host name and port. This code uses the default localhost and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#start-the-solution-workflow",
        "title": "Ball plate > Start the solution workflow",
        "section": "Start the solution workflow",
        "text": "NODES and ELEMENTS are read in from the ball_plate.k file. This file\nalso has the PART defined in it, but the section and material fields are\nempty to begin with.\nStart the solution workflow\nball_plate.k"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#create-database-and-control-cards",
        "title": "Ball plate > Create database and control cards",
        "section": "Create database and control cards",
        "text": "For the D3plots, set simulation termination time, simulation timestep, and\noutput frequency.\nCreate database and control cards"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-materials",
        "title": "Ball plate > Define materials",
        "section": "Define materials",
        "text": "The dynamaterials class is used to define these materials: MAT_RIGID,\nMAT_PIECEWISE_LINEAR_PLASTICITY,\nDefine materials\ndynamaterials\nMAT_RIGID\nMAT_PIECEWISE_LINEAR_PLASTICITY"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-section-properties-and-assign-materials",
        "title": "Ball plate > Define section properties and assign materials",
        "section": "Define section properties and assign materials",
        "text": "Now that you have materials with the material ID corresponding to\nthe Part ID, you can assign these materials to the\nparts. You can also define section properties, element\nformulations, and constraints.\nDefine section properties and assign materials"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-surface-to-surface-contacts",
        "title": "Ball plate > Define surface-to-surface contacts",
        "section": "Define surface-to-surface contacts",
        "text": "Define a single-surface contact between a predefined part set.\nDefine surface-to-surface contacts"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-nodal-single-point-constraints",
        "title": "Ball plate > Define nodal single point constraints.",
        "section": "Define nodal single point constraints.",
        "text": "Constrain the nodes in a list of single point constraints (spc).\nDefine nodal single point constraints."
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-initial-condition",
        "title": "Ball plate > Define initial condition.",
        "section": "Define initial condition.",
        "text": "Use the create_velocity_node method\nto initialize the velocity components in the desired direction.\nDefine initial condition.\ncreate_velocity_node"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#define-database-outputs",
        "title": "Ball plate > Define database outputs",
        "section": "Define database outputs",
        "text": "Define the frequency for the D3PLOT file and write out the input file.\nDefine database outputs"
    },
    {
        "objectID": "examples/Explicit/ball_plate",
        "href": "examples/Explicit/ball_plate.html#download-output-file",
        "title": "Ball plate > Download output file",
        "section": "Download output file",
        "text": "Download output file from Docker image for the server to\nyour local <working directory>/output/ location.\nTotal running time of the script: (0 minutes 1.378 seconds)\nDownload Jupyter notebook: ball_plate.ipynb\nDownload Python source code: ball_plate.py\nDownload zipped: ball_plate.zip\nGallery generated by Sphinx-Gallery\nDownload output file\n<working directory>/output/\nDownload Jupyter notebook: ball_plate.ipynb\nDownload Python source code: ball_plate.py\nDownload zipped: ball_plate.zip"
    },
    {
        "objectID": "examples/SALE/index",
        "href": "examples/SALE/index.html#s-ale-examples",
        "title": "S-ALE examples",
        "section": "S-ALE examples",
        "text": "These examples show how to create and use S-ALE (Structured ALE) models.\nsphx_glr_examples_SALE_sale_efp.py\nS-ALE examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansysdynacorelibfield_writer",
        "title": "ansys.dyna.core.lib.field_writer",
        "section": "ansys.dyna.core.lib.field_writer",
        "text": "ansys.dyna.core.lib.field_writer"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#functions",
        "title": "ansys.dyna.core.lib.field_writer > Functions",
        "section": "Functions",
        "text": "check_field_type(field_type)\n\nwrite_field_c(→ None)\n\nwrite_field(→ None)\n\nwrite_c_dataframe(→ None)\n\nwrite_fields(→ None)\nWrite fields representing a line of a keyword to buf.\nwrite_comment_line(→ None)\nWrites the comment line to the buffer.\nFunctions\ncheck_field_type\nwrite_field_c\nwrite_field\nwrite_c_dataframe\nwrite_fields\nwrite_comment_line"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#module-contents",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents",
        "section": "Module Contents",
        "text": "Write fields representing a line of a keyword to buf.\nUse the fixed column offsets and width\nbuffer to write to\nfields to write\noptional - list of values for the field. If not set, use the value property of each field.\nused by TableCard\noptional - format to write\nWrites the comment line to the buffer.\nbuffer to write to\nfields to write\nformat to write in\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.check_field_type",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > check_field_type",
        "section": "Module Contents > check_field_type",
        "text": "ansys.dyna.core.lib.field_writer.check_field_type(field_type: type)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.write_field_c",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > write_field_c",
        "section": "Module Contents > write_field_c",
        "text": "ansys.dyna.core.lib.field_writer.write_field_c(buf: IO[AnyStr], field_type: type, value: Any, width: int) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.write_field",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > write_field",
        "section": "Module Contents > write_field",
        "text": "ansys.dyna.core.lib.field_writer.write_field(buf: IO[AnyStr], field_type: type, value: Any, width: int) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.write_c_dataframe",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > write_c_dataframe",
        "section": "Module Contents > write_c_dataframe",
        "text": "ansys.dyna.core.lib.field_writer.write_c_dataframe(buf: IO[AnyStr], fields: List[ansys.dyna.core.lib.field.Field], table: pandas.DataFrame, format: ansys.dyna.core.lib.format_type.format_type) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.write_fields",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > write_fields",
        "section": "Module Contents > write_fields",
        "text": "ansys.dyna.core.lib.field_writer.write_fields(buf: IO[AnyStr], fields: List[ansys.dyna.core.lib.field.Field], values: List[Any] | None = None, format: ansys.dyna.core.lib.format_type.format_type | None = format_type.default) -> None\n\nWrite fields representing a line of a keyword to buf.\n\nUse the fixed column offsets and width\n\nParameters\n\nbuf: IO\n\nbuffer to write to\n\nfields: List\n\nfields to write\n\nvalues: List\n\noptional - list of values for the field. If not set, use the value property of each field.\nused by TableCard\n\nformat: format_type\n\noptional - format to write\n\n>>> s=io.String()\n\n\n\n>>> fields = [\n\n\n\n…     Field(“a”, int, 0, 10, 1),\n\n\n\n…     Field(“b”, str, 10, 10, “hello”)\n\n\n\n… ]\n\n\n\n>>> write_fields(s, fields)\n\n\n\n>>> s.getvalue()\n\n\n\n‘         1     hello’\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/field_writer/index.html#ansys.dyna.core.lib.field_writer.write_comment_line",
        "title": "ansys.dyna.core.lib.field_writer > Module Contents > write_comment_line",
        "section": "Module Contents > write_comment_line",
        "text": "ansys.dyna.core.lib.field_writer.write_comment_line(buf: IO[AnyStr], fields: List[ansys.dyna.core.lib.field.Field], format: ansys.dyna.core.lib.format_type.format_type | None = format_type.default) -> None\n\nWrites the comment line to the buffer.\n\nParameters\n\nbuf: IO\n\nbuffer to write to\n\nfields: List\n\nfields to write\n\nformat: format_type\n\nformat to write in\n\n>>> s=io.String()\n\n\n\n>>> fields = [\n\n\n\n…     Field(“a”, int, 0, 10, 1),\n\n\n\n…     Field(“b”, str, 10, 10, “hello”)\n\n\n\n… ]\n\n\n\n>>> write_comment_line(s, fields)\n\n\n\n>>> s.getvalue()\n\n\n\n‘         a         b’\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansysdynacorelibseries_card",
        "title": "ansys.dyna.core.lib.series_card",
        "section": "ansys.dyna.core.lib.series_card",
        "text": "ansys.dyna.core.lib.series_card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#classes",
        "title": "ansys.dyna.core.lib.series_card > Classes",
        "section": "Classes",
        "text": "SeriesCard\nCard holding a series of values.\nClasses\nSeriesCard"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.series_card > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nCard holding a series of values.\nGet the card format type.\nReturn whether the card is active.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nReturns a console-friendly representation of the desired parameters for the card\nGets or sets the data list of parameter values\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > SeriesCard",
        "section": "Module Contents > SeriesCard",
        "text": "class ansys.dyna.core.lib.series_card.SeriesCard(name: str, fields_per_card: int, element_width: int, input_type: type | List[type], length_func: Callable = None, active_fn: Callable = None, type_names: List[str] | None = None, data=None, format: ansys.dyna.core.lib.format_type.format_type = format_type.default)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nCard holding a series of values.\n\n!! processed by numpydoc !!\n\n\n\n__iter__() -> Iterable\n\n\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!\n\n\n\n__getitem__(index)\n\n\n\n\n\n__setitem__(index: int, value)\n\n\n\n\n\nappend(value) -> None\n\n\n\n\n\nextend(valuelist: Iterable) -> None\n\n\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!\n\n\n\n__len__() -> int\n\n\n\n\n\nproperty bounded: bool\n\n\n\n\n\n__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!\n\n\n\nproperty data\n\nGets or sets the data list of parameter values\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.__iter__",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > __iter__",
        "section": "Module Contents > __iter__",
        "text": "__iter__() -> Iterable\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.format",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.active",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.__getitem__",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > __getitem__",
        "section": "Module Contents > __getitem__",
        "text": "__getitem__(index)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.__setitem__",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > __setitem__",
        "section": "Module Contents > __setitem__",
        "text": "__setitem__(index: int, value)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.append",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > append",
        "section": "Module Contents > append",
        "text": "append(value) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.extend",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > extend",
        "section": "Module Contents > extend",
        "text": "extend(valuelist: Iterable) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.read",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.write",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.__len__",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > __len__",
        "section": "Module Contents > __len__",
        "text": "__len__() -> int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.bounded",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > bounded",
        "section": "Module Contents > bounded",
        "text": "property bounded: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.__repr__",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nReturns a console-friendly representation of the desired parameters for the card\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/series_card/index",
        "href": "autoapi/ansys/dyna/core/lib/series_card/index.html#ansys.dyna.core.lib.series_card.SeriesCard.data",
        "title": "ansys.dyna.core.lib.series_card > Module Contents > data",
        "section": "Module Contents > data",
        "text": "property data\n\nGets or sets the data list of parameter values\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#belted-dummy",
        "title": "Belted dummy",
        "section": "Belted dummy",
        "text": "This example shows how to use the PyDYNA pre service to create\na belted dummy model. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nBelted dummy\npre\nls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#perform-required-imports",
        "title": "Belted dummy > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#start-the-pre-service",
        "title": "Belted dummy > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nreferring to the README.rst file in this server package.\nOnce the pre service is running, you can connect a client to it using\nthe host name and port. This example uses the default localhost and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#start-the-solution-workflow",
        "title": "Belted dummy > Start the solution workflow",
        "section": "Start the solution workflow",
        "text": "NODES and ELEMENTS are read in from the belted_dummy.k file. This file\nalso has the PART defined in it, but the section and material fields are\nempty to begin with.\nStart the solution workflow\nbelted_dummy.k"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#create-database-and-control-cards",
        "title": "Belted dummy > Create database and control cards",
        "section": "Create database and control cards",
        "text": "For the D3plots, set simulation termination time, simulation timestep, and\noutput frequency. Use the set_init_velocity method in the dynamech\nclass to initialize the velocity components in the desired direction.\nCreate database and control cards\nset_init_velocity\ndynamech"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-materials",
        "title": "Belted dummy > Define materials",
        "section": "Define materials",
        "text": "In this model, many parts share common material types. Thus, these materials\nare generated in a loop and a list of these materials are created. This list\ncan then be used later to assign materials to parts. The dynamaterials class\nare used to define these materials: MAT_RIGID, MAT_ELASTIC,\nMAT_SPRING_NONLINEAR_ELASTIC, MAT_DAMPER_VISCOUS, and\nMAT_DAMPER_NONLINEAR_VISCOUS.\nDefine materials\ndynamaterials\nMAT_RIGID\nMAT_ELASTIC\nMAT_SPRING_NONLINEAR_ELASTIC,\nMAT_DAMPER_VISCOUS\nMAT_DAMPER_NONLINEAR_VISCOUS"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-section-properties-and-assign-materials",
        "title": "Belted dummy > Define section properties and assign materials",
        "section": "Define section properties and assign materials",
        "text": "Now that you have a list of materials with the material ID corresponding to\nthe part ID, you can loop through the list and assign these materials to the\nparts. While in the loop, also define the section properties, element\nformulations, and constraints.\nDefine section properties and assign materials"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-surface-to-surface-contacts",
        "title": "Belted dummy > Define surface-to-surface contacts",
        "section": "Define surface-to-surface contacts",
        "text": "Define several surface-to-surface contacts between predefined segment set pairs\nsuch that each contact has a specific friction defined between the master and slave.\nDefine surface-to-surface contacts"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-spherical-joints",
        "title": "Belted dummy > Define spherical joints",
        "section": "Define spherical joints",
        "text": "A spherical joint is one of the simpler joint types. You need only define\na coincident node pair. Read the node pairs from the jointlist array defined in\nthe belted_dummy_data.py file.\nDefine spherical joints\njointlist\nbelted_dummy_data.py"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-a-prescribed-motion-on-a-node-set",
        "title": "Belted dummy > Define a prescribed motion on a node set",
        "section": "Define a prescribed motion on a node set",
        "text": "Use the create_imposed_motion() method to define a prescribed motion\non a node set.\nDefine a prescribed motion on a node set\ncreate_imposed_motion()"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-gravity",
        "title": "Belted dummy > Define gravity",
        "section": "Define gravity",
        "text": "Use the Gravity() method in the dynabase class\nto define the gravity load, direction of the load, and the curve.\nDefine gravity\nGravity()\ndynabase"
    },
    {
        "objectID": "examples/Explicit/belted_dummy",
        "href": "examples/Explicit/belted_dummy.html#define-database-outputs",
        "title": "Belted dummy > Define database outputs",
        "section": "Define database outputs",
        "text": "Define the frequency for the D3PLOT file and write out the input file.\nTotal running time of the script: (0 minutes 0.501 seconds)\nDownload Jupyter notebook: belted_dummy.ipynb\nDownload Python source code: belted_dummy.py\nDownload zipped: belted_dummy.zip\nGallery generated by Sphinx-Gallery\nDefine database outputs\nDownload Jupyter notebook: belted_dummy.ipynb\nDownload Python source code: belted_dummy.py\nDownload zipped: belted_dummy.zip"
    },
    {
        "objectID": "examples/NVH/sg_execution_times",
        "href": "examples/NVH/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.057 total execution time for 2 files from examples/NVH:\nExample\nTime\nMem (MB)\nsphx_glr_examples_NVH_nvh_frf_solid.py (nvh_frf_solid.py)\n00:00.030\n0.0\nsphx_glr_examples_NVH_frf_plate_damping.py (frf_plate_damping.py)\n00:00.028\n0.0\nComputation times\nnvh_frf_solid.py\nfrf_plate_damping.py"
    },
    {
        "objectID": "examples/EM/em_resistive_heating_2d_multi_isopots",
        "href": "examples/EM/em_resistive_heating_2d_multi_isopots.html#resistive-heating-2d-multiple-connect-isopotential",
        "title": "Resistive heating 2D multiple-connect isopotential",
        "section": "Resistive heating 2D multiple-connect isopotential",
        "text": "This example shows how to define complex circuits as inlet boundary conditions.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.041 seconds)\nDownload Jupyter notebook: em_resistive_heating_2d_multi_isopots.ipynb\nDownload Python source code: em_resistive_heating_2d_multi_isopots.py\nDownload zipped: em_resistive_heating_2d_multi_isopots.zip\nGallery generated by Sphinx-Gallery\nResistive heating 2D multiple-connect isopotential\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_resistive_heating_2d_multi_isopots.ipynb\nDownload Python source code: em_resistive_heating_2d_multi_isopots.py\nDownload zipped: em_resistive_heating_2d_multi_isopots.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#ansysdynacorepregraphicstrame_gui",
        "title": "ansys.dyna.core.pre.graphics.trame_gui",
        "section": "ansys.dyna.core.pre.graphics.trame_gui",
        "text": "Module for the trame visualizer.\nansys.dyna.core.pre.graphics.trame_gui"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#classes",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Classes",
        "section": "Classes",
        "text": "TrameVisualizer\nDefines the view layout for the Trame visualizer.\nClasses\nTrameVisualizer"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#module-contents",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Module Contents",
        "section": "Module Contents",
        "text": "Defines the view layout for the Trame visualizer.\nSet the view layout for the Trame visualizer.\nThis method also sets the mesh to show by the PyVista plotter.\nPyVista plotter to render the mesh.\nStart the server and show the mesh.\nModule Contents\npv.Plotter"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#ansys.dyna.core.pre.graphics.trame_gui.TrameVisualizer",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Module Contents > TrameVisualizer",
        "section": "Module Contents > TrameVisualizer",
        "text": "class ansys.dyna.core.pre.graphics.trame_gui.TrameVisualizer\n\nDefines the view layout for the Trame visualizer.\n\n!! processed by numpydoc !!\n\n\n\nserver\n\n\n\n\n\nset_scene(plotter)\n\nSet the view layout for the Trame visualizer.\n\nThis method also sets the mesh to show by the PyVista plotter.\n\nParameters\n\nplotter\n\npv.Plotter\n\nPyVista plotter to render the mesh.\n\n!! processed by numpydoc !!\n\n\n\nshow()\n\nStart the server and show the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#ansys.dyna.core.pre.graphics.trame_gui.TrameVisualizer.server",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Module Contents > server",
        "section": "Module Contents > server",
        "text": "server\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#ansys.dyna.core.pre.graphics.trame_gui.TrameVisualizer.set_scene",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Module Contents > set_scene",
        "section": "Module Contents > set_scene",
        "text": "set_scene(plotter)\n\nSet the view layout for the Trame visualizer.\n\nThis method also sets the mesh to show by the PyVista plotter.\n\nParameters\n\nplotter\n\npv.Plotter\n\nPyVista plotter to render the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/trame_gui/index.html#ansys.dyna.core.pre.graphics.trame_gui.TrameVisualizer.show",
        "title": "ansys.dyna.core.pre.graphics.trame_gui > Module Contents > show",
        "section": "Module Contents > show",
        "text": "show()\n\nStart the server and show the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansysdynacoreprepart",
        "title": "ansys.dyna.core.pre.part",
        "section": "ansys.dyna.core.pre.part",
        "text": "Module containing the Part class.\nansys.dyna.core.pre.part\nPart"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#classes",
        "title": "ansys.dyna.core.pre.part > Classes",
        "section": "Classes",
        "text": "Part\nDefines and modifies the parts of a model.\nClasses\nPart"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#module-contents",
        "title": "ansys.dyna.core.pre.part > Module Contents",
        "section": "Module Contents",
        "text": "Bases: object\nDefines and modifies the parts of a model.\nModel in which the part is created.\nID of the part provided by the server.\nPart name.\nWhether the mesh summary is set to print along with the part summary.\nWhether IDs of TopoEntities or zonelets are set to print along with the part summary.\nModule Contents\nobject"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part",
        "title": "ansys.dyna.core.pre.part > Module Contents > Part",
        "section": "Module Contents > Part",
        "text": "class ansys.dyna.core.pre.part.Part(model, id: int, name: str, type: str, conn: List)\n\nBases: object\n\nDefines and modifies the parts of a model.\n\nParameters\n\nmodel: ansys.dyna.core.pre.Model\n\nModel in which the part is created.\n\nid: int\n\nID of the part provided by the server.\n\nname: str\n\nPart name.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: int\n\n\n\n\n\nproperty name: str\n\n\n\n\n\nproperty type: str\n\n\n\n\n\nproperty connectivity: List\n\n\n\n\n\nproperty print_mesh: bool\n\nWhether the mesh summary is set to print along with the part summary.\n\n!! processed by numpydoc !!\n\n\n\nproperty print_id: bool\n\nWhether IDs of TopoEntities or zonelets are set to print along with the part summary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.id",
        "title": "ansys.dyna.core.pre.part > Module Contents > id",
        "section": "Module Contents > id",
        "text": "property id: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.name",
        "title": "ansys.dyna.core.pre.part > Module Contents > name",
        "section": "Module Contents > name",
        "text": "property name: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.type",
        "title": "ansys.dyna.core.pre.part > Module Contents > type",
        "section": "Module Contents > type",
        "text": "property type: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.connectivity",
        "title": "ansys.dyna.core.pre.part > Module Contents > connectivity",
        "section": "Module Contents > connectivity",
        "text": "property connectivity: List\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.print_mesh",
        "title": "ansys.dyna.core.pre.part > Module Contents > print_mesh",
        "section": "Module Contents > print_mesh",
        "text": "property print_mesh: bool\n\nWhether the mesh summary is set to print along with the part summary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/part/index",
        "href": "autoapi/ansys/dyna/core/pre/part/index.html#ansys.dyna.core.pre.part.Part.print_id",
        "title": "ansys.dyna.core.pre.part > Module Contents > print_id",
        "section": "Module Contents > print_id",
        "text": "property print_id: bool\n\nWhether IDs of TopoEntities or zonelets are set to print along with the part summary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#ansysdynacorelibconfig",
        "title": "ansys.dyna.core.lib.config",
        "section": "ansys.dyna.core.lib.config",
        "text": "ansys.dyna.core.lib.config"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#attributes",
        "title": "ansys.dyna.core.lib.config > Attributes",
        "section": "Attributes",
        "text": "USE_LSPP_DEFAULTS\n\nAttributes\nUSE_LSPP_DEFAULTS"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#functions",
        "title": "ansys.dyna.core.lib.config > Functions",
        "section": "Functions",
        "text": "use_lspp_defaults()\n\ndisable_lspp_defaults()\n\nFunctions\nuse_lspp_defaults\ndisable_lspp_defaults"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#module-contents",
        "title": "ansys.dyna.core.lib.config > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#ansys.dyna.core.lib.config.USE_LSPP_DEFAULTS",
        "title": "ansys.dyna.core.lib.config > Module Contents > USE_LSPP_DEFAULTS",
        "section": "Module Contents > USE_LSPP_DEFAULTS",
        "text": "ansys.dyna.core.lib.config.USE_LSPP_DEFAULTS = True\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#ansys.dyna.core.lib.config.use_lspp_defaults",
        "title": "ansys.dyna.core.lib.config > Module Contents > use_lspp_defaults",
        "section": "Module Contents > use_lspp_defaults",
        "text": "ansys.dyna.core.lib.config.use_lspp_defaults()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/config/index",
        "href": "autoapi/ansys/dyna/core/lib/config/index.html#ansys.dyna.core.lib.config.disable_lspp_defaults",
        "title": "ansys.dyna.core.lib.config > Module Contents > disable_lspp_defaults",
        "section": "Module Contents > disable_lspp_defaults",
        "text": "ansys.dyna.core.lib.config.disable_lspp_defaults()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansysdynacorepreerrors",
        "title": "ansys.dyna.core.pre.errors",
        "section": "ansys.dyna.core.pre.errors",
        "text": "Module containing PyDYNA-specific errors.\nansys.dyna.core.pre.errors"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#attributes",
        "title": "ansys.dyna.core.pre.errors > Attributes",
        "section": "Attributes",
        "text": "SIGINT_TRACKER\n\nLOCKFILE_MSG\n\nAttributes\nSIGINT_TRACKER\nLOCKFILE_MSG"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#exceptions",
        "title": "ansys.dyna.core.pre.errors > Exceptions",
        "section": "Exceptions",
        "text": "VersionError\nProvides the error raised when the kwserver is invalid.\nPydynaRuntimeError\nProvides the error raised when PyDYNA passes an error.\nPydynaInvalidRoutineError\nProvides the error raised when MAPDL is in the wrong routine.\nLockFileException\nProvides the error raised when the lockfile has not been removed.\nKwserverDidNotStart\nProvides the error raised when the kwserver process does not start.\nExceptions\nVersionError\nPydynaRuntimeError\nPydynaInvalidRoutineError\nLockFileException\nKwserverDidNotStart"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#module-contents",
        "title": "ansys.dyna.core.pre.errors > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ValueError\nProvides the error raised when the kwserver is invalid.\nBases: RuntimeError\nProvides the error raised when PyDYNA passes an error.\nBases: RuntimeError\nProvides the error raised when MAPDL is in the wrong routine.\nBases: RuntimeError\nProvides the error raised when the lockfile has not been removed.\nBases: RuntimeError\nProvides the error raised when the kwserver process does not start.\nModule Contents\nValueError\nRuntimeError\nRuntimeError\nRuntimeError\nRuntimeError"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.SIGINT_TRACKER",
        "title": "ansys.dyna.core.pre.errors > Module Contents > SIGINT_TRACKER",
        "section": "Module Contents > SIGINT_TRACKER",
        "text": "ansys.dyna.core.pre.errors.SIGINT_TRACKER = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.LOCKFILE_MSG",
        "title": "ansys.dyna.core.pre.errors > Module Contents > LOCKFILE_MSG",
        "section": "Module Contents > LOCKFILE_MSG",
        "text": "ansys.dyna.core.pre.errors.LOCKFILE_MSG = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nEither another Ansys job with the same job name is already running in this\ndirectory or the lock file has not been deleted from an abnormally\nterminated Ansys run.\n\nDisable this check by passing ``override=True``\n\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.VersionError",
        "title": "ansys.dyna.core.pre.errors > Module Contents > VersionError",
        "section": "Module Contents > VersionError",
        "text": "exception ansys.dyna.core.pre.errors.VersionError(msg='Invalid kwserver version')\n\nBases: ValueError\n\nProvides the error raised when the kwserver is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.PydynaRuntimeError",
        "title": "ansys.dyna.core.pre.errors > Module Contents > PydynaRuntimeError",
        "section": "Module Contents > PydynaRuntimeError",
        "text": "exception ansys.dyna.core.pre.errors.PydynaRuntimeError\n\nBases: RuntimeError\n\nProvides the error raised when PyDYNA passes an error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.PydynaInvalidRoutineError",
        "title": "ansys.dyna.core.pre.errors > Module Contents > PydynaInvalidRoutineError",
        "section": "Module Contents > PydynaInvalidRoutineError",
        "text": "exception ansys.dyna.core.pre.errors.PydynaInvalidRoutineError(msg='')\n\nBases: RuntimeError\n\nProvides the error raised when MAPDL is in the wrong routine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.LockFileException",
        "title": "ansys.dyna.core.pre.errors > Module Contents > LockFileException",
        "section": "Module Contents > LockFileException",
        "text": "exception ansys.dyna.core.pre.errors.LockFileException(msg=LOCKFILE_MSG)\n\nBases: RuntimeError\n\nProvides the error raised when the lockfile has not been removed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/errors/index",
        "href": "autoapi/ansys/dyna/core/pre/errors/index.html#ansys.dyna.core.pre.errors.KwserverDidNotStart",
        "title": "ansys.dyna.core.pre.errors > Module Contents > KwserverDidNotStart",
        "section": "Module Contents > KwserverDidNotStart",
        "text": "exception ansys.dyna.core.pre.errors.KwserverDidNotStart(msg='')\n\nBases: RuntimeError\n\nProvides the error raised when the kwserver process does not start.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansysdynacoresolverdynalogging",
        "title": "ansys.dyna.core.solver.dynalogging",
        "section": "ansys.dyna.core.solver.dynalogging",
        "text": "Logging module supplying a general framework for logging in the PyDYNA\npre service.\nThis module is built upon the Python logging\nmodule. It is not intended to replace this Python module but rather to provide a way\nfor it and the PyDyna pre service to interact.\nThe loggers used in this PyDyna logging mdoule include the name of the instance,\nwhich is intended to be unique. This name is printed in all the active\noutputs and is used to track the different instances of the PyDyNA pre\nservice.\nansys.dyna.core.solver.dynalogging\npre\npre\npre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#global-logger",
        "title": "ansys.dyna.core.solver.dynalogging > Global logger",
        "section": "Global logger",
        "text": "The global logger, named pydyna_global, is created at\nansys.dyna.core.__init__.  If you want to use the global logger,\nyou must call it at the top of your module:\nYou can rename the global logger to avoid conflicts with other loggers (if any):\nThe default logging level of LOG is ERROR. To change this to output\nlower-level messages, you can use this code:\nAlternatively, you can set the logging level of LOG to DEBUG\nwith one line of code:\nLOG.setLevel(“DEBUG”)\nUsing the preceding line ensures that all the handlers are set to the input log level.\nBy default, this logger does not log to a file. If you want to log to a file,\nyou can add a file handler:\nThe preceding code sets the logger to also redirect to a file. If you want\nto change the characteristics of the global logger from the beginning\nof the execution, you must edit the __init__ file in the\nansys.dyna.core.pre directory.\nTo log using this logger, call the desired method as a normal logger.\nGlobal logger\npydyna_global\nansys.dyna.core.__init__\nLOG\nERROR\nLOG\nDEBUG\n__init__\nansys.dyna.core.pre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#instance-loggers",
        "title": "ansys.dyna.core.solver.dynalogging > Instance loggers",
        "section": "Instance loggers",
        "text": "Every time an instance of the Mapdl\nclass is created, a logger is created and stored in two places:\n_MapdlCore._log: For backward compatibility.\nLOG._instances: This field is a dictionary  where the key is the name\nof the created logger.\nInstance loggers inheritate the pydyna_global output handlers and\nlogging level unless otherwise specified. Instance loggers work in a\nsimilar way to the global logger. You can use the\nlog_to_file() method to add\na file handler or the logger.Logging.setLevel() method to change\nthe log level.\nInstance loggers\nMapdl\n_MapdlCore._log\nLOG._instances\npydyna_global\nlog_to_file()\nlogger.Logging.setLevel()"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#other-loggers",
        "title": "ansys.dyna.core.solver.dynalogging > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using the Python logging module as\nyou would do in any other script. No conflicts between these loggers exist.\nOther loggers\nlogging"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#attributes",
        "title": "ansys.dyna.core.solver.dynalogging > Attributes",
        "section": "Attributes",
        "text": "LOG_LEVEL\n\nFILE_NAME\n\nDEBUG\n\nINFO\n\nWARN\n\nERROR\n\nCRITICAL\n\nSTDOUT_MSG_FORMAT\n\nFILE_MSG_FORMAT\n\nDEFAULT_STDOUT_HEADER\n\nDEFAULT_FILE_HEADER\n\nNEW_SESSION_HEADER\n\nstring_to_loglevel\n\nLOG\n\nAttributes\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nstring_to_loglevel\nLOG"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#classes",
        "title": "ansys.dyna.core.solver.dynalogging > Classes",
        "section": "Classes",
        "text": "PymapdlCustomAdapter\nAdapter for keeping the reference to an MAPDL instance name dynamic.\nPymapdlPercentStyle\n\nPymapdlFormatter\nProvides a customized Formatter class for overwriting the default format styles.\nInstanceFilter\nEnsures that the instance_name record always exists.\nLogger\nProvides the logger used for each PyDyna pre session.\nClasses\nPymapdlCustomAdapter\nPymapdlPercentStyle\nPymapdlFormatter\nFormatter\nInstanceFilter\ninstance_name\nLogger\npre"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#functions",
        "title": "ansys.dyna.core.solver.dynalogging > Functions",
        "section": "Functions",
        "text": "addfile_handler(logger[, filename, level, write_headers])\nAdd a file handler to the input.\nadd_stdout_handler(logger[, level, write_headers])\nAdd a file handler to the logger.\nFunctions\naddfile_handler\nadd_stdout_handler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#module-contents",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents",
        "section": "Module Contents",
        "text": "Bases: logging.LoggerAdapter\nAdapter for keeping the reference to an MAPDL instance name dynamic.\nUsing the standard approach, extra parameters must be supplied\nto the logger to indicate the MAPDL instance for which messages\nmust be logged.\nWith this class, you only have to specify the MAPDL instance\nthat you are referring to once.\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\nAdd a file handler to the logger.\nName of the file where logs are recorded. The default is FILE_NAME.\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\nAdd a standard output handler to the logger.\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\nChange the log level of the object and the attached handlers.\nLevel of logging record. The default is \"DEBUG.\nBases: logging.PercentStyle\nBases: logging.Formatter\nProvides a customized Formatter class for overwriting the default format styles.\nBases: logging.Filter\nEnsures that the instance_name record always exists.\nDetermine if the specified record is to be logged.\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\nProvides the logger used for each PyDyna pre session.\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\nWhether to write log messages to a file. The default is False.\nWhether to write log messages to the standard output. The default is\nTrue.\nName of the file to write log messages to if to_file=True. The default\nis FILE_NAME.\nDemonstrate logger usage from an MAPDL instance mapdl. This logger is\nautomatically created when an MAPDL instance is created.\nImport the global PYMAPDL logger and add a file output handler.\nAdd a file handler to logger.\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\nWrite to the pymapdl.log file in the current working directory.\nAdd a standard output handler to the logger.\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\nWhether to write the headers to the file. The default is True.\nChange the log level of the object and the attached handlers.\nLevel of logging. The default is 'DEBUG'.\nAdd a child logger to the main logger.\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName of the logger.\nLevel of logging. The default is None.\nLogger class.\nCreate a logger for an MAPDL instance.\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\nName for the new logger.\nMAPDL instance object. This should contain the name attribute.\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\nYou can only input strings as name to this method.\nRedirect the output of an exception to the logger.\nAdd a file handler to the input.\nLogger to add the file handler to.\nName of the output file. The default is FILE_NAME.\nLevel of logging. The default is LOG_LEVEL.\nWhether to write the headers to the file. The default is False.\nLogger or Logger object.\nAdd a file handler to the logger.\nLogger to add the file handler to.\nLevel of logging. The default is LOG_LEVEL, in which\ncase \"\"DEBUG\" is used.\nWhether to write the headers to the file. The default is False.\nLogger or Logger object.\nModule Contents\nlogging.LoggerAdapter\npython:str\noptional\nFILE_NAME\npython:str\noptional\nLOG_LEVEL\nDEBUG\npython:str\noptional\nLOG_LEVEL\n\"DEBUG\"\npython:str\noptional\n\"DEBUG\nlogging.PercentStyle\nlogging.Formatter\nFormatter\nlogging.Filter\ninstance_name\npre\npython:int\noptional\nlogging.DEBUG\noptional\nFalse\noptional\nTrue\npython:str\noptional\nto_file=True\nFILE_NAME\npython:str\noptional\nFILE_NAME\n'pymapdl.log'\npython:str\noptional\nLOG_LEVEL\n'DEBUG'\npymapdl.log\npython:str\noptional\nFILE_NAME\n'pymapdl.log'\npython:str\noptional\nLOG_LEVEL\n'DEBUG'\noptional\nTrue\npython:str\noptional\n'DEBUG'\n_global\npython:str\npython:str\noptional\nNone\nlogging.logger\n_instances\npython:str\nansys.mapdl.core.mapdl._MapdlCore\nname\nansys.mapdl.core.logging.PymapdlCustomAdapter\nlogger\nException\nname\nlogging.Logger\nlogging.Logger\npython:str\noptional\nFILE_NAME\npython:str\noptional\nLOG_LEVEL\noptional\nFalse\nlogger\nlogging.Logger\nlogging.Logger\npython:str\noptional\nLOG_LEVEL\n\"\"DEBUG\" is used\noptional\nFalse\nlogger"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.LOG_LEVEL",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > LOG_LEVEL",
        "section": "Module Contents > LOG_LEVEL",
        "text": "ansys.dyna.core.solver.dynalogging.LOG_LEVEL = 10\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.FILE_NAME",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > FILE_NAME",
        "section": "Module Contents > FILE_NAME",
        "text": "ansys.dyna.core.solver.dynalogging.FILE_NAME = 'pydyna.log'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.DEBUG",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > DEBUG",
        "section": "Module Contents > DEBUG",
        "text": "ansys.dyna.core.solver.dynalogging.DEBUG = 10\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.INFO",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > INFO",
        "section": "Module Contents > INFO",
        "text": "ansys.dyna.core.solver.dynalogging.INFO = 20\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.WARN",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > WARN",
        "section": "Module Contents > WARN",
        "text": "ansys.dyna.core.solver.dynalogging.WARN = 30\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.ERROR",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > ERROR",
        "section": "Module Contents > ERROR",
        "text": "ansys.dyna.core.solver.dynalogging.ERROR = 40\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.CRITICAL",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > CRITICAL",
        "section": "Module Contents > CRITICAL",
        "text": "ansys.dyna.core.solver.dynalogging.CRITICAL = 50\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.STDOUT_MSG_FORMAT",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > STDOUT_MSG_FORMAT",
        "section": "Module Contents > STDOUT_MSG_FORMAT",
        "text": "ansys.dyna.core.solver.dynalogging.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.FILE_MSG_FORMAT",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > FILE_MSG_FORMAT",
        "section": "Module Contents > FILE_MSG_FORMAT",
        "text": "ansys.dyna.core.solver.dynalogging.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.DEFAULT_STDOUT_HEADER",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > DEFAULT_STDOUT_HEADER",
        "section": "Module Contents > DEFAULT_STDOUT_HEADER",
        "text": "ansys.dyna.core.solver.dynalogging.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.DEFAULT_FILE_HEADER",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > DEFAULT_FILE_HEADER",
        "section": "Module Contents > DEFAULT_FILE_HEADER",
        "text": "ansys.dyna.core.solver.dynalogging.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.NEW_SESSION_HEADER",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > NEW_SESSION_HEADER",
        "section": "Module Contents > NEW_SESSION_HEADER",
        "text": "ansys.dyna.core.solver.dynalogging.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.string_to_loglevel",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > string_to_loglevel",
        "section": "Module Contents > string_to_loglevel",
        "text": "ansys.dyna.core.solver.dynalogging.string_to_loglevel\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > PymapdlCustomAdapter",
        "section": "Module Contents > PymapdlCustomAdapter",
        "text": "class ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nAdapter for keeping the reference to an MAPDL instance name dynamic.\n\nUsing the standard approach, extra parameters must be supplied\nto the logger to indicate the MAPDL instance for which messages\nmust be logged.\n\nWith this class, you only have to specify the MAPDL instance\nthat you are referring to once.\n\n!! processed by numpydoc !!\n\n\n\nlevel = None\n\n\n\n\n\nfile_handler = None\n\n\n\n\n\nstdout_handler = None\n\n\n\n\n\nlogger\n\n\n\n\n\nstd_out_handler\n\n\n\n\n\nprocess(msg, kwargs)\n\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\n\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\n\n!! processed by numpydoc !!\n\n\n\nlog_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\n\n!! processed by numpydoc !!\n\n\n\nlog_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\n\n!! processed by numpydoc !!\n\n\n\nsetLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is \"DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.level",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > level",
        "section": "Module Contents > level",
        "text": "level = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.file_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > file_handler",
        "section": "Module Contents > file_handler",
        "text": "file_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.stdout_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > stdout_handler",
        "section": "Module Contents > stdout_handler",
        "text": "stdout_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.logger",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > logger",
        "section": "Module Contents > logger",
        "text": "logger\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.std_out_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > std_out_handler",
        "section": "Module Contents > std_out_handler",
        "text": "std_out_handler\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.process",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > process",
        "section": "Module Contents > process",
        "text": "process(msg, kwargs)\n\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\n\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.log_to_file",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > log_to_file",
        "section": "Module Contents > log_to_file",
        "text": "log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.log_to_stdout",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > log_to_stdout",
        "section": "Module Contents > log_to_stdout",
        "text": "log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is LOG_LEVEL, which causes all messages\nto be recorded. For example, you can set the level of logging to \"DEBUG\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlCustomAdapter.setLevel",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > setLevel",
        "section": "Module Contents > setLevel",
        "text": "setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging record. The default is \"DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlPercentStyle",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > PymapdlPercentStyle",
        "section": "Module Contents > PymapdlPercentStyle",
        "text": "class ansys.dyna.core.solver.dynalogging.PymapdlPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.PymapdlFormatter",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > PymapdlFormatter",
        "section": "Module Contents > PymapdlFormatter",
        "text": "class ansys.dyna.core.solver.dynalogging.PymapdlFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides a customized Formatter class for overwriting the default format styles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.InstanceFilter",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > InstanceFilter",
        "section": "Module Contents > InstanceFilter",
        "text": "class ansys.dyna.core.solver.dynalogging.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists.\n\n!! processed by numpydoc !!\n\n\n\nfilter(record)\n\nDetermine if the specified record is to be logged.\n\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.InstanceFilter.filter",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > filter",
        "section": "Module Contents > filter",
        "text": "filter(record)\n\nDetermine if the specified record is to be logged.\n\nReturns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > Logger",
        "section": "Module Contents > Logger",
        "text": "class ansys.dyna.core.solver.dynalogging.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides the logger used for each PyDyna pre session.\n\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\n\nto_file\n\nbool, optional\n\nWhether to write log messages to a file. The default is False.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output. The default is\nTrue.\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to if to_file=True. The default\nis FILE_NAME.\n\nExamples\n\nDemonstrate logger usage from an MAPDL instance mapdl. This logger is\nautomatically created when an MAPDL instance is created.\n\n>>> from ansys.mapdl.core import launch_mapdl\n>>> mapdl = launch_mapdl(loglevel='DEBUG')\n>>> mapdl._log.info('This is a useful message')\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the global PYMAPDL logger and add a file output handler.\n\n>>> import os\n>>> from ansys.mapdl.core import LOG\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!\n\n\n\nfile_handler = None\n\n\n\n\n\nstd_out_handler = None\n\n\n\n\n\nlogger\n\n\n\n\n\nlevel = 0\n\n\n\n\n\ndebug\n\n\n\n\n\ninfo\n\n\n\n\n\nwarning\n\n\n\n\n\nerror\n\n\n\n\n\ncritical\n\n\n\n\n\nlog\n\n\n\n\n\nlog_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nExamples\n\nWrite to the pymapdl.log file in the current working directory.\n\n>>> from ansys.mapdl.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!\n\n\n\nlog_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is True.\n\n!! processed by numpydoc !!\n\n\n\nsetLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 'DEBUG'.\n\n!! processed by numpydoc !!\n\n\n\nadd_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!\n\n\n\nadd_instance_logger(name, mapdl_instance, level=None)\n\nCreate a logger for an MAPDL instance.\n\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmapdl_instance\n\nansys.mapdl.core.mapdl._MapdlCore\n\nMAPDL instance object. This should contain the name attribute.\n\nReturns\n\nansys.mapdl.core.logging.PymapdlCustomAdapter\n\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n!! processed by numpydoc !!\n\n\n\n__getitem__(key)\n\n\n\n\n\nadd_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.file_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > file_handler",
        "section": "Module Contents > file_handler",
        "text": "file_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.std_out_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > std_out_handler",
        "section": "Module Contents > std_out_handler",
        "text": "std_out_handler = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.logger",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > logger",
        "section": "Module Contents > logger",
        "text": "logger\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.level",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > level",
        "section": "Module Contents > level",
        "text": "level = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.debug",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > debug",
        "section": "Module Contents > debug",
        "text": "debug\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.info",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > info",
        "section": "Module Contents > info",
        "text": "info\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.warning",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > warning",
        "section": "Module Contents > warning",
        "text": "warning\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.error",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > error",
        "section": "Module Contents > error",
        "text": "error\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.critical",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > critical",
        "section": "Module Contents > critical",
        "text": "critical\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.log",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > log",
        "section": "Module Contents > log",
        "text": "log\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.log_to_file",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > log_to_file",
        "section": "Module Contents > log_to_file",
        "text": "log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nExamples\n\nWrite to the pymapdl.log file in the current working directory.\n\n>>> from ansys.mapdl.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymapdl.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.log_to_stdout",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > log_to_stdout",
        "section": "Module Contents > log_to_stdout",
        "text": "log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. The default\nis FILE_NAME, in which case they are recorded in the\n'pymapdl.log' file.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase 'DEBUG' is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.setLevel",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > setLevel",
        "section": "Module Contents > setLevel",
        "text": "setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 'DEBUG'.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.add_child_logger",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > add_child_logger",
        "section": "Module Contents > add_child_logger",
        "text": "add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of MAPDL instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.add_instance_logger",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > add_instance_logger",
        "section": "Module Contents > add_instance_logger",
        "text": "add_instance_logger(name, mapdl_instance, level=None)\n\nCreate a logger for an MAPDL instance.\n\nThe MAPDL instance logger is a logger with an adapter that adds\ncontextual information, such as the MAPDL instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is also\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmapdl_instance\n\nansys.mapdl.core.mapdl._MapdlCore\n\nMAPDL instance object. This should contain the name attribute.\n\nReturns\n\nansys.mapdl.core.logging.PymapdlCustomAdapter\n\nLogger adapter customized to add MAPDL information to the\nlogs.  You can use this class to log events in the same\nway you use the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.__getitem__",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > __getitem__",
        "section": "Module Contents > __getitem__",
        "text": "__getitem__(key)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.Logger.add_handling_uncaught_expections",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > add_handling_uncaught_expections",
        "section": "Module Contents > add_handling_uncaught_expections",
        "text": "add_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.addfile_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > addfile_handler",
        "section": "Module Contents > addfile_handler",
        "text": "ansys.dyna.core.solver.dynalogging.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.add_stdout_handler",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > add_stdout_handler",
        "section": "Module Contents > add_stdout_handler",
        "text": "ansys.dyna.core.solver.dynalogging.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is LOG_LEVEL, in which\ncase \"\"DEBUG\" is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynalogging/index",
        "href": "autoapi/ansys/dyna/core/solver/dynalogging/index.html#ansys.dyna.core.solver.dynalogging.LOG",
        "title": "ansys.dyna.core.solver.dynalogging > Module Contents > LOG",
        "section": "Module Contents > LOG",
        "text": "ansys.dyna.core.solver.dynalogging.LOG\n\n"
    },
    {
        "objectID": "examples/ICFD/icfd_mesh_size",
        "href": "examples/ICFD/icfd_mesh_size.html#mesh-size",
        "title": "Mesh size",
        "section": "Mesh size",
        "text": "This example shows a simple ICFD input deck with a coarse mesh.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.036 seconds)\nDownload Jupyter notebook: icfd_mesh_size.ipynb\nDownload Python source code: icfd_mesh_size.py\nDownload zipped: icfd_mesh_size.zip\nGallery generated by Sphinx-Gallery\nMesh size\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_mesh_size.ipynb\nDownload Python source code: icfd_mesh_size.py\nDownload zipped: icfd_mesh_size.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansysdynacorepredynaisph",
        "title": "ansys.dyna.core.pre.dynaisph",
        "section": "ansys.dyna.core.pre.dynaisph",
        "text": "Module for creating an ISPH (incompressible smooth particle hydrodynamics) DYNA input deck.\nansys.dyna.core.pre.dynaisph"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#classes",
        "title": "ansys.dyna.core.pre.dynaisph > Classes",
        "section": "Classes",
        "text": "DynaISPH\nContains methods for creating a keyword related to ISPH.\nISPHAnalysis\nProvide controls related to ISPH.\nSPHSection\nDefines section properties for ISPH particles.\nMassflowPlane\nMeasures ISPH mass flow rate across a defined plane.\nISPHFluidPart\nGenerates ISPH particles inside a box.\nISPHStructPart\nGenerates and places ISPH elements on the surface of triangular shell elements.\nClasses\nDynaISPH\nISPHAnalysis\nSPHSection\nMassflowPlane\nISPHFluidPart\nISPHStructPart"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.DynaBase\nContains methods for creating a keyword related to ISPH.\nProvide controls related to ISPH.\nNumber of time steps between particle sorting. The default\nis 1.\nBox ID. The default is 0. ISPH approximations are computed\ninside the specified box. When a particle has gone outside this\nbox, it is deactivated.\nSpace dimension for ISPH particles. The default is 3. Options\nare:\nEQ.3: 3D problems\nEQ.2: 2D plane strain problems\nEQ.-2: 2D axisymmetric problems\nInitial number of neighbors per particle. The default is 150.\nParticle approximation theory. The default is 0.\nMaximum value for velocity for the ISPH particles. The default\nis 1000000000000000.0.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nProvide controls related to ISPH.\nSet the number of time steps between particle sorting.\nNumber of time steps between particle sorting. The default\nis 1.\nSet the box. ISPH approximations are computed inside a specified box.\nBox for computing ISHPH approximattions. When a particle has gone\noutside this box, it is deactivated.\nSet the initial number of neighbors per particle.\nInitial number of neighbors per particle.\nSet the type of BEM matrices and the way they are assembled.\nSet the type of BEM matrices and the way they are assembled.\nCreate an ISPH analysis.\nDefines section properties for ISPH particles.\nMeasures ISPH mass flow rate across a defined plane.\nNode set or part set specifying the ISPH particles to measure.\nPart set ID or part ID defining the surface across which to measure the flow rate.\nCreate a mass flow plane.\nBases: ansys.dyna.core.pre.dynabase.Part\nGenerates ISPH particles inside a box.\nPart ID.\nMinimum x,y,z-coordinate.\nBox length in the x,y,z-direction.\nNumber of ISPH particles in the x-direction.\nNumber of ISPH particles in the y-direction.\nNumber of ISPH particles in the z-direction.\nCalculate the smoothing length of the particles.\nConstant for calculating the initial smoothing length of the particles.\nScale factor for the minimum smoothing length.\nScale factor for the maximum smoothing length.\nInitial smoothing length, which overrides the true smoothing length.\nCreate ISPH particles inside the box.\nMeasure ISPH mass flow rate across a defined plane.\nSet properties for an ISPH fluid part.\nBases: ansys.dyna.core.pre.dynabase.Part\nGenerates and places ISPH elements on the surface of triangular shell elements.\nPart ID.\nPart or part set ID for the region of the mesh to place the ISPH elements on.\nMaximum space between ISPH elements.\nCalculate the smoothing length of the particles.\nConstant for calculating the initial smoothing length of the particles.\nScale factor for the minimum smoothing length.\nScale factor for the maximum smoothing length.\nInitial smoothing length, which overrides the true smoothing length.\nCreate ISPH elements on the surface of triangular shell elements.\nSet properties for the ISPH structural part.\nModule Contents\nansys.dyna.core.pre.dynabase.DynaBase\npython:int\noptional\n1\npython:int\noptional\n0\npython:int\noptional\n3\npython:int\noptional\n150\npython:int\noptional\n0\npython:float\noptional\n1000000000000000.0\nTrue\nFalse\nTrue\nFalse\npython:int\noptional\n1\nBox\npython:int\noptional\npython:float\noptional\npython:float\noptional\npython:float\noptional\npython:int\noptional\nNodeSet\nPartSet\nPartSet\nansys.dyna.core.pre.dynabase.Part\npython:int\nPoint\nPoint\npython:int\npython:int\npython:int\npython:float\npython:float\npython:float\npython:float\noptional\nansys.dyna.core.pre.dynabase.Part\npython:int\nPartSet\npython:float\npython:float\npython:float\npython:float\npython:float\noptional"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.DynaISPH",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > DynaISPH",
        "section": "Module Contents > DynaISPH",
        "text": "class ansys.dyna.core.pre.dynaisph.DynaISPH\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nContains methods for creating a keyword related to ISPH.\n\n!! processed by numpydoc !!\n\n\n\nisphanalysis\n\n\n\n\n\nset_des(num_timestep=1, boxid=0, space_dimension=3, neighbors=150, approximation_theory=0, max_velocty=1000000000000000.0)\n\nProvide controls related to ISPH.\n\nParameters\n\nnum_timestep\n\npython:int, optional\n\nNumber of time steps between particle sorting. The default\nis 1.\n\nboxid\n\npython:int, optional\n\nBox ID. The default is 0. ISPH approximations are computed\ninside the specified box. When a particle has gone outside this\nbox, it is deactivated.\n\nspace_dimension\n\npython:int, optional\n\nSpace dimension for ISPH particles. The default is 3. Options\nare:\n\nEQ.3: 3D problems\n\nEQ.2: 2D plane strain problems\n\nEQ.-2: 2D axisymmetric problems\n\nneighbors\n\npython:int, optional\n\nInitial number of neighbors per particle. The default is 150.\n\napproximation_theory\n\npython:int, optional\n\nParticle approximation theory. The default is 0.\n\nmax_velocty\n\npython:float, optional\n\nMaximum value for velocity for the ISPH particles. The default\nis 1000000000000000.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.DynaISPH.isphanalysis",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > isphanalysis",
        "section": "Module Contents > isphanalysis",
        "text": "isphanalysis\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.DynaISPH.set_des",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_des",
        "section": "Module Contents > set_des",
        "text": "set_des(num_timestep=1, boxid=0, space_dimension=3, neighbors=150, approximation_theory=0, max_velocty=1000000000000000.0)\n\nProvide controls related to ISPH.\n\nParameters\n\nnum_timestep\n\npython:int, optional\n\nNumber of time steps between particle sorting. The default\nis 1.\n\nboxid\n\npython:int, optional\n\nBox ID. The default is 0. ISPH approximations are computed\ninside the specified box. When a particle has gone outside this\nbox, it is deactivated.\n\nspace_dimension\n\npython:int, optional\n\nSpace dimension for ISPH particles. The default is 3. Options\nare:\n\nEQ.3: 3D problems\n\nEQ.2: 2D plane strain problems\n\nEQ.-2: 2D axisymmetric problems\n\nneighbors\n\npython:int, optional\n\nInitial number of neighbors per particle. The default is 150.\n\napproximation_theory\n\npython:int, optional\n\nParticle approximation theory. The default is 0.\n\nmax_velocty\n\npython:float, optional\n\nMaximum value for velocity for the ISPH particles. The default\nis 1000000000000000.0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.DynaISPH.save_file",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > ISPHAnalysis",
        "section": "Module Contents > ISPHAnalysis",
        "text": "class ansys.dyna.core.pre.dynaisph.ISPHAnalysis(num_timestep=1)\n\nProvide controls related to ISPH.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\nnum_timestep = 1\n\n\n\n\n\nbox = None\n\n\n\n\n\nspace_dimension = 3\n\n\n\n\n\nneighbors = 150\n\n\n\n\n\napproximation_theory = 13\n\n\n\n\n\nparticle_deactivation = 1000000000000000.0\n\n\n\n\n\nvelocity_scaling = 0\n\n\n\n\n\nset_num_timestep(num_timestep)\n\nSet the number of time steps between particle sorting.\n\nParameters\n\nnum_timestep\n\npython:int, optional\n\nNumber of time steps between particle sorting. The default\nis 1.\n\n!! processed by numpydoc !!\n\n\n\nset_box(box)\n\nSet the box. ISPH approximations are computed inside a specified box.\n\nParameters\n\nbox\n\nBox\n\nBox for computing ISHPH approximattions. When a particle has gone\noutside this box, it is deactivated.\n\n!! processed by numpydoc !!\n\n\n\nset_neighbors(neighbors)\n\nSet the initial number of neighbors per particle.\n\nParameters\n\nneighbors\n\npython:int, optional\n\nInitial number of neighbors per particle.\n\n!! processed by numpydoc !!\n\n\n\nset_particle_deactivation(deactivation)\n\nSet the type of BEM matrices and the way they are assembled.\n\nParameters\n\ndeactivation\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_velocity_scaling(scaling)\n\nSet the type of BEM matrices and the way they are assembled.\n\nParameters\n\nscaling\n\n\n\n!! processed by numpydoc !!\n\n\n\ncreate()\n\nCreate an ISPH analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.stub",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.num_timestep",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > num_timestep",
        "section": "Module Contents > num_timestep",
        "text": "num_timestep = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.box",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > box",
        "section": "Module Contents > box",
        "text": "box = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.space_dimension",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > space_dimension",
        "section": "Module Contents > space_dimension",
        "text": "space_dimension = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.neighbors",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > neighbors",
        "section": "Module Contents > neighbors",
        "text": "neighbors = 150\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.approximation_theory",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > approximation_theory",
        "section": "Module Contents > approximation_theory",
        "text": "approximation_theory = 13\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.particle_deactivation",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > particle_deactivation",
        "section": "Module Contents > particle_deactivation",
        "text": "particle_deactivation = 1000000000000000.0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.velocity_scaling",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > velocity_scaling",
        "section": "Module Contents > velocity_scaling",
        "text": "velocity_scaling = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.set_num_timestep",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_num_timestep",
        "section": "Module Contents > set_num_timestep",
        "text": "set_num_timestep(num_timestep)\n\nSet the number of time steps between particle sorting.\n\nParameters\n\nnum_timestep\n\npython:int, optional\n\nNumber of time steps between particle sorting. The default\nis 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.set_box",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_box",
        "section": "Module Contents > set_box",
        "text": "set_box(box)\n\nSet the box. ISPH approximations are computed inside a specified box.\n\nParameters\n\nbox\n\nBox\n\nBox for computing ISHPH approximattions. When a particle has gone\noutside this box, it is deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.set_neighbors",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_neighbors",
        "section": "Module Contents > set_neighbors",
        "text": "set_neighbors(neighbors)\n\nSet the initial number of neighbors per particle.\n\nParameters\n\nneighbors\n\npython:int, optional\n\nInitial number of neighbors per particle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.set_particle_deactivation",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_particle_deactivation",
        "section": "Module Contents > set_particle_deactivation",
        "text": "set_particle_deactivation(deactivation)\n\nSet the type of BEM matrices and the way they are assembled.\n\nParameters\n\ndeactivation\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.set_velocity_scaling",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_velocity_scaling",
        "section": "Module Contents > set_velocity_scaling",
        "text": "set_velocity_scaling(scaling)\n\nSet the type of BEM matrices and the way they are assembled.\n\nParameters\n\nscaling\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHAnalysis.create",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an ISPH analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.SPHSection",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > SPHSection",
        "section": "Module Contents > SPHSection",
        "text": "class ansys.dyna.core.pre.dynaisph.SPHSection(cslh=1.2, hmin=0.2, hmax=2.0, sphini=0)\n\nDefines section properties for ISPH particles.\n\nParameters\n\ncslh\n\npython:float, optional\n\n\n\nhmin\n\npython:float, optional\n\n\n\nhmax\n\npython:float, optional\n\n\n\nsphini\n\npython:int, optional\n\n\n\n!! processed by numpydoc !!\n\n\n\nid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.SPHSection.id",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > id",
        "section": "Module Contents > id",
        "text": "id\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.MassflowPlane",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > MassflowPlane",
        "section": "Module Contents > MassflowPlane",
        "text": "class ansys.dyna.core.pre.dynaisph.MassflowPlane(particles, surface)\n\nMeasures ISPH mass flow rate across a defined plane.\n\nParameters\n\nparticles\n\nNodeSet, PartSet\n\nNode set or part set specifying the ISPH particles to measure.\n\nsurface\n\nPartSet\n\nPart set ID or part ID defining the surface across which to measure the flow rate.\n\n!! processed by numpydoc !!\n\n\n\nparticles\n\n\n\n\n\nsurface\n\n\n\n\n\ncreate(stub)\n\nCreate a mass flow plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.MassflowPlane.particles",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > particles",
        "section": "Module Contents > particles",
        "text": "particles\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.MassflowPlane.surface",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > surface",
        "section": "Module Contents > surface",
        "text": "surface\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.MassflowPlane.create",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a mass flow plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > ISPHFluidPart",
        "section": "Module Contents > ISPHFluidPart",
        "text": "class ansys.dyna.core.pre.dynaisph.ISPHFluidPart(pid, minpoint, length, numdirx, numdiry, numdirz)\n\nBases: ansys.dyna.core.pre.dynabase.Part\n\nGenerates ISPH particles inside a box.\n\nParameters\n\npid\n\npython:int\n\nPart ID.\n\nminpoint\n\nPoint\n\nMinimum x,y,z-coordinate.\n\nlength\n\nPoint\n\nBox length in the x,y,z-direction.\n\nnumdirx\n\npython:int\n\nNumber of ISPH particles in the x-direction.\n\nnumdiry\n\npython:int\n\nNumber of ISPH particles in the y-direction.\n\nnumdirz\n\npython:int\n\nNumber of ISPH particles in the z-direction.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'ISPHFLUID'\n\n\n\n\n\nminpoint\n\n\n\n\n\nlength\n\n\n\n\n\nnumdirx\n\n\n\n\n\nnumdiry\n\n\n\n\n\nnumdirz\n\n\n\n\n\ncslh = 1.2\n\n\n\n\n\nhmin = 0.2\n\n\n\n\n\nhmax = 2.0\n\n\n\n\n\nsphini = 0\n\n\n\n\n\nmassflowplane = None\n\n\n\n\n\nset_smoothing_length(initial, min, max, optional)\n\nCalculate the smoothing length of the particles.\n\nParameters\n\ninitial\n\npython:float\n\nConstant for calculating the initial smoothing length of the particles.\n\nmin\n\npython:float\n\nScale factor for the minimum smoothing length.\n\nmax\n\npython:float\n\nScale factor for the maximum smoothing length.\n\noptional\n\npython:float, optional\n\nInitial smoothing length, which overrides the true smoothing length.\n\n!! processed by numpydoc !!\n\n\n\ncreate_particles()\n\nCreate ISPH particles inside the box.\n\n!! processed by numpydoc !!\n\n\n\ncreate_massflow_plane(surfaces)\n\nMeasure ISPH mass flow rate across a defined plane.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for an ISPH fluid part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.stub",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.type",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'ISPHFLUID'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.minpoint",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > minpoint",
        "section": "Module Contents > minpoint",
        "text": "minpoint\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.length",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > length",
        "section": "Module Contents > length",
        "text": "length\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.numdirx",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > numdirx",
        "section": "Module Contents > numdirx",
        "text": "numdirx\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.numdiry",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > numdiry",
        "section": "Module Contents > numdiry",
        "text": "numdiry\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.numdirz",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > numdirz",
        "section": "Module Contents > numdirz",
        "text": "numdirz\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.cslh",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > cslh",
        "section": "Module Contents > cslh",
        "text": "cslh = 1.2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.hmin",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > hmin",
        "section": "Module Contents > hmin",
        "text": "hmin = 0.2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.hmax",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > hmax",
        "section": "Module Contents > hmax",
        "text": "hmax = 2.0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.sphini",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > sphini",
        "section": "Module Contents > sphini",
        "text": "sphini = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.massflowplane",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > massflowplane",
        "section": "Module Contents > massflowplane",
        "text": "massflowplane = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.set_smoothing_length",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_smoothing_length",
        "section": "Module Contents > set_smoothing_length",
        "text": "set_smoothing_length(initial, min, max, optional)\n\nCalculate the smoothing length of the particles.\n\nParameters\n\ninitial\n\npython:float\n\nConstant for calculating the initial smoothing length of the particles.\n\nmin\n\npython:float\n\nScale factor for the minimum smoothing length.\n\nmax\n\npython:float\n\nScale factor for the maximum smoothing length.\n\noptional\n\npython:float, optional\n\nInitial smoothing length, which overrides the true smoothing length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.create_particles",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > create_particles",
        "section": "Module Contents > create_particles",
        "text": "create_particles()\n\nCreate ISPH particles inside the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.create_massflow_plane",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > create_massflow_plane",
        "section": "Module Contents > create_massflow_plane",
        "text": "create_massflow_plane(surfaces)\n\nMeasure ISPH mass flow rate across a defined plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHFluidPart.set_property",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for an ISPH fluid part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > ISPHStructPart",
        "section": "Module Contents > ISPHStructPart",
        "text": "class ansys.dyna.core.pre.dynaisph.ISPHStructPart(pid, couple_partset, space)\n\nBases: ansys.dyna.core.pre.dynabase.Part\n\nGenerates and places ISPH elements on the surface of triangular shell elements.\n\nParameters\n\npid\n\npython:int\n\nPart ID.\n\ncouple_partset\n\nPartSet\n\nPart or part set ID for the region of the mesh to place the ISPH elements on.\n\nspace\n\npython:float\n\nMaximum space between ISPH elements.\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ntype = 'ISPHSTRUCT'\n\n\n\n\n\ncouple_partset\n\n\n\n\n\nspace\n\n\n\n\n\ncslh = 1.2\n\n\n\n\n\nhmin = 0.2\n\n\n\n\n\nhmax = 2.0\n\n\n\n\n\nsphini = 0\n\n\n\n\n\nset_smoothing_length(initial, min, max, optional)\n\nCalculate the smoothing length of the particles.\n\nParameters\n\nParameters\n\n\n\n———-\n\n\n\ninitial\n\npython:float\n\nConstant for calculating the initial smoothing length of the particles.\n\nmin\n\npython:float\n\nScale factor for the minimum smoothing length.\n\nmax\n\npython:float\n\nScale factor for the maximum smoothing length.\n\noptional\n\npython:float, optional\n\nInitial smoothing length, which overrides the true smoothing length.\n\n!! processed by numpydoc !!\n\n\n\ncreate_particles()\n\nCreate ISPH elements on the surface of triangular shell elements.\n\n!! processed by numpydoc !!\n\n\n\nset_property()\n\nSet properties for the ISPH structural part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.stub",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.type",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'ISPHSTRUCT'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.couple_partset",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > couple_partset",
        "section": "Module Contents > couple_partset",
        "text": "couple_partset\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.space",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > space",
        "section": "Module Contents > space",
        "text": "space\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.cslh",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > cslh",
        "section": "Module Contents > cslh",
        "text": "cslh = 1.2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.hmin",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > hmin",
        "section": "Module Contents > hmin",
        "text": "hmin = 0.2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.hmax",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > hmax",
        "section": "Module Contents > hmax",
        "text": "hmax = 2.0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.sphini",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > sphini",
        "section": "Module Contents > sphini",
        "text": "sphini = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.set_smoothing_length",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_smoothing_length",
        "section": "Module Contents > set_smoothing_length",
        "text": "set_smoothing_length(initial, min, max, optional)\n\nCalculate the smoothing length of the particles.\n\nParameters\n\nParameters\n\n\n\n———-\n\n\n\ninitial\n\npython:float\n\nConstant for calculating the initial smoothing length of the particles.\n\nmin\n\npython:float\n\nScale factor for the minimum smoothing length.\n\nmax\n\npython:float\n\nScale factor for the maximum smoothing length.\n\noptional\n\npython:float, optional\n\nInitial smoothing length, which overrides the true smoothing length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.create_particles",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > create_particles",
        "section": "Module Contents > create_particles",
        "text": "create_particles()\n\nCreate ISPH elements on the surface of triangular shell elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynaisph/index",
        "href": "autoapi/ansys/dyna/core/pre/dynaisph/index.html#ansys.dyna.core.pre.dynaisph.ISPHStructPart.set_property",
        "title": "ansys.dyna.core.pre.dynaisph > Module Contents > set_property",
        "section": "Module Contents > set_property",
        "text": "set_property()\n\nSet properties for the ISPH structural part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansysdynacorepregraphicsgraphics",
        "title": "ansys.dyna.core.pre.graphics.graphics",
        "section": "ansys.dyna.core.pre.graphics.graphics",
        "text": "Module for graphics-related implementations.\nansys.dyna.core.pre.graphics.graphics"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#attributes",
        "title": "ansys.dyna.core.pre.graphics.graphics > Attributes",
        "section": "Attributes",
        "text": "color_matrix\n\nAttributes\ncolor_matrix"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#classes",
        "title": "ansys.dyna.core.pre.graphics.graphics > Classes",
        "section": "Classes",
        "text": "DisplayMeshType\nContains the mesh types to display.\nColorByType\nContains the zone types to display.\nPicker\nContains the items that can be selected from the display with the mouse.\nGraphics\nManages graphics in PyDYNA.\nClasses\nDisplayMeshType\nColorByType\nPicker\nGraphics"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#functions",
        "title": "ansys.dyna.core.pre.graphics.graphics > Functions",
        "section": "Functions",
        "text": "compute_distance(point1, point2)\nCompute the distance between two points.\nFunctions\ncompute_distance"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#module-contents",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents",
        "section": "Module Contents",
        "text": "Bases: enum.IntEnum\nContains the mesh types to display.\nBases: enum.IntEnum\nContains the zone types to display.\nCompute the distance between two points.\nContains the items that can be selected from the display with the mouse.\nPyVista plotter to manipulate.\nClass for providing callbacks.\nAll selected meshes in the display.\nClear all picked selections in the display.\nSetter for ignore_pick.\nPicked selection to ignore.\nCall the code to run when something is clicked in the display.\nBases: object\nManages graphics in PyDYNA.\nModel to show.\nWhether to use the Trame visualizer. The default is False.\nShow the appropriate display based on parameters.\nParts to show. The default is None.\nWhether to update the display. The default is True.\nGet the mesh data from a face.\nMesh data for the face.\nShow the current set display.\nGet the color by zone type.\nColor by zone type.\nModule Contents\nenum.IntEnum\nenum.IntEnum\nPlotter\nGraphics\nAny\nobject\npydyna.pre.Model\noptional\nFalse\nAny\noptional\nNone\noptional\nTrue\nList\nColorByType"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > DisplayMeshType",
        "section": "Module Contents > DisplayMeshType",
        "text": "class ansys.dyna.core.pre.graphics.graphics.DisplayMeshType\n\nBases: enum.IntEnum\n\nContains the mesh types to display.\n\n!! processed by numpydoc !!\n\n\n\nFACE = 0\n\n\n\n\n\nBEAM = 1\n\n\n\n\n\nCYLINDER = 2\n\n\n\n\n\nSPHERE = 3\n\n\n\n\n\nPLANAR = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType.FACE",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > FACE",
        "section": "Module Contents > FACE",
        "text": "FACE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType.BEAM",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > BEAM",
        "section": "Module Contents > BEAM",
        "text": "BEAM = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType.CYLINDER",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > CYLINDER",
        "section": "Module Contents > CYLINDER",
        "text": "CYLINDER = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType.SPHERE",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > SPHERE",
        "section": "Module Contents > SPHERE",
        "text": "SPHERE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.DisplayMeshType.PLANAR",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > PLANAR",
        "section": "Module Contents > PLANAR",
        "text": "PLANAR = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.ColorByType",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > ColorByType",
        "section": "Module Contents > ColorByType",
        "text": "class ansys.dyna.core.pre.graphics.graphics.ColorByType\n\nBases: enum.IntEnum\n\nContains the zone types to display.\n\n!! processed by numpydoc !!\n\n\n\nZONE = 0\n\n\n\n\n\nZONELET = 1\n\n\n\n\n\nPART = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.ColorByType.ZONE",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > ZONE",
        "section": "Module Contents > ZONE",
        "text": "ZONE = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.ColorByType.ZONELET",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > ZONELET",
        "section": "Module Contents > ZONELET",
        "text": "ZONELET = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.ColorByType.PART",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > PART",
        "section": "Module Contents > PART",
        "text": "PART = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.color_matrix",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > color_matrix",
        "section": "Module Contents > color_matrix",
        "text": "ansys.dyna.core.pre.graphics.graphics.color_matrix\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.compute_distance",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > compute_distance",
        "section": "Module Contents > compute_distance",
        "text": "ansys.dyna.core.pre.graphics.graphics.compute_distance(point1, point2)\n\nCompute the distance between two points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > Picker",
        "section": "Module Contents > Picker",
        "text": "class ansys.dyna.core.pre.graphics.graphics.Picker(plotter: pyvista.Plotter, graphics)\n\nContains the items that can be selected from the display with the mouse.\n\nParameters\n\nplotter\n\nPlotter\n\nPyVista plotter to manipulate.\n\ngraphics\n\nGraphics\n\nClass for providing callbacks.\n\n!! processed by numpydoc !!\n\n\n\nplotter\n\n\n\n\n\nproperty selections\n\nAll selected meshes in the display.\n\n!! processed by numpydoc !!\n\n\n\nclear_selection()\n\nClear all picked selections in the display.\n\n!! processed by numpydoc !!\n\n\n\nignore(ignore_pick)\n\nSetter for ignore_pick.\n\nParameters\n\nignore_pick\n\nAny\n\nPicked selection to ignore.\n\n!! processed by numpydoc !!\n\n\n\n__call__(*args, **kwargs)\n\nCall the code to run when something is clicked in the display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker.plotter",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > plotter",
        "section": "Module Contents > plotter",
        "text": "plotter\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker.selections",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > selections",
        "section": "Module Contents > selections",
        "text": "property selections\n\nAll selected meshes in the display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker.clear_selection",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > clear_selection",
        "section": "Module Contents > clear_selection",
        "text": "clear_selection()\n\nClear all picked selections in the display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker.ignore",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > ignore",
        "section": "Module Contents > ignore",
        "text": "ignore(ignore_pick)\n\nSetter for ignore_pick.\n\nParameters\n\nignore_pick\n\nAny\n\nPicked selection to ignore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Picker.__call__",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > __call__",
        "section": "Module Contents > __call__",
        "text": "__call__(*args, **kwargs)\n\nCall the code to run when something is clicked in the display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Graphics",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > Graphics",
        "section": "Module Contents > Graphics",
        "text": "class ansys.dyna.core.pre.graphics.graphics.Graphics(model: ansys.dyna.core.pre.Model, use_trame: bool = False, view_position: str = 'xy')\n\nBases: object\n\nManages graphics in PyDYNA.\n\nParameters\n\nmodel\n\npydyna.pre.Model\n\nModel to show.\n\nuse_trame\n\nbool, optional\n\nWhether to use the Trame visualizer. The default is False.\n\n!! processed by numpydoc !!\n\n\n\n__call__(parts: List = None, update: bool = True)\n\nShow the appropriate display based on parameters.\n\nParameters\n\nparts\n\nAny, optional\n\nParts to show. The default is None.\n\nupdate\n\nbool, optional\n\nWhether to update the display. The default is True.\n\n!! processed by numpydoc !!\n\n\n\nget_face_mesh_data()\n\nGet the mesh data from a face.\n\nReturns\n\nList\n\nMesh data for the face.\n\n!! processed by numpydoc !!\n\n\n\nshow()\n\nShow the current set display.\n\n!! processed by numpydoc !!\n\n\n\nget_color_by_type() -> ColorByType\n\nGet the color by zone type.\n\nReturns\n\nColorByType\n\nColor by zone type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Graphics.__call__",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > __call__",
        "section": "Module Contents > __call__",
        "text": "__call__(parts: List = None, update: bool = True)\n\nShow the appropriate display based on parameters.\n\nParameters\n\nparts\n\nAny, optional\n\nParts to show. The default is None.\n\nupdate\n\nbool, optional\n\nWhether to update the display. The default is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Graphics.get_face_mesh_data",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > get_face_mesh_data",
        "section": "Module Contents > get_face_mesh_data",
        "text": "get_face_mesh_data()\n\nGet the mesh data from a face.\n\nReturns\n\nList\n\nMesh data for the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Graphics.show",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > show",
        "section": "Module Contents > show",
        "text": "show()\n\nShow the current set display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/graphics/index.html#ansys.dyna.core.pre.graphics.graphics.Graphics.get_color_by_type",
        "title": "ansys.dyna.core.pre.graphics.graphics > Module Contents > get_color_by_type",
        "section": "Module Contents > get_color_by_type",
        "text": "get_color_by_type() -> ColorByType\n\nGet the color by zone type.\n\nReturns\n\nColorByType\n\nColor by zone type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Explicit/sg_execution_times",
        "href": "examples/Explicit/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:01.879 total execution time for 2 files from examples/Explicit:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Explicit_ball_plate.py (ball_plate.py)\n00:01.378\n0.0\nsphx_glr_examples_Explicit_belted_dummy.py (belted_dummy.py)\n00:00.501\n0.0\nComputation times\nball_plate.py\nbelted_dummy.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/index.html#ansysdynacorelibcards",
        "title": "ansys.dyna.core.lib.cards",
        "section": "ansys.dyna.core.lib.cards",
        "text": "ansys.dyna.core.lib.cards"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/index.html#submodules",
        "title": "ansys.dyna.core.lib.cards > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "examples/ISPH/rigidtest",
        "href": "examples/ISPH/rigidtest.html#rigid-test",
        "title": "Rigid test",
        "section": "Rigid test",
        "text": "This example shows how to use the PyDYNA pre service to create\nan ISPH model. The executable file for LS-DYNA is\nls-dyna_mpp_d_R13.0_365-gf8a97bda2a_winx64_ifort190_msmpi.exe.\nTotal running time of the script: (0 minutes 0.698 seconds)\nDownload Jupyter notebook: rigidtest.ipynb\nDownload Python source code: rigidtest.py\nDownload zipped: rigidtest.zip\nGallery generated by Sphinx-Gallery\nRigid test\npre\nls-dyna_mpp_d_R13.0_365-gf8a97bda2a_winx64_ifort190_msmpi.exe\nDownload Jupyter notebook: rigidtest.ipynb\nDownload Python source code: rigidtest.py\nDownload zipped: rigidtest.zip"
    },
    {
        "objectID": "getting-started/KEYWORDS_README",
        "href": "getting-started/KEYWORDS_README.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Getting started"
    },
    {
        "objectID": "getting-started/KEYWORDS_README",
        "href": "getting-started/KEYWORDS_README.html#overview",
        "title": "Getting started > Overview",
        "section": "Overview",
        "text": "The keywords` module of PyDyna provides Python libraries to build an Ansys LS-DYNA keyword deck.\nOverview"
    },
    {
        "objectID": "getting-started/KEYWORDS_README",
        "href": "getting-started/KEYWORDS_README.html#usage",
        "title": "Getting started > Usage",
        "section": "Usage",
        "text": "Here’s an example of how you can generate a *SECTION_TSHELL` keyword:\nUsage"
    },
    {
        "objectID": "getting-started/KEYWORDS_README",
        "href": "getting-started/KEYWORDS_README.html#examples",
        "title": "Getting started > Examples",
        "section": "Examples",
        "text": "Examples showing end-to-end workflows for using PyDyna -\nwrite a deck using the keywords module and run the solver using the run module.\nBuckling_Beer_Can\nJohn_Reid_Pendulum\nJohn_Reid_Pipe\nTaylor_Bar\nExamples\nkeywords\nrun\nBuckling_Beer_Can\nJohn_Reid_Pendulum\nJohn_Reid_Pipe\nTaylor_Bar"
    },
    {
        "objectID": "getting-started/RUN_README",
        "href": "getting-started/RUN_README.html#use-pydyna-to-run-lsdyna-locally",
        "title": "Use PyDYNA to run LSDYNA locally",
        "section": "Use PyDYNA to run LSDYNA locally",
        "text": "Use PyDYNA to run LSDYNA locally"
    },
    {
        "objectID": "getting-started/RUN_README",
        "href": "getting-started/RUN_README.html#run-ls-dyna-using-ansysdynacorerun",
        "title": "Use PyDYNA to run LSDYNA locally > Run LS-DYNA using ansys.dyna.core.run",
        "section": "Run LS-DYNA using ansys.dyna.core.run",
        "text": "Run LS-DYNA using ansys.dyna.core.run"
    },
    {
        "objectID": "getting-started/RUN_README",
        "href": "getting-started/RUN_README.html#how-it-works",
        "title": "Use PyDYNA to run LSDYNA locally > How it works",
        "section": "How it works",
        "text": "run_dyna attempts to find an installation of the LS-DYNA solver on your machine.\nIt uses the Python dependency ansys-tools-path to discover where LS-DYNA is installed.\nAfter installing ansys-tools-path, the location of LS-DYNA can be saved by running\nsave-ansys-path --name dyna {path/to/dyna} so that subsequent usages of run_dyna\nlook there.\nHow it works\nrun_dyna\nansys-tools-path\nansys-tools-path\nsave-ansys-path --name dyna {path/to/dyna}\nrun_dyna"
    },
    {
        "objectID": "examples/Taylor_Bar/index",
        "href": "examples/Taylor_Bar/index.html#taylor-bar-impact",
        "title": "Taylor bar impact",
        "section": "Taylor bar impact",
        "text": "This example, inspired by the https://lsdyna.ansys.com/bar-a/ example, shows how\nto use PyDyna to parameterize a LS-DYNA problem and compare results.\nsphx_glr_examples_Taylor_Bar_plot_taylor_bar.py\nTaylor bar impact"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansysdynacorepredynasolution",
        "title": "ansys.dyna.core.pre.dynasolution",
        "section": "ansys.dyna.core.pre.dynasolution",
        "text": "Module for providing the top object that sets up a DYNA solution.\nansys.dyna.core.pre.dynasolution"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#attributes",
        "title": "ansys.dyna.core.pre.dynasolution > Attributes",
        "section": "Attributes",
        "text": "CHUNK_SIZE\n\nMAX_MESSAGE_LENGTH\n\nSERVER_PRE_VERSION\n\nAttributes\nCHUNK_SIZE\nMAX_MESSAGE_LENGTH\nSERVER_PRE_VERSION"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#classes",
        "title": "ansys.dyna.core.pre.dynasolution > Classes",
        "section": "Classes",
        "text": "DynaSolution\nContains methods for creating a general LS-DYNA keyword.\nClasses\nDynaSolution"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#functions",
        "title": "ansys.dyna.core.pre.dynasolution > Functions",
        "section": "Functions",
        "text": "init_log(log_file)\nInitialize a log file.\nFunctions\ninit_log"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents",
        "section": "Module Contents",
        "text": "Initialize a log file.\nName of the log file.\nContains methods for creating a general LS-DYNA keyword.\nHost name. The default is \"localhost\".\nPort. the default is \"50051\".\nCheck if the server is launched locally.\nTrue when successful, False when failed.\nGet model associated with the solution.\nGet the stub of the solution object.\nAdd a case in the solution.\nGet file chunks.\nName of the file.\nUpload files to the server.\nName of the file.\nDownload files from the server.\nOpen initial model files.\nList of filenames. The main file is [0]. The others are subfiles.\nTrue when successful, False when failed.\nSet time for terminating the job.\nTermination time.\nTrue when successful, False when failed.\nRequest binary output.\nType of file. The default is \"D3PLOT\".\nTime interval between output states. The default is 0.\nNumber of shell and thick shell through-thickness integration points\nto output to the d3plot. The default is 3.\nHow to plot output states on plot files. The default is 0. Every output\nstate for the d3plot database is written to a separate file. Options are:\nEQ.0: More than one state can be on each plot file.\nEQ.1: Only one state can be on each plot file.\nData compression to eliminate rigid body data. The default is 1.\nNumber of solid element integration points written to the LS-DYNA database.\nThe default is 1.\nTrue when successful, False when failed.\nObtain output files containing result information.\nType of the database. Options are:\nBNDOUT\nGLSTAT\nMATSUM\nNODFOR\nRCFORC\nSLEOUT\nTime interval between outputs. The default is 0.0.\nFlag for whether to generate binary output. The default is 1.\nCurve ID specifying the time interval between outputs. The default\nis 0.\nFlag for governing the behavior of the output frequency load curve\ndefined by the lcur parameter. The default is 0.\nTrue when successful, False when failed.\nObtain output files containing result information.\nTime interval between outputs of part energies. The default is 0.\nTime interval between outputs of global statistics\nand energies. The default is 0.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nDelete remote instance.\nModule Contents\npython:str\npython:str\noptional\n\"localhost\"\npython:str\noptional\n\"50051\"\nTrue\nFalse\npython:str\npython:str\npython:list\n[0]\nTrue\nFalse\npython:float\nTrue\nFalse\npython:str\noptional\n\"D3PLOT\"\npython:float\noptional\n0\npython:int\noptional\n3\npython:int\noptional\n0\npython:int\noptional\n1\npython:int\noptional\n1\nTrue\nFalse\npython:str\npython:float\noptional\n0.0\npython:int\noptional\n1\npython:int\noptional\n0\npython:int\noptional\nlcur\n0\nTrue\nFalse\npython:float\noptional\n0\npython:float\noptional\n0\nTrue\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.CHUNK_SIZE",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > CHUNK_SIZE",
        "section": "Module Contents > CHUNK_SIZE",
        "text": "ansys.dyna.core.pre.dynasolution.CHUNK_SIZE = 1048576\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.MAX_MESSAGE_LENGTH",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > MAX_MESSAGE_LENGTH",
        "section": "Module Contents > MAX_MESSAGE_LENGTH",
        "text": "ansys.dyna.core.pre.dynasolution.MAX_MESSAGE_LENGTH = 1073741824\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.SERVER_PRE_VERSION",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > SERVER_PRE_VERSION",
        "section": "Module Contents > SERVER_PRE_VERSION",
        "text": "ansys.dyna.core.pre.dynasolution.SERVER_PRE_VERSION = 'v0.4.6'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.init_log",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > init_log",
        "section": "Module Contents > init_log",
        "text": "ansys.dyna.core.pre.dynasolution.init_log(log_file)\n\nInitialize a log file.\n\nParameters\n\nlog_file\n\npython:str\n\nName of the log file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > DynaSolution",
        "section": "Module Contents > DynaSolution",
        "text": "class ansys.dyna.core.pre.dynasolution.DynaSolution(hostname='localhost', port='50051', channel=None, server_path='')\n\nContains methods for creating a general LS-DYNA keyword.\n\nParameters\n\nhostname\n\npython:str, optional\n\nHost name. The default is \"localhost\".\n\nport\n\npython:str, optional\n\nPort. the default is \"50051\".\n\n!! processed by numpydoc !!\n\n\n\npim_client = None\n\n\n\n\n\nremote_instance = None\n\n\n\n\n\nstub\n\n\n\n\n\nobject_list = []\n\n\n\n\n\nmainname = ''\n\n\n\n\n\nget_download_path()\n\n\n\n\n\nstatic get_appdata_path()\n\n\n\n\n\nstatic downloadfile(url: str, fname: str)\n\n\n\n\n\nstatic grpc_local_server_on() -> bool\n\nCheck if the server is launched locally.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nproperty model\n\nGet model associated with the solution.\n\n!! processed by numpydoc !!\n\n\n\nget_stub()\n\nGet the stub of the solution object.\n\n!! processed by numpydoc !!\n\n\n\nadd(obj)\n\nAdd a case in the solution.\n\nParameters\n\nobj\n\n\n\n!! processed by numpydoc !!\n\n\n\nget_file_chunks(filename)\n\nGet file chunks.\n\nParameters\n\nfilename\n\npython:str\n\nName of the file.\n\n!! processed by numpydoc !!\n\n\n\nupload(stub_, filename)\n\nUpload files to the server.\n\nParameters\n\nstub_\n\n\n\nfilename\n\npython:str\n\nName of the file.\n\n!! processed by numpydoc !!\n\n\n\ndownload(remote_name, local_name)\n\nDownload files from the server.\n\nParameters\n\nstub_\n\n\n\nremote_name\n\n\n\nlocal_name\n\n\n\n!! processed by numpydoc !!\n\n\n\nopen_files(filenames)\n\nOpen initial model files.\n\nParameters\n\nfilenames\n\npython:list\n\nList of filenames. The main file is [0]. The others are subfiles.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_termination(termination_time)\n\nSet time for terminating the job.\n\nParameters\n\ntermination_time\n\npython:float\n\nTermination time.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_database_binary(filetype='D3PLOT', dt=0, maxint=3, ieverp=0, dcomp=1, nintsld=1)\n\nRequest binary output.\n\nParameters\n\nfiletype\n\npython:str, optional\n\nType of file. The default is \"D3PLOT\".\n\ndt\n\npython:float, optional\n\nTime interval between output states. The default is 0.\n\nmaxint\n\npython:int, optional\n\nNumber of shell and thick shell through-thickness integration points\nto output to the d3plot. The default is 3.\n\nieverp\n\npython:int, optional\n\nHow to plot output states on plot files. The default is 0. Every output\nstate for the d3plot database is written to a separate file. Options are:\n\nEQ.0: More than one state can be on each plot file.\n\nEQ.1: Only one state can be on each plot file.\n\ndcomp\n\npython:int, optional\n\nData compression to eliminate rigid body data. The default is 1.\n\nnintsld\n\npython:int, optional\n\nNumber of solid element integration points written to the LS-DYNA database.\nThe default is 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_database_ascii(type, dt=0.0, binary=1, lcur=0, ioopt=0)\n\nObtain output files containing result information.\n\nParameters\n\ntype\n\npython:str\n\nType of the database. Options are:\n\nBNDOUT\n\nGLSTAT\n\nMATSUM\n\nNODFOR\n\nRCFORC\n\nSLEOUT\n\ndt\n\npython:float, optional\n\nTime interval between outputs. The default is 0.0.\n\nbinary\n\npython:int, optional\n\nFlag for whether to generate binary output. The default is 1.\n\nlcur\n\npython:int, optional\n\nCurve ID specifying the time interval between outputs. The default\nis 0.\n\nioopt\n\npython:int, optional\n\nFlag for governing the behavior of the output frequency load curve\ndefined by the lcur parameter. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_output_database(matsum=0, glstat=0, elout=0, nodout=0, nodfor=0, rbdout=0, rcforc=0, secforc=0, rwforc=0, abstat=0, bndout=0, sleout=0, sphmassflow=0)\n\nObtain output files containing result information.\n\nParameters\n\nmatsum\n\npython:float, optional\n\nTime interval between outputs of part energies. The default is 0.\n\nglstat\n\npython:float, optional\n\nTime interval between outputs of global statistics\nand energies. The default is 0.\n\nelout\n\n\n\nnodout\n\n\n\nmodfor\n\n\n\nrbdout\n\n\n\nsecforc\n\n\n\nrwforce\n\n\n\nbndout\n\n\n\nsleout\n\n\n\nsphmassflow\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nquit()\n\nDelete remote instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.pim_client",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > pim_client",
        "section": "Module Contents > pim_client",
        "text": "pim_client = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.remote_instance",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > remote_instance",
        "section": "Module Contents > remote_instance",
        "text": "remote_instance = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.stub",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.object_list",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > object_list",
        "section": "Module Contents > object_list",
        "text": "object_list = []\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.mainname",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > mainname",
        "section": "Module Contents > mainname",
        "text": "mainname = ''\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.get_download_path",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > get_download_path",
        "section": "Module Contents > get_download_path",
        "text": "get_download_path()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.get_appdata_path",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > get_appdata_path",
        "section": "Module Contents > get_appdata_path",
        "text": "static get_appdata_path()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.downloadfile",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > downloadfile",
        "section": "Module Contents > downloadfile",
        "text": "static downloadfile(url: str, fname: str)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.grpc_local_server_on",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > grpc_local_server_on",
        "section": "Module Contents > grpc_local_server_on",
        "text": "static grpc_local_server_on() -> bool\n\nCheck if the server is launched locally.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.model",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > model",
        "section": "Module Contents > model",
        "text": "property model\n\nGet model associated with the solution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.get_stub",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > get_stub",
        "section": "Module Contents > get_stub",
        "text": "get_stub()\n\nGet the stub of the solution object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.add",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > add",
        "section": "Module Contents > add",
        "text": "add(obj)\n\nAdd a case in the solution.\n\nParameters\n\nobj\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.get_file_chunks",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > get_file_chunks",
        "section": "Module Contents > get_file_chunks",
        "text": "get_file_chunks(filename)\n\nGet file chunks.\n\nParameters\n\nfilename\n\npython:str\n\nName of the file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.upload",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > upload",
        "section": "Module Contents > upload",
        "text": "upload(stub_, filename)\n\nUpload files to the server.\n\nParameters\n\nstub_\n\n\n\nfilename\n\npython:str\n\nName of the file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.download",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > download",
        "section": "Module Contents > download",
        "text": "download(remote_name, local_name)\n\nDownload files from the server.\n\nParameters\n\nstub_\n\n\n\nremote_name\n\n\n\nlocal_name\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.open_files",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > open_files",
        "section": "Module Contents > open_files",
        "text": "open_files(filenames)\n\nOpen initial model files.\n\nParameters\n\nfilenames\n\npython:list\n\nList of filenames. The main file is [0]. The others are subfiles.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.set_termination",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > set_termination",
        "section": "Module Contents > set_termination",
        "text": "set_termination(termination_time)\n\nSet time for terminating the job.\n\nParameters\n\ntermination_time\n\npython:float\n\nTermination time.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.create_database_binary",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > create_database_binary",
        "section": "Module Contents > create_database_binary",
        "text": "create_database_binary(filetype='D3PLOT', dt=0, maxint=3, ieverp=0, dcomp=1, nintsld=1)\n\nRequest binary output.\n\nParameters\n\nfiletype\n\npython:str, optional\n\nType of file. The default is \"D3PLOT\".\n\ndt\n\npython:float, optional\n\nTime interval between output states. The default is 0.\n\nmaxint\n\npython:int, optional\n\nNumber of shell and thick shell through-thickness integration points\nto output to the d3plot. The default is 3.\n\nieverp\n\npython:int, optional\n\nHow to plot output states on plot files. The default is 0. Every output\nstate for the d3plot database is written to a separate file. Options are:\n\nEQ.0: More than one state can be on each plot file.\n\nEQ.1: Only one state can be on each plot file.\n\ndcomp\n\npython:int, optional\n\nData compression to eliminate rigid body data. The default is 1.\n\nnintsld\n\npython:int, optional\n\nNumber of solid element integration points written to the LS-DYNA database.\nThe default is 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.create_database_ascii",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > create_database_ascii",
        "section": "Module Contents > create_database_ascii",
        "text": "create_database_ascii(type, dt=0.0, binary=1, lcur=0, ioopt=0)\n\nObtain output files containing result information.\n\nParameters\n\ntype\n\npython:str\n\nType of the database. Options are:\n\nBNDOUT\n\nGLSTAT\n\nMATSUM\n\nNODFOR\n\nRCFORC\n\nSLEOUT\n\ndt\n\npython:float, optional\n\nTime interval between outputs. The default is 0.0.\n\nbinary\n\npython:int, optional\n\nFlag for whether to generate binary output. The default is 1.\n\nlcur\n\npython:int, optional\n\nCurve ID specifying the time interval between outputs. The default\nis 0.\n\nioopt\n\npython:int, optional\n\nFlag for governing the behavior of the output frequency load curve\ndefined by the lcur parameter. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.set_output_database",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > set_output_database",
        "section": "Module Contents > set_output_database",
        "text": "set_output_database(matsum=0, glstat=0, elout=0, nodout=0, nodfor=0, rbdout=0, rcforc=0, secforc=0, rwforc=0, abstat=0, bndout=0, sleout=0, sphmassflow=0)\n\nObtain output files containing result information.\n\nParameters\n\nmatsum\n\npython:float, optional\n\nTime interval between outputs of part energies. The default is 0.\n\nglstat\n\npython:float, optional\n\nTime interval between outputs of global statistics\nand energies. The default is 0.\n\nelout\n\n\n\nnodout\n\n\n\nmodfor\n\n\n\nrbdout\n\n\n\nsecforc\n\n\n\nrwforce\n\n\n\nbndout\n\n\n\nsleout\n\n\n\nsphmassflow\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.save_file",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file()\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynasolution/index",
        "href": "autoapi/ansys/dyna/core/pre/dynasolution/index.html#ansys.dyna.core.pre.dynasolution.DynaSolution.quit",
        "title": "ansys.dyna.core.pre.dynasolution > Module Contents > quit",
        "section": "Module Contents > quit",
        "text": "quit()\n\nDelete remote instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/index.html#ansysdynacorepregraphics",
        "title": "ansys.dyna.core.pre.graphics",
        "section": "ansys.dyna.core.pre.graphics",
        "text": "ansys.dyna.core.pre.graphics"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/graphics/index",
        "href": "autoapi/ansys/dyna/core/pre/graphics/index.html#submodules",
        "title": "ansys.dyna.core.pre.graphics > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "examples/Buckling_Beer_Can/index",
        "href": "examples/Buckling_Beer_Can/index.html#beer-can-buckling",
        "title": "Beer can buckling",
        "section": "Beer can buckling",
        "text": "Note: due to https://github.com/ansys/pydyna/issues/583, this example is not available in\nthe documentation. But it can be found in the code at\nhttps://github.com/ansys/pydyna/tree/main/examples/Buckling_Beer_Can\nBeer can buckling"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#ansysdynacorelibkwd_line_formatter",
        "title": "ansys.dyna.core.lib.kwd_line_formatter",
        "section": "ansys.dyna.core.lib.kwd_line_formatter",
        "text": "ansys.dyna.core.lib.kwd_line_formatter"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#functions",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Functions",
        "section": "Functions",
        "text": "read_line(→ Tuple[str, bool])\nRead and return the line, and a flag on whether to stop reading.\nat_end_of_keyword(→ bool)\nReturn whether the buffer is at the end of the keyword\nbuffer_to_lines(→ List[str])\nRead from the buffer into a list of string.\nload_dataline(→ List)\nloads a keyword card line with fixed column offsets and width from string\nFunctions\nread_line\nat_end_of_keyword\nbuffer_to_lines\nload_dataline"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#module-contents",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Module Contents",
        "section": "Module Contents",
        "text": "Read and return the line, and a flag on whether to stop reading.\nReturn whether the buffer is at the end of the keyword\nRead from the buffer into a list of string.\nbuf: buffer to read from\nmax_num_lines: number of lines to read. -1 means no limit\nloads a keyword card line with fixed column offsets and width from string\nspec: list of tuples representing the (offset, width, type) of each field\ntype can be a Flag which represents the True and False value\nline_data: string with keyword data\nexample:\n>>> load_dataline([(0,10, int),(10,10, str)], ‘         1     hello’)\n(1, ‘hello’)\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#ansys.dyna.core.lib.kwd_line_formatter.read_line",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Module Contents > read_line",
        "section": "Module Contents > read_line",
        "text": "ansys.dyna.core.lib.kwd_line_formatter.read_line(buf: TextIO, skip_comment=True) -> Tuple[str, bool]\n\nRead and return the line, and a flag on whether to stop reading.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#ansys.dyna.core.lib.kwd_line_formatter.at_end_of_keyword",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Module Contents > at_end_of_keyword",
        "section": "Module Contents > at_end_of_keyword",
        "text": "ansys.dyna.core.lib.kwd_line_formatter.at_end_of_keyword(buf: TextIO) -> bool\n\nReturn whether the buffer is at the end of the keyword\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#ansys.dyna.core.lib.kwd_line_formatter.buffer_to_lines",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Module Contents > buffer_to_lines",
        "section": "Module Contents > buffer_to_lines",
        "text": "ansys.dyna.core.lib.kwd_line_formatter.buffer_to_lines(buf: TextIO, max_num_lines: int = -1) -> List[str]\n\nRead from the buffer into a list of string.\nbuf: buffer to read from\nmax_num_lines: number of lines to read. -1 means no limit\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index",
        "href": "autoapi/ansys/dyna/core/lib/kwd_line_formatter/index.html#ansys.dyna.core.lib.kwd_line_formatter.load_dataline",
        "title": "ansys.dyna.core.lib.kwd_line_formatter > Module Contents > load_dataline",
        "section": "Module Contents > load_dataline",
        "text": "ansys.dyna.core.lib.kwd_line_formatter.load_dataline(spec: List[tuple], line_data: str, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> List\n\nloads a keyword card line with fixed column offsets and width from string\nspec: list of tuples representing the (offset, width, type) of each field\n\ntype can be a Flag which represents the True and False value\n\nline_data: string with keyword data\nexample:\n>>> load_dataline([(0,10, int),(10,10, str)], ‘         1     hello’)\n(1, ‘hello’)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansysdynacoresolverdynasolver",
        "title": "ansys.dyna.core.solver.dynasolver",
        "section": "ansys.dyna.core.solver.dynasolver",
        "text": "Module for defining the PyDNYA solver service.\nansys.dyna.core.solver.dynasolver\nsolver"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#exceptions",
        "title": "ansys.dyna.core.solver.dynasolver > Exceptions",
        "section": "Exceptions",
        "text": "RunningError\nDocumentation missing.\nNotFound\nDocumentation missing.\nUnexpectedResponse\nDocumentation missing.\nExceptions\nRunningError\nNotFound\nUnexpectedResponse"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#classes",
        "title": "ansys.dyna.core.solver.dynasolver > Classes",
        "section": "Classes",
        "text": "DynaSolver\nProvides the gRPC client-side of Ansys LS-DYNA.\nClasses\nDynaSolver"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#module-contents",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents",
        "section": "Module Contents",
        "text": "Bases: Exception\nDocumentation missing.\nBases: Exception\nDocumentation missing.\nBases: Exception\nDocumentation missing.\nProvides the gRPC client-side of Ansys LS-DYNA.\nHost name or IP address to connect to.\nPort the gRPC server is to listen on.\nCheck if the server is launched locally.\nTrue when successful, False when failed.\nGet size information about one or more files in the LS-DYNA\nworking directory.\nIf given, only files whose names contain subname as a substring are\nreturned. This check is case insensitive.\nGet size information about a node in the model’s working directory.\nUser ID of a node in the model.\nPause LS-DYNA execution.\nExecution stops until told to resume or quit.  Most switch”\ncommands result in one cycle being executed so that the switch can\nbe handled, and then LS-DYNA pauses again.\nProvide an alias for the download method for backward compatibility.\nDownload a file from the gRPC server.\nName of the file to download. The file is downloaded to the current\nworking directory of the calling process. The file name should not\nbegin with a leading /. The file is interpreted relative to the\nLS-DYNA working directory.\nNumber of bytes received.\nProvide an alias for the ``upload` method for backward compatibility.\nUpload a file to the LS-DYNA working directory.\nName of the local file to upload. The contents of this file are copied\ninto the LS-DYNA working directory in a file of the same name, but\nwith any path components removed.\nNumber of bytes sent.\nTerminate the gRPC server program. This does not terminate LS-DYNA.\nIf the server is running inside a container, it ignore this\ncommand and continues running.\nResume execution.\nCycle to pause execution on. The default is None.\nSsimulation time to pause execution at. The default is None.\nBegin execution with the given string as the command-line arguments.\nCommand line to pass to LS-DYNA.\nSet a load curve to a constant value.\nUser ID of the load curve to set.\nValue to set the load curve to.\nStart LS-DYNA.\nThe program starts and awaits further input. To begin a\nsimulation, the run command must used to send the command line\narguments.\nAfter starting but before running, a resume command can be sent to\nset a pause time or cycle.\nNumber of cores (MPI ranks) to run.\nBegin execution with the given string as the command-line arguments.\nCommand line to pass to LS-DYNA.\nSend a “sense switch” to LS-DYNA.\nSense switch string.\nMonitor the stdout or stderr of the running job.\nWhich stream to monitor. The default is 1, in which case\nstdout is used. Otherwise, stderr is used.\nHow to handle the file data. The default is 2. Options are:\n0: The file contents are printed to stdout, and this\nmethod does not return until LS-DYNA terminates.\n1: A Queue instance is returned. The queue holds raw blocks\nof text as returned by the server.\n2: A Queue instance is returned.The queue holds individual\nlines of text.\nSize to use for the Queue instance if the how parameter is set to\na value greater than 0.\nGet the current cycle count and simulation time.\nSend one request to LS-DYNA using the command-line interface.\nCommand to send.\nThere is no data returned. Data that is returned from the underlying\nmethod call is just printed to the screen. This method is used to\nsupport the sample interactive client.py program.\nDescription\nExample\n“list” then optional file name\nlist d3plot\n“list” then optional file name\nlist d3plot\n“node” user node number\nnode 43444\n“pause” (no arguments)\npause\n“download” then file name\ndownload glstat\n“upload” then file name\nupload input.k\n“quit” (no arguments)\nquit\n“resume” optional cycle and/or time\nresume 5000 0.25\n“run” then the command line\nrun i=input.k jobid=xx\n“setlc” user load curve number and value\nsetlc 1075 0.245\n“start” number of processors\nstart 5\n“switch” then switch text\nswitch sw2\n“tail” then 1 for stdout, 2 for stderr\ntail 1\n“time” (no arguments)\ntime.\nRead command lines from a file and execute them.\nEach line is read from the file and echoed to the screen. You\nmust hit the enter key to trigger execution of the command.\nFile to read commands from.\nModule Contents\nException\nException\nException\npython:str\npython:str\nAn\ninstance\nof\nthe\nclient\nwhich\ncan\nbe\nused\nto\ncommunicate\nwith\nthe\ngRPC\nserver\nrunning\nat\nthe\ngiven\nhost\nname\nand\nThe\nclient\ncan\nthen\ninteract\nwith\nvia\nTrue\nFalse\npython:str\ndefault\npython:None\nArray\nof\nfilename\nsize\nin\nbytes\ninteger\nA\npair\nof\nare\nreturned\ngiving\nthe\n(x, y, z)\ncoordinates\nand\nvelocities\nof\nthe\nIf\nthe\nnode\nnumber\ngiven\ndoes\nnot\nexist\nin\nthe\nmodel\nthen\n(None, None)\nis\nswitch\ndownload\npython:str\n/\npython:int\npython:str\npython:int\ninteger\noptional\nNone\npython:float\noptional\nNone\npython:str\npython:int\npython:float\nrun\nresume\npython:int\npython:str\npython:str\nIf\nthe\nswitch\nsent\nis\nsw2.\na\npython:str\nis\nreturned\nwith\nthe\nusual\nstatus\nupdate\ninformation\nthat\na\nswitch\nan\nempty\npython:str\nis\npython:int\noptional\n1\npython:int\noptional\n2\nQueue\nQueue\npython:int\noptional\nQueue\nhow\n0\nIf\nthe\nvalue\nfor\nthe\nhow\nparameter\nis\ngreater\nthan\na\nQueue instance\nis\nWhen\na\ncall\nto\nthe\nq.get()\nmethod\nreturns\nNone\nall\ndata\nhas\nbeen\nA\ncycle_count\nsimulation_time\npython:str\npython:None\nclient.py\npython:str"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.RunningError",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > RunningError",
        "section": "Module Contents > RunningError",
        "text": "exception ansys.dyna.core.solver.dynasolver.RunningError\n\nBases: Exception\n\nDocumentation missing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.NotFound",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > NotFound",
        "section": "Module Contents > NotFound",
        "text": "exception ansys.dyna.core.solver.dynasolver.NotFound\n\nBases: Exception\n\nDocumentation missing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.UnexpectedResponse",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > UnexpectedResponse",
        "section": "Module Contents > UnexpectedResponse",
        "text": "exception ansys.dyna.core.solver.dynasolver.UnexpectedResponse\n\nBases: Exception\n\nDocumentation missing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > DynaSolver",
        "section": "Module Contents > DynaSolver",
        "text": "class ansys.dyna.core.solver.dynasolver.DynaSolver(hostname='localhost', port='5000', channel=None, server_path='')\n\nProvides the gRPC client-side of Ansys LS-DYNA.\n\nParameters\n\nhostname\n\npython:str\n\nHost name or IP address to connect to.\n\nport\n\npython:str\n\nPort the gRPC server is to listen on.\n\nReturns\n\nAn instance of the client, which can be used to communicate\n\n\n\nwith the gRPC server running at the given host name and port.\n\n\n\nThe client can then interact with LS-DYNA via gRPC.\n\n\n\n!! processed by numpydoc !!\n\n\n\nhostname = 'localhost'\n\n\n\n\n\nport = '5000'\n\n\n\n\n\npim_client = None\n\n\n\n\n\nremote_instance = None\n\n\n\n\n\nworking_dir = None\n\n\n\n\n\nstub\n\n\n\n\n\nlogger\n\n\n\n\n\nstatic get_appdata_path()\n\n\n\n\n\nstatic downloadfile(url: str, fname: str)\n\n\n\n\n\nstatic grpc_local_server_on() -> bool\n\nCheck if the server is launched locally.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nlist_files(subname=None)\n\nGet size information about one or more files in the LS-DYNA\nworking directory.\n\nParameters\n\nsubname\n\npython:str, default\n\npython:None\n\nIf given, only files whose names contain subname as a substring are\nreturned. This check is case insensitive.\n\nReturns\n\nArray of (filename, size in bytes) pairs.\n\n\n\n!! processed by numpydoc !!\n\n\n\nnode(n)\n\nGet size information about a node in the model’s working directory.\n\nParameters\n\nn\n\ninteger\n\nUser ID of a node in the model.\n\nReturns\n\nA pair of 3-tuples are returned, giving the (x, y, z) coordinates and\n\n\n\nvelocities of the node. If the node number given does not exist\n\n\n\nin the model, then (None, None) is returned.\n\n\n\n!! processed by numpydoc !!\n\n\n\npause()\n\nPause LS-DYNA execution.\n\nExecution stops until told to resume or quit.  Most switch”\ncommands result in one cycle being executed so that the switch can\nbe handled, and then LS-DYNA pauses again.\n\n!! processed by numpydoc !!\n\n\n\npull(fname)\n\nProvide an alias for the download method for backward compatibility.\n\n!! processed by numpydoc !!\n\n\n\ndownload(fname)\n\nDownload a file from the gRPC server.\n\nParameters\n\nfname\n\npython:str\n\nName of the file to download. The file is downloaded to the current\nworking directory of the calling process. The file name should not\nbegin with a leading /. The file is interpreted relative to the\nLS-DYNA working directory.\n\nReturns\n\npython:int\n\nNumber of bytes received.\n\n!! processed by numpydoc !!\n\n\n\npush(fname, workdir)\n\nProvide an alias for the ``upload` method for backward compatibility.\n\n!! processed by numpydoc !!\n\n\n\nupload(fname)\n\nUpload a file to the LS-DYNA working directory.\n\nParameters\n\nfname\n\npython:str\n\nName of the local file to upload. The contents of this file are copied\ninto the LS-DYNA working directory in a file of the same name, but\nwith any path components removed.\n\nReturns\n\npython:int\n\nNumber of bytes sent.\n\n!! processed by numpydoc !!\n\n\n\nquit()\n\nTerminate the gRPC server program. This does not terminate LS-DYNA.\n\nIf the server is running inside a container, it ignore this\ncommand and continues running.\n\n!! processed by numpydoc !!\n\n\n\nresume(cycle=None, time=None)\n\nResume execution.\n\nParameters\n\ncycle\n\ninteger, optional\n\nCycle to pause execution on. The default is None.\n\ntime\n\npython:float, optional\n\nSsimulation time to pause execution at. The default is None.\n\nThis command can be given whether LS-DYNA is paused or running.\n\n\n\nLS-DYNA runs until the given cycle number or simulation time. If\n\n\n\nboth are given, it stops based on whichever occurs first. If\n\n\n\nneither are given, it runs until termination or until paused.\n\n\n\n!! processed by numpydoc !!\n\n\n\nrun(args)\n\nBegin execution with the given string as the command-line arguments.\n\nParameters\n\nargs\n\npython:str\n\nCommand line to pass to LS-DYNA.\n\n!! processed by numpydoc !!\n\n\n\nsetlc(lc, value)\n\nSet a load curve to a constant value.\n\nParameters\n\nlc\n\npython:int\n\nUser ID of the load curve to set.\n\nvalue\n\npython:float\n\nValue to set the load curve to.\n\n!! processed by numpydoc !!\n\n\n\nstart(nproc)\n\nStart LS-DYNA.\n\nThe program starts and awaits further input. To begin a\nsimulation, the run command must used to send the command line\narguments.\n\nAfter starting but before running, a resume command can be sent to\nset a pause time or cycle.\n\nParameters\n\nnproc\n\npython:int\n\nNumber of cores (MPI ranks) to run.\n\n!! processed by numpydoc !!\n\n\n\nstart_locally(preset='MPP', input='', nproc=1, memory=20)\n\nBegin execution with the given string as the command-line arguments.\n\nParameters\n\nargs\n\npython:str\n\nCommand line to pass to LS-DYNA.\n\n!! processed by numpydoc !!\n\n\n\nswitch(args)\n\nSend a “sense switch” to LS-DYNA.\n\nParameters\n\nargs\n\npython:str\n\nSense switch string.\n\nReturns\n\nIf the switch sent is sw2., a python:str is returned with the\n\n\n\nusual status update information that a switch generates. Otherwise,\n\n\n\nan empty python:str is returned.\n\n\n\n!! processed by numpydoc !!\n\n\n\ntail(which=1, how=2, queuesize=0)\n\nMonitor the stdout or stderr of the running job.\n\nParameters\n\nwhich\n\npython:int, optional\n\nWhich stream to monitor. The default is 1, in which case\nstdout is used. Otherwise, stderr is used.\n\nhow\n\npython:int, optional\n\nHow to handle the file data. The default is 2. Options are:\n\n0: The file contents are printed to stdout, and this\nmethod does not return until LS-DYNA terminates.\n\n1: A Queue instance is returned. The queue holds raw blocks\nof text as returned by the server.\n\n2: A Queue instance is returned.The queue holds individual\nlines of text.\n\nqueuesize\n\npython:int, optional\n\nSize to use for the Queue instance if the how parameter is set to\na value greater than 0.\n\nReturns\n\nIf the value for the how parameter is greater than 0, a Queue instance\n\n\n\nis returned. When a call to the q.get() method returns None, all data\n\n\n\nhas been returned.\n\n\n\n!! processed by numpydoc !!\n\n\n\ntime()\n\nGet the current cycle count and simulation time.\n\nReturns\n\nA (cycle_count, simulation_time) pair.\n\n\n\n!! processed by numpydoc !!\n\n\n\nsend(cmdin)\n\nSend one request to LS-DYNA using the command-line interface.\n\nParameters\n\ncmdin\n\npython:str\n\nCommand to send.\n\nReturns\n\npython:None\n\nThere is no data returned. Data that is returned from the underlying\nmethod call is just printed to the screen. This method is used to\nsupport the sample interactive client.py program.\n\n\n\n\n\nDescription\n\nExample\n\n“list” then optional file name\n\nlist d3plot\n\n“list” then optional file name\n\nlist d3plot\n\n“node” user node number\n\nnode 43444\n\n“pause” (no arguments)\n\npause\n\n“download” then file name\n\ndownload glstat\n\n“upload” then file name\n\nupload input.k\n\n“quit” (no arguments)\n\nquit\n\n“resume” optional cycle and/or time\n\nresume 5000 0.25\n\n“run” then the command line\n\nrun i=input.k jobid=xx\n\n“setlc” user load curve number and value\n\nsetlc 1075 0.245\n\n“start” number of processors\n\nstart 5\n\n“switch” then switch text\n\nswitch sw2\n\n“tail” then 1 for stdout, 2 for stderr\n\ntail 1\n\n“time” (no arguments)\n\ntime.\n\n!! processed by numpydoc !!\n\n\n\nrunfile(fname)\n\nRead command lines from a file and execute them.\n\nEach line is read from the file and echoed to the screen. You\nmust hit the enter key to trigger execution of the command.\n\nParameters\n\nfname\n\npython:str\n\nFile to read commands from.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.hostname",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > hostname",
        "section": "Module Contents > hostname",
        "text": "hostname = 'localhost'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.port",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > port",
        "section": "Module Contents > port",
        "text": "port = '5000'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.pim_client",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > pim_client",
        "section": "Module Contents > pim_client",
        "text": "pim_client = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.remote_instance",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > remote_instance",
        "section": "Module Contents > remote_instance",
        "text": "remote_instance = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.working_dir",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > working_dir",
        "section": "Module Contents > working_dir",
        "text": "working_dir = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.stub",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.logger",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > logger",
        "section": "Module Contents > logger",
        "text": "logger\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.get_appdata_path",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > get_appdata_path",
        "section": "Module Contents > get_appdata_path",
        "text": "static get_appdata_path()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.downloadfile",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > downloadfile",
        "section": "Module Contents > downloadfile",
        "text": "static downloadfile(url: str, fname: str)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.grpc_local_server_on",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > grpc_local_server_on",
        "section": "Module Contents > grpc_local_server_on",
        "text": "static grpc_local_server_on() -> bool\n\nCheck if the server is launched locally.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.list_files",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > list_files",
        "section": "Module Contents > list_files",
        "text": "list_files(subname=None)\n\nGet size information about one or more files in the LS-DYNA\nworking directory.\n\nParameters\n\nsubname\n\npython:str, default\n\npython:None\n\nIf given, only files whose names contain subname as a substring are\nreturned. This check is case insensitive.\n\nReturns\n\nArray of (filename, size in bytes) pairs.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.node",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > node",
        "section": "Module Contents > node",
        "text": "node(n)\n\nGet size information about a node in the model’s working directory.\n\nParameters\n\nn\n\ninteger\n\nUser ID of a node in the model.\n\nReturns\n\nA pair of 3-tuples are returned, giving the (x, y, z) coordinates and\n\n\n\nvelocities of the node. If the node number given does not exist\n\n\n\nin the model, then (None, None) is returned.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.pause",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > pause",
        "section": "Module Contents > pause",
        "text": "pause()\n\nPause LS-DYNA execution.\n\nExecution stops until told to resume or quit.  Most switch”\ncommands result in one cycle being executed so that the switch can\nbe handled, and then LS-DYNA pauses again.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.pull",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > pull",
        "section": "Module Contents > pull",
        "text": "pull(fname)\n\nProvide an alias for the download method for backward compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.download",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > download",
        "section": "Module Contents > download",
        "text": "download(fname)\n\nDownload a file from the gRPC server.\n\nParameters\n\nfname\n\npython:str\n\nName of the file to download. The file is downloaded to the current\nworking directory of the calling process. The file name should not\nbegin with a leading /. The file is interpreted relative to the\nLS-DYNA working directory.\n\nReturns\n\npython:int\n\nNumber of bytes received.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.push",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > push",
        "section": "Module Contents > push",
        "text": "push(fname, workdir)\n\nProvide an alias for the ``upload` method for backward compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.upload",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > upload",
        "section": "Module Contents > upload",
        "text": "upload(fname)\n\nUpload a file to the LS-DYNA working directory.\n\nParameters\n\nfname\n\npython:str\n\nName of the local file to upload. The contents of this file are copied\ninto the LS-DYNA working directory in a file of the same name, but\nwith any path components removed.\n\nReturns\n\npython:int\n\nNumber of bytes sent.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.quit",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > quit",
        "section": "Module Contents > quit",
        "text": "quit()\n\nTerminate the gRPC server program. This does not terminate LS-DYNA.\n\nIf the server is running inside a container, it ignore this\ncommand and continues running.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.resume",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > resume",
        "section": "Module Contents > resume",
        "text": "resume(cycle=None, time=None)\n\nResume execution.\n\nParameters\n\ncycle\n\ninteger, optional\n\nCycle to pause execution on. The default is None.\n\ntime\n\npython:float, optional\n\nSsimulation time to pause execution at. The default is None.\n\nThis command can be given whether LS-DYNA is paused or running.\n\n\n\nLS-DYNA runs until the given cycle number or simulation time. If\n\n\n\nboth are given, it stops based on whichever occurs first. If\n\n\n\nneither are given, it runs until termination or until paused.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.run",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > run",
        "section": "Module Contents > run",
        "text": "run(args)\n\nBegin execution with the given string as the command-line arguments.\n\nParameters\n\nargs\n\npython:str\n\nCommand line to pass to LS-DYNA.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.setlc",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > setlc",
        "section": "Module Contents > setlc",
        "text": "setlc(lc, value)\n\nSet a load curve to a constant value.\n\nParameters\n\nlc\n\npython:int\n\nUser ID of the load curve to set.\n\nvalue\n\npython:float\n\nValue to set the load curve to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.start",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > start",
        "section": "Module Contents > start",
        "text": "start(nproc)\n\nStart LS-DYNA.\n\nThe program starts and awaits further input. To begin a\nsimulation, the run command must used to send the command line\narguments.\n\nAfter starting but before running, a resume command can be sent to\nset a pause time or cycle.\n\nParameters\n\nnproc\n\npython:int\n\nNumber of cores (MPI ranks) to run.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.start_locally",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > start_locally",
        "section": "Module Contents > start_locally",
        "text": "start_locally(preset='MPP', input='', nproc=1, memory=20)\n\nBegin execution with the given string as the command-line arguments.\n\nParameters\n\nargs\n\npython:str\n\nCommand line to pass to LS-DYNA.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.switch",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > switch",
        "section": "Module Contents > switch",
        "text": "switch(args)\n\nSend a “sense switch” to LS-DYNA.\n\nParameters\n\nargs\n\npython:str\n\nSense switch string.\n\nReturns\n\nIf the switch sent is sw2., a python:str is returned with the\n\n\n\nusual status update information that a switch generates. Otherwise,\n\n\n\nan empty python:str is returned.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.tail",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > tail",
        "section": "Module Contents > tail",
        "text": "tail(which=1, how=2, queuesize=0)\n\nMonitor the stdout or stderr of the running job.\n\nParameters\n\nwhich\n\npython:int, optional\n\nWhich stream to monitor. The default is 1, in which case\nstdout is used. Otherwise, stderr is used.\n\nhow\n\npython:int, optional\n\nHow to handle the file data. The default is 2. Options are:\n\n0: The file contents are printed to stdout, and this\nmethod does not return until LS-DYNA terminates.\n\n1: A Queue instance is returned. The queue holds raw blocks\nof text as returned by the server.\n\n2: A Queue instance is returned.The queue holds individual\nlines of text.\n\nqueuesize\n\npython:int, optional\n\nSize to use for the Queue instance if the how parameter is set to\na value greater than 0.\n\nReturns\n\nIf the value for the how parameter is greater than 0, a Queue instance\n\n\n\nis returned. When a call to the q.get() method returns None, all data\n\n\n\nhas been returned.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.time",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > time",
        "section": "Module Contents > time",
        "text": "time()\n\nGet the current cycle count and simulation time.\n\nReturns\n\nA (cycle_count, simulation_time) pair.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.send",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > send",
        "section": "Module Contents > send",
        "text": "send(cmdin)\n\nSend one request to LS-DYNA using the command-line interface.\n\nParameters\n\ncmdin\n\npython:str\n\nCommand to send.\n\nReturns\n\npython:None\n\nThere is no data returned. Data that is returned from the underlying\nmethod call is just printed to the screen. This method is used to\nsupport the sample interactive client.py program.\n\n\n\n\n\nDescription\n\nExample\n\n“list” then optional file name\n\nlist d3plot\n\n“list” then optional file name\n\nlist d3plot\n\n“node” user node number\n\nnode 43444\n\n“pause” (no arguments)\n\npause\n\n“download” then file name\n\ndownload glstat\n\n“upload” then file name\n\nupload input.k\n\n“quit” (no arguments)\n\nquit\n\n“resume” optional cycle and/or time\n\nresume 5000 0.25\n\n“run” then the command line\n\nrun i=input.k jobid=xx\n\n“setlc” user load curve number and value\n\nsetlc 1075 0.245\n\n“start” number of processors\n\nstart 5\n\n“switch” then switch text\n\nswitch sw2\n\n“tail” then 1 for stdout, 2 for stderr\n\ntail 1\n\n“time” (no arguments)\n\ntime.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/solver/dynasolver/index",
        "href": "autoapi/ansys/dyna/core/solver/dynasolver/index.html#ansys.dyna.core.solver.dynasolver.DynaSolver.runfile",
        "title": "ansys.dyna.core.solver.dynasolver > Module Contents > runfile",
        "section": "Module Contents > runfile",
        "text": "runfile(fname)\n\nRead command lines from a file and execute them.\n\nEach line is read from the file and echoed to the screen. You\nmust hit the enter key to trigger execution of the command.\n\nParameters\n\nfname\n\npython:str\n\nFile to read commands from.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/index.html#ansysdynacorekeywordskeyword_classes",
        "title": "ansys.dyna.core.keywords.keyword_classes",
        "section": "ansys.dyna.core.keywords.keyword_classes",
        "text": "ansys.dyna.core.keywords.keyword_classes"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/index.html#submodules",
        "title": "ansys.dyna.core.keywords.keyword_classes > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "examples/John_Reid_Pipe/index",
        "href": "examples/John_Reid_Pipe/index.html#pipe",
        "title": "Pipe",
        "section": "Pipe",
        "text": "This example is adapted from https://lsdyna.ansys.com/pipe-d51/ to run from Python.\nsphx_glr_examples_John_Reid_Pipe_plot_john_pipe.py\nPipe"
    },
    {
        "objectID": "examples/ICFD/icfd_cylinderflow",
        "href": "examples/ICFD/icfd_cylinderflow.html#cylinder-flow",
        "title": "Cylinder flow",
        "section": "Cylinder flow",
        "text": "This example shows how to create a simple ICFD cylinder flow input deck.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.031 seconds)\nDownload Jupyter notebook: icfd_cylinderflow.ipynb\nDownload Python source code: icfd_cylinderflow.py\nDownload zipped: icfd_cylinderflow.zip\nGallery generated by Sphinx-Gallery\nCylinder flow\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_cylinderflow.ipynb\nDownload Python source code: icfd_cylinderflow.py\nDownload zipped: icfd_cylinderflow.zip"
    },
    {
        "objectID": "user-guide/index",
        "href": "user-guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "In the PyDYNA installation, the docker directory has two child\ndirectories:\nIn the PyDYNA installation, the docker directory has two child\ndirectories:\npre: Contains the package with the pre Docker image for the\npre service. This service provides highly abstracted APIs for creating and\nsetting up DYNA input decks for DynaMech, DynaIGA, DynaICFD, DynaSALE, DynaEM,\nand DynaAirbag.\nsolver: Contains the package with the dynasolver Docker image\nfor the solver service. This service provides highly abstracted\nAPIs for interacting directly with the Ansys LS-DYNA solver. Because LS-DYNA\nis primarily a batch solver with very limited interactive capabilities, the\nsolver service is similarly limited. The target use case is that LS-DYNA is\nrunning in a container environment such as Docker or Kubernetes. Using this\nservice, you can push input files to the container, start LS-DYNA\nand monitor its progress, and then retrieve Ansys solver results (RST)\nfiles.\nOnce you have results, you can use the Ansys Data Processing Framework (DPF),\nwhich is designed to provide numerical simulation users and engineers\nwith a toolbox for accessing and transforming simulation data. DPF\ncan access data from Ansys solver RST files and from several\nfiles with neutral formats, including CSV, HDF5, and VTK. Using DPF’s\nvarious operators, you can manipulate and transform this data.\nThe ansys-dpf-post package provides\na simplified Python interface to DPF, thus enabling rapid postprocessing\nwithout ever leaving a Python environment. For more information on DPF-Post,\nsee the DPF-Post documentation.\nUser guide\ndocker\ndocker\npre\npre\npre\nsolver\ndynasolver\nsolver\nsolver"
    },
    {
        "objectID": "examples/Thermal/sg_execution_times",
        "href": "examples/Thermal/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.039 total execution time for 1 file from examples/Thermal:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Thermal_thermal_stress.py (thermal_stress.py)\n00:00.039\n0.0\nComputation times\nthermal_stress.py"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansysdynacorelibcards_specialinclude_card",
        "title": "ansys.dyna.core.lib.cards_.special.include_card",
        "section": "ansys.dyna.core.lib.cards_.special.include_card",
        "text": "ansys.dyna.core.lib.cards_.special.include_card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#classes",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Classes",
        "section": "Classes",
        "text": "IncludeCard\nAbstract base class for all the implementations of keyword cards.\nIncludeCardMixin\n\nClasses\nIncludeCard\nIncludeCardMixin"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card.Card\nAbstract base class for all the implementations of keyword cards.\nReads the card data from an input text buffer.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nGet or set the File name of file to be included in this keyword file.\nMaximum 80 characters. If the STAMPED_PART option is active, this is the\nDYNAIN file containing the results from metal stamping.\nModule Contents\nansys.dyna.core.lib.card.Card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansys.dyna.core.lib.cards_.special.include_card.IncludeCard",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents > IncludeCard",
        "section": "Module Contents > IncludeCard",
        "text": "class ansys.dyna.core.lib.cards_.special.include_card.IncludeCard(**kwargs)\n\nBases: ansys.dyna.core.lib.card.Card\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nread(buf: TextIO, parameter_set) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansys.dyna.core.lib.cards_.special.include_card.IncludeCard.read",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set) -> None\n\nReads the card data from an input text buffer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansys.dyna.core.lib.cards_.special.include_card.IncludeCard.write",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansys.dyna.core.lib.cards_.special.include_card.IncludeCardMixin",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents > IncludeCardMixin",
        "section": "Module Contents > IncludeCardMixin",
        "text": "class ansys.dyna.core.lib.cards_.special.include_card.IncludeCardMixin\n\n\n\nproperty filename: str | None\n\nGet or set the File name of file to be included in this keyword file.\nMaximum 80 characters. If the STAMPED_PART option is active, this is the\nDYNAIN file containing the results from metal stamping.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index",
        "href": "autoapi/ansys/dyna/core/lib/cards_/special/include_card/index.html#ansys.dyna.core.lib.cards_.special.include_card.IncludeCardMixin.filename",
        "title": "ansys.dyna.core.lib.cards_.special.include_card > Module Contents > filename",
        "section": "Module Contents > filename",
        "text": "property filename: str | None\n\nGet or set the File name of file to be included in this keyword file.\nMaximum 80 characters. If the STAMPED_PART option is active, this is the\nDYNAIN file containing the results from metal stamping.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansysdynacorepreinternalsdefaults",
        "title": "ansys.dyna.core.pre.internals.defaults",
        "section": "ansys.dyna.core.pre.internals.defaults",
        "text": "Default configuration for PyDYNA pre.\nansys.dyna.core.pre.internals.defaults"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#functions",
        "title": "ansys.dyna.core.pre.internals.defaults > Functions",
        "section": "Functions",
        "text": "ip()\nGet the default IP address used throughout the library.\nport()\nGet the default port used throughout the library.\nconnection_timeout()\nGet the default connection timeout used throughout the library.\nprint_communicator_stats()\nGet the flag to decide whether to print communicator stats(INTERNAL ONLY).\nmax_message_length()\nGet the maximum message length for a grpc channel.\nget_examples_path()\nGet the client-side default container path.\nget_examples_path_for_containers()\nGet the server-side default container path in case of containers.\nget_output_path()\nGet the client-side output directory used by containers.\nget_output_path_for_containers()\nGet the server-side output directory used by containers.\nFunctions\nip\nport\nconnection_timeout\nprint_communicator_stats\nmax_message_length\nget_examples_path\nget_examples_path_for_containers\nget_output_path\nget_output_path_for_containers"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#module-contents",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents",
        "section": "Module Contents",
        "text": "Get the default IP address used throughout the library.\nGet the default port used throughout the library.\nGet the default connection timeout used throughout the library.\nGet the flag to decide whether to print communicator stats(INTERNAL ONLY).\nGet the maximum message length for a grpc channel.\nGet the client-side default container path.\nGet the server-side default container path in case of containers.\nIn case of a container, the user data directory is mounted within the container image.\nGet the client-side output directory used by containers.\nGet the server-side output directory used by containers.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.ip",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > ip",
        "section": "Module Contents > ip",
        "text": "ansys.dyna.core.pre.internals.defaults.ip()\n\nGet the default IP address used throughout the library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.port",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > port",
        "section": "Module Contents > port",
        "text": "ansys.dyna.core.pre.internals.defaults.port()\n\nGet the default port used throughout the library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.connection_timeout",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > connection_timeout",
        "section": "Module Contents > connection_timeout",
        "text": "ansys.dyna.core.pre.internals.defaults.connection_timeout()\n\nGet the default connection timeout used throughout the library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.print_communicator_stats",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > print_communicator_stats",
        "section": "Module Contents > print_communicator_stats",
        "text": "ansys.dyna.core.pre.internals.defaults.print_communicator_stats()\n\nGet the flag to decide whether to print communicator stats(INTERNAL ONLY).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.max_message_length",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > max_message_length",
        "section": "Module Contents > max_message_length",
        "text": "ansys.dyna.core.pre.internals.defaults.max_message_length()\n\nGet the maximum message length for a grpc channel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.get_examples_path",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > get_examples_path",
        "section": "Module Contents > get_examples_path",
        "text": "ansys.dyna.core.pre.internals.defaults.get_examples_path()\n\nGet the client-side default container path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.get_examples_path_for_containers",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > get_examples_path_for_containers",
        "section": "Module Contents > get_examples_path_for_containers",
        "text": "ansys.dyna.core.pre.internals.defaults.get_examples_path_for_containers()\n\nGet the server-side default container path in case of containers.\n\nIn case of a container, the user data directory is mounted within the container image.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.get_output_path",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > get_output_path",
        "section": "Module Contents > get_output_path",
        "text": "ansys.dyna.core.pre.internals.defaults.get_output_path()\n\nGet the client-side output directory used by containers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/internals/defaults/index",
        "href": "autoapi/ansys/dyna/core/pre/internals/defaults/index.html#ansys.dyna.core.pre.internals.defaults.get_output_path_for_containers",
        "title": "ansys.dyna.core.pre.internals.defaults > Module Contents > get_output_path_for_containers",
        "section": "Module Contents > get_output_path_for_containers",
        "text": "ansys.dyna.core.pre.internals.defaults.get_output_path_for_containers()\n\nGet the server-side output directory used by containers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansysdynacorelibfield",
        "title": "ansys.dyna.core.lib.field",
        "section": "ansys.dyna.core.lib.field",
        "text": "ansys.dyna.core.lib.field"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#classes",
        "title": "ansys.dyna.core.lib.field > Classes",
        "section": "Classes",
        "text": "Flag\n\nField\n\nClasses\nFlag\nField"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#functions",
        "title": "ansys.dyna.core.lib.field > Functions",
        "section": "Functions",
        "text": "to_long(→ Field)\n\nFunctions\nto_long"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#module-contents",
        "title": "ansys.dyna.core.lib.field > Module Contents",
        "section": "Module Contents",
        "text": "Return the value and type used for io.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Flag",
        "title": "ansys.dyna.core.lib.field > Module Contents > Flag",
        "section": "Module Contents > Flag",
        "text": "class ansys.dyna.core.lib.field.Flag\n\n\n\nvalue: bool = None\n\n\n\n\n\ntrue_value: str = None\n\n\n\n\n\nfalse_value: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Flag.value",
        "title": "ansys.dyna.core.lib.field > Module Contents > value",
        "section": "Module Contents > value",
        "text": "value: bool = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Flag.true_value",
        "title": "ansys.dyna.core.lib.field > Module Contents > true_value",
        "section": "Module Contents > true_value",
        "text": "true_value: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Flag.false_value",
        "title": "ansys.dyna.core.lib.field > Module Contents > false_value",
        "section": "Module Contents > false_value",
        "text": "false_value: str = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field",
        "title": "ansys.dyna.core.lib.field > Module Contents > Field",
        "section": "Module Contents > Field",
        "text": "class ansys.dyna.core.lib.field.Field(name: str, type: Field.__init__.type, offset: int, width: int, /, value: Any = None, **kwargs)\n\n\n\nclass ReadOnlyValue\n\n\n\nvalue: Any = None\n\n\n\n\n\n__repr__() -> str\n\n\n\n\n\nproperty name: str\n\n\n\n\n\nproperty type: type\n\n\n\n\n\nproperty offset: int\n\n\n\n\n\nproperty width: int\n\n\n\n\n\nproperty value: Any\n\n\n\n\n\nio_info() -> Tuple[str, Type]\n\nReturn the value and type used for io.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.ReadOnlyValue",
        "title": "ansys.dyna.core.lib.field > Module Contents > ReadOnlyValue",
        "section": "Module Contents > ReadOnlyValue",
        "text": "class ReadOnlyValue\n\n\n\nvalue: Any = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.ReadOnlyValue.value",
        "title": "ansys.dyna.core.lib.field > Module Contents > value",
        "section": "Module Contents > value",
        "text": "value: Any = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.__repr__",
        "title": "ansys.dyna.core.lib.field > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.name",
        "title": "ansys.dyna.core.lib.field > Module Contents > name",
        "section": "Module Contents > name",
        "text": "property name: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.type",
        "title": "ansys.dyna.core.lib.field > Module Contents > type",
        "section": "Module Contents > type",
        "text": "property type: type\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.offset",
        "title": "ansys.dyna.core.lib.field > Module Contents > offset",
        "section": "Module Contents > offset",
        "text": "property offset: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.width",
        "title": "ansys.dyna.core.lib.field > Module Contents > width",
        "section": "Module Contents > width",
        "text": "property width: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.value",
        "title": "ansys.dyna.core.lib.field > Module Contents > value",
        "section": "Module Contents > value",
        "text": "property value: Any\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.Field.io_info",
        "title": "ansys.dyna.core.lib.field > Module Contents > io_info",
        "section": "Module Contents > io_info",
        "text": "io_info() -> Tuple[str, Type]\n\nReturn the value and type used for io.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/field/index",
        "href": "autoapi/ansys/dyna/core/lib/field/index.html#ansys.dyna.core.lib.field.to_long",
        "title": "ansys.dyna.core.lib.field > Module Contents > to_long",
        "section": "Module Contents > to_long",
        "text": "ansys.dyna.core.lib.field.to_long(field: Field, offset: int) -> Field\n\n"
    },
    {
        "objectID": "examples/Buckling_Beer_Can/sg_execution_times",
        "href": "examples/Buckling_Beer_Can/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples/Buckling_Beer_Can:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "examples/John_Reid_Pipe/plot_john_pipe",
        "href": "examples/John_Reid_Pipe/plot_john_pipe.html#john-reid-pipe-example",
        "title": "John Reid pipe example",
        "section": "John Reid pipe example",
        "text": "This example is inspired by John Reid’s “Pipe” example on the\nLS-DYNA Knowledge Base site. It shows how\nto use PyDyna to create a keyword file for LS-DYNA and solve it within\na Pythonic environment.\nJohn Reid pipe example"
    },
    {
        "objectID": "examples/John_Reid_Pipe/plot_john_pipe",
        "href": "examples/John_Reid_Pipe/plot_john_pipe.html#perform-required-imports",
        "title": "John Reid pipe example > Perform required imports",
        "section": "Perform required imports",
        "text": "Import required packages, including those for the keywords, deck, and solver.\nPerform required imports"
    },
    {
        "objectID": "examples/John_Reid_Pipe/plot_john_pipe",
        "href": "examples/John_Reid_Pipe/plot_john_pipe.html#create-a-deck-and-keywords",
        "title": "John Reid pipe example > Create a deck and keywords",
        "section": "Create a deck and keywords",
        "text": "Create a deck, which is the container for all the keywords.\nThen, create and append individual keywords to the deck.\nCreate a deck and keywords"
    },
    {
        "objectID": "examples/John_Reid_Pipe/plot_john_pipe",
        "href": "examples/John_Reid_Pipe/plot_john_pipe.html#run-the-dyna-solver",
        "title": "John Reid pipe example > Run the Dyna solver",
        "section": "Run the Dyna solver",
        "text": "Run the Dyna solver.\nTotal running time of the script: (0 minutes 8.158 seconds)\nDownload Jupyter notebook: plot_john_pipe.ipynb\nDownload Python source code: plot_john_pipe.py\nDownload zipped: plot_john_pipe.zip\nGallery generated by Sphinx-Gallery\nRun the Dyna solver\nDownload Jupyter notebook: plot_john_pipe.ipynb\nDownload Python source code: plot_john_pipe.py\nDownload zipped: plot_john_pipe.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansysdynacorelibparameters",
        "title": "ansys.dyna.core.lib.parameters",
        "section": "ansys.dyna.core.lib.parameters",
        "text": "Parameter classes.\nansys.dyna.core.lib.parameters"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#classes",
        "title": "ansys.dyna.core.lib.parameters > Classes",
        "section": "Classes",
        "text": "ParameterSet\nDeck parameters.\nParameterHandler\nBase class for import handlers.\nClasses\nParameterSet\nParameterHandler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#module-contents",
        "title": "ansys.dyna.core.lib.parameters > Module Contents",
        "section": "Module Contents",
        "text": "Deck parameters.\nGet a parameter by name.\nAdd a parameter.\nBases: ansys.dyna.core.lib.import_handler.ImportHandler\nBase class for import handlers.\nEvent called after a keyword is imported.\nkeyword is the imported keyword. It could be a string or a keyword object\nDepending on the context is a\nModule Contents\nansys.dyna.core.lib.import_handler.ImportHandler"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterSet",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > ParameterSet",
        "section": "Module Contents > ParameterSet",
        "text": "class ansys.dyna.core.lib.parameters.ParameterSet\n\nDeck parameters.\n\n!! processed by numpydoc !!\n\n\n\nget(param: str) -> Any\n\nGet a parameter by name.\n\n!! processed by numpydoc !!\n\n\n\nadd(param: str, value: Any) -> None\n\nAdd a parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterSet.get",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > get",
        "section": "Module Contents > get",
        "text": "get(param: str) -> Any\n\nGet a parameter by name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterSet.add",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > add",
        "section": "Module Contents > add",
        "text": "add(param: str, value: Any) -> None\n\nAdd a parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterHandler",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > ParameterHandler",
        "section": "Module Contents > ParameterHandler",
        "text": "class ansys.dyna.core.lib.parameters.ParameterHandler\n\nBases: ansys.dyna.core.lib.import_handler.ImportHandler\n\nBase class for import handlers.\n\n!! processed by numpydoc !!\n\n\n\nafter_import(context: ansys.dyna.core.lib.import_handler.ImportContext, keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str) -> None\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!\n\n\n\non_error(error)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterHandler.after_import",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > after_import",
        "section": "Module Contents > after_import",
        "text": "after_import(context: ansys.dyna.core.lib.import_handler.ImportContext, keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str) -> None\n\nEvent called after a keyword is imported.\n\nkeyword is the imported keyword. It could be a string or a keyword object\n\nDepending on the context is a\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/parameters/index",
        "href": "autoapi/ansys/dyna/core/lib/parameters/index.html#ansys.dyna.core.lib.parameters.ParameterHandler.on_error",
        "title": "ansys.dyna.core.lib.parameters > Module Contents > on_error",
        "section": "Module Contents > on_error",
        "text": "on_error(error)\n\n"
    },
    {
        "objectID": "examples/NVH/index",
        "href": "examples/NVH/index.html#nvh-examples",
        "title": "NVH examples",
        "section": "NVH examples",
        "text": "These examples show how to create and use NVH (noise, vibration, and harshness) models.\nsphx_glr_examples_NVH_frf_plate_damping.py\nsphx_glr_examples_NVH_nvh_frf_solid.py\nNVH examples"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansysdynacorelibdeck_loader",
        "title": "ansys.dyna.core.lib.deck_loader",
        "section": "ansys.dyna.core.lib.deck_loader",
        "text": "ansys.dyna.core.lib.deck_loader"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#classes",
        "title": "ansys.dyna.core.lib.deck_loader > Classes",
        "section": "Classes",
        "text": "IterState\n\nDeckLoaderResult\nA class containing the result of an attempted deck load.\nClasses\nIterState\nDeckLoaderResult"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#functions",
        "title": "ansys.dyna.core.lib.deck_loader > Functions",
        "section": "Functions",
        "text": "load_deck(→ DeckLoaderResult)\n\nload_deck_from_buffer(→ DeckLoaderResult)\n\nFunctions\nload_deck\nload_deck_from_buffer"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#module-contents",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents",
        "section": "Module Contents",
        "text": "A class containing the result of an attempted deck load.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > IterState",
        "section": "Module Contents > IterState",
        "text": "class ansys.dyna.core.lib.deck_loader.IterState\n\n\n\nUSERCOMMENT = 0\n\n\n\n\n\nKEYWORD_BLOCK = 1\n\n\n\n\n\nTITLE = 2\n\n\n\n\n\nKEYWORDS = 3\n\n\n\n\n\nEND = 4\n\n\n\n\n\nENCRYPTED = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.USERCOMMENT",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > USERCOMMENT",
        "section": "Module Contents > USERCOMMENT",
        "text": "USERCOMMENT = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.KEYWORD_BLOCK",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > KEYWORD_BLOCK",
        "section": "Module Contents > KEYWORD_BLOCK",
        "text": "KEYWORD_BLOCK = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.TITLE",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > TITLE",
        "section": "Module Contents > TITLE",
        "text": "TITLE = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.KEYWORDS",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > KEYWORDS",
        "section": "Module Contents > KEYWORDS",
        "text": "KEYWORDS = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.END",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > END",
        "section": "Module Contents > END",
        "text": "END = 4\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.IterState.ENCRYPTED",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > ENCRYPTED",
        "section": "Module Contents > ENCRYPTED",
        "text": "ENCRYPTED = 5\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.DeckLoaderResult",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > DeckLoaderResult",
        "section": "Module Contents > DeckLoaderResult",
        "text": "class ansys.dyna.core.lib.deck_loader.DeckLoaderResult\n\nA class containing the result of an attempted deck load.\n\n!! processed by numpydoc !!\n\n\n\nadd_unprocessed_keyword(name)\n\n\n\n\n\nget_summary() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.DeckLoaderResult.add_unprocessed_keyword",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > add_unprocessed_keyword",
        "section": "Module Contents > add_unprocessed_keyword",
        "text": "add_unprocessed_keyword(name)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.DeckLoaderResult.get_summary",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > get_summary",
        "section": "Module Contents > get_summary",
        "text": "get_summary() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.load_deck",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > load_deck",
        "section": "Module Contents > load_deck",
        "text": "ansys.dyna.core.lib.deck_loader.load_deck(deck: ansys.dyna.core.deck.Deck, text: str, context: ansys.dyna.core.lib.import_handler.ImportContext | None, import_handlers: List[ansys.dyna.core.lib.import_handler.ImportHandler]) -> DeckLoaderResult\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck_loader/index",
        "href": "autoapi/ansys/dyna/core/lib/deck_loader/index.html#ansys.dyna.core.lib.deck_loader.load_deck_from_buffer",
        "title": "ansys.dyna.core.lib.deck_loader > Module Contents > load_deck_from_buffer",
        "section": "Module Contents > load_deck_from_buffer",
        "text": "ansys.dyna.core.lib.deck_loader.load_deck_from_buffer(deck: ansys.dyna.core.deck.Deck, buffer: TextIO, context: ansys.dyna.core.lib.import_handler.ImportContext | None, import_handlers: List[ansys.dyna.core.lib.import_handler.ImportHandler]) -> DeckLoaderResult\n\n"
    },
    {
        "objectID": "getting-started/example",
        "href": "getting-started/example.html#preprocessing",
        "title": "Preprocessing",
        "section": "Preprocessing",
        "text": "The following code processes a ball plate example. In the repository, you can get the\ninput file from src/ansys/dyna/core/pre/examples/explicit/ball_plate/ball_plate.k and\nthe Python file from examples/Explicit/ball_plate.py.\nPreprocessing\nsrc/ansys/dyna/core/pre/examples/explicit/ball_plate/ball_plate.k\nexamples/Explicit/ball_plate.py"
    },
    {
        "objectID": "getting-started/example",
        "href": "getting-started/example.html#solve",
        "title": "Preprocessing > Solve",
        "section": "Solve",
        "text": "The following code solves this basic ball plate example. In the repository,\nyou can get the Python file from examples/solver/ball_plate_solver.py.\nSolve\nexamples/solver/ball_plate_solver.py"
    },
    {
        "objectID": "getting-started/example",
        "href": "getting-started/example.html#post-processing",
        "title": "Preprocessing > Post processing",
        "section": "Post processing",
        "text": "The following code processes results from the solve of this basic ball plate example:\nFor more examples, see Examples\nin the PyDYNA documentation.\nPost processing"
    },
    {
        "objectID": "examples/SALE/sale_efp",
        "href": "examples/SALE/sale_efp.html#efp-concrete-target",
        "title": "EFP concrete target",
        "section": "EFP concrete target",
        "text": "This example shows how to create a S-ALE input deck.\nThe executable file for LS-DYNA is ls-dyna_smp_s_R13.0_365-gf8a97bda2a_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.222 seconds)\nDownload Jupyter notebook: sale_efp.ipynb\nDownload Python source code: sale_efp.py\nDownload zipped: sale_efp.zip\nGallery generated by Sphinx-Gallery\nEFP concrete target\nls-dyna_smp_s_R13.0_365-gf8a97bda2a_winx64_ifort190.exe\nDownload Jupyter notebook: sale_efp.ipynb\nDownload Python source code: sale_efp.py\nDownload zipped: sale_efp.zip"
    },
    {
        "objectID": "examples/EM/em_resistive_heating",
        "href": "examples/EM/em_resistive_heating.html#resistive-heating",
        "title": "Resistive heating",
        "section": "Resistive heating",
        "text": "This example shows the minimum number of keywords required to turn on the\nEM resistive heating solver. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.121 seconds)\nDownload Jupyter notebook: em_resistive_heating.ipynb\nDownload Python source code: em_resistive_heating.py\nDownload zipped: em_resistive_heating.zip\nGallery generated by Sphinx-Gallery\nResistive heating\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_resistive_heating.ipynb\nDownload Python source code: em_resistive_heating.py\nDownload zipped: em_resistive_heating.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/card_writer/index.html#ansysdynacorelibcard_writer",
        "title": "ansys.dyna.core.lib.card_writer",
        "section": "ansys.dyna.core.lib.card_writer",
        "text": "Function to write cards.\nansys.dyna.core.lib.card_writer"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/card_writer/index.html#functions",
        "title": "ansys.dyna.core.lib.card_writer > Functions",
        "section": "Functions",
        "text": "write_cards(→ bool)\nWrite the cards. Return whether a superfluous trailing newline was added.\nFunctions\nwrite_cards"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/card_writer/index.html#module-contents",
        "title": "ansys.dyna.core.lib.card_writer > Module Contents",
        "section": "Module Contents",
        "text": "Write the cards. Return whether a superfluous trailing newline was added.\nModule Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/card_writer/index",
        "href": "autoapi/ansys/dyna/core/lib/card_writer/index.html#ansys.dyna.core.lib.card_writer.write_cards",
        "title": "ansys.dyna.core.lib.card_writer > Module Contents > write_cards",
        "section": "Module Contents > write_cards",
        "text": "ansys.dyna.core.lib.card_writer.write_cards(cards: List[ansys.dyna.core.lib.card_interface.CardInterface], buf: TextIO, write_format: ansys.dyna.core.lib.format_type.format_type, comment: bool | None = True) -> bool\n\nWrite the cards. Return whether a superfluous trailing newline was added.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#implicit-model",
        "title": "Implicit model",
        "section": "Implicit model",
        "text": "This example shows how to create and use an implicit dynamic roof crush model.\nImplicit model"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#perform-required-imports",
        "title": "Implicit model > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#start-the-pre-service",
        "title": "Implicit model > Start the pre service",
        "section": "Start the pre service",
        "text": "Before starting the pre service, you must ensure that the Docker container\nfor this service has been started. For more information, see “Start the Docker\ncontainer for the pre service” in https://dyna.docs.pyansys.com/version/stable/index.html.\nThe pre service can also be started locally, please download the latest version of\nansys-pydyna-pre-server.zip package from https://github.com/ansys/pydyna/releases and start it\nreferring to the README.rst file in this server package.\nOnce the pre service is running, you can connect a client to it using\nthe hostname and port. This example uses the default localhost and port\n(\"localhost\" and \"50051\" respectively).\nStart the pre service\npre\npre\npre\npre\npre\n\"localhost\"\n\"50051\""
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#import-initial-mesh-data",
        "title": "Implicit model > Import initial mesh data",
        "section": "Import initial mesh data",
        "text": "Import the initial mesh data (nodes and elements), which includes the\nvehicle data, weld data, and platen data.\nImport initial mesh data"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#define-global-control-cards",
        "title": "Implicit model > Define global control cards",
        "section": "Define global control cards",
        "text": "Because roof crush is a quasi-static loading case, you must run this model\nas an implicit dynamic solution. Define the global control cards. From\nthe dynasolution class, set the termination time and the frequency for\nthe database ASCII options.\nUse the implicit analysis methods in the dynamech class to define\nthe IMPLICIT control cards.\nSet the automatic timestep control flag\nand the optimal equilibrium iteration count per timestep.\nUse the set_dynamic() method to set the IMASS value to 1 and assign the\ngamma and beta values.\nIf normal modes must be extracted, use the set_eigenvalue() method.\nThe set_solution() method defines NSOLVR as 12 (Nolinear with BFGS update).\nDefine global control cards\ndynasolution\ndynamech\nset_dynamic()\nset_eigenvalue()\nset_solution()"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#define-materials",
        "title": "Implicit model > Define materials",
        "section": "Define materials",
        "text": "This model uses four classes of material: MAT_NULL, MAT_RIGID,\nMAT_SPOTWELD, and MAT_PIECEWISE_LINEAR_PLASTICITY. Use the dynamaterial\nclass to define these materials.\nDefine materials\nMAT_NULL\nMAT_RIGID,\nMAT_SPOTWELD\nMAT_PIECEWISE_LINEAR_PLASTICITY\ndynamaterial"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#assign-section-and-material-properties",
        "title": "Implicit model > Assign section and material properties",
        "section": "Assign section and material properties",
        "text": "Once all materials are explicitly defined, these material IDs must be cross-referenced\nin the PART card. You use the set_material() method for this. Because many parts\nshare common materials, the assignment happens within a loop. Within the loop, the\nset_element_formulation() method is called to assign the elform for the beam and\nshell elements. Accordingly, either the beam diameter or the shell thickness is also\ndefined. To identify the part ID that has a particular material type, a predefined\nlist is made available in the camry_rc_data.py file, which this script reads.\nAssign section and material properties\nset_material()\nset_element_formulation()\ncamry_rc_data.py"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#generate-keywords-for-spotwelds-and-nodal-rigid-bodies",
        "title": "Implicit model > Generate keywords for spotwelds and nodal rigid bodies",
        "section": "Generate keywords for spotwelds and nodal rigid bodies",
        "text": "The camry_rc_data.py file contains the predefined node pairs and node sets\nrequired for the CONSTRAINED_SPOTWELD and CONSTRAINED_NODAL_RIGID_BODY\ndefinitions. Loop through these lists to generate the appropriate keywords.\nGenerate keywords for spotwelds and nodal rigid bodies\ncamry_rc_data.py"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#define-contacts",
        "title": "Implicit model > Define contacts",
        "section": "Define contacts",
        "text": "There are three contacts defined in this model:\nAutomatic single surface contact for the BIW self contact\nSurface-to-surface contact between the platen and the BIW self contact\nTied contact for the spotweld beams\nUse the ContactSurface() method to set the SSTYPE and MSTYPE.\nThe PartSet() method accepts the name of a list and converts it to\nPART_SET_LIST. Notice how the contact type and category can be used\nto create the three different type of contacts for this model.\nDefine contacts\nContactSurface()\nPartSet()"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#define-spcs",
        "title": "Implicit model > Define SPCs",
        "section": "Define SPCs",
        "text": "You can use the boundaryconditions class to define both SPCs and\nprescribed motions. The bottom of the BIW is SPCed by selecting a few nodes.\nThe prescribed motion is then assigned to the platen.\nDefine SPCs\nboundaryconditions"
    },
    {
        "objectID": "examples/Implicit/camry_rc",
        "href": "examples/Implicit/camry_rc.html#define-database-cards-and-save-input-file",
        "title": "Implicit model > Define database cards and save input file",
        "section": "Define database cards and save input file",
        "text": "Define the frequency of output for the binary and ASCII database outputs\nand save the input file.\nTotal running time of the script: (0 minutes 13.931 seconds)\nDownload Jupyter notebook: camry_rc.ipynb\nDownload Python source code: camry_rc.py\nDownload zipped: camry_rc.zip\nGallery generated by Sphinx-Gallery\nDefine database cards and save input file\nDownload Jupyter notebook: camry_rc.ipynb\nDownload Python source code: camry_rc.py\nDownload zipped: camry_rc.zip"
    },
    {
        "objectID": "getting-started/SERVER_PRE_README",
        "href": "getting-started/SERVER_PRE_README.html#start-pydyna-preprocessing-server-locally",
        "title": "Start PyDYNA preprocessing server locally",
        "section": "Start PyDYNA preprocessing server locally",
        "text": "Start PyDYNA preprocessing server locally"
    },
    {
        "objectID": "getting-started/SERVER_PRE_README",
        "href": "getting-started/SERVER_PRE_README.html#run-an-example-on-the-client-side",
        "title": "Start PyDYNA preprocessing server locally > Run an example on the client side",
        "section": "Run an example on the client side",
        "text": "The function of launch_dynapre() can download and start the preprocessing server automatically.\nRun an example on the client side"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansysdynacoreliboption_card",
        "title": "ansys.dyna.core.lib.option_card",
        "section": "ansys.dyna.core.lib.option_card",
        "text": "ansys.dyna.core.lib.option_card"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#classes",
        "title": "ansys.dyna.core.lib.option_card > Classes",
        "section": "Classes",
        "text": "OptionSpec\n\nOptionCardSet\nAbstract base class for all the implementations of keyword cards.\nOptionsInterface\nAbstract base class for option card api interface.\nOptionAPI\nAPI for an individual option associated with a keyword.\nOptions\nOption collection associated with an options API.\nClasses\nOptionSpec\nOptionCardSet\nOptionsInterface\nOptionAPI\nOptions"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#module-contents",
        "title": "ansys.dyna.core.lib.option_card > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.card_interface.CardInterface\nAbstract base class for all the implementations of keyword cards.\nReturn whether the card is active.\nGet the card format type.\nRead from buf.\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\nAbstract base class for option card api interface.\nGet the card format type.\nAPI for an individual option associated with a keyword.\nOption collection associated with an options API.\nGets the option with the given name.\nModule Contents\nansys.dyna.core.lib.card_interface.CardInterface"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionSpec",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > OptionSpec",
        "section": "Module Contents > OptionSpec",
        "text": "class ansys.dyna.core.lib.option_card.OptionSpec(name: str, card_order: int, title_order: int)\n\n\n\nproperty name: str\n\n\n\n\n\nproperty card_order: int\n\n\n\n\n\nproperty title_order: int\n\n\n\n\n\n__repr__() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionSpec.name",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > name",
        "section": "Module Contents > name",
        "text": "property name: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionSpec.card_order",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > card_order",
        "section": "Module Contents > card_order",
        "text": "property card_order: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionSpec.title_order",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > title_order",
        "section": "Module Contents > title_order",
        "text": "property title_order: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionSpec.__repr__",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > OptionCardSet",
        "section": "Module Contents > OptionCardSet",
        "text": "class ansys.dyna.core.lib.option_card.OptionCardSet(option_spec: OptionSpec, cards: List[ansys.dyna.core.lib.card_interface.CardInterface], **kwargs)\n\nBases: ansys.dyna.core.lib.card_interface.CardInterface\n\nAbstract base class for all the implementations of keyword cards.\n\n!! processed by numpydoc !!\n\n\n\nproperty cards: List[ansys.dyna.core.lib.card_interface.CardInterface]\n\n\n\n\n\nproperty option_spec: OptionSpec\n\n\n\n\n\nproperty name: str\n\n\n\n\n\nproperty title_order: int\n\n\n\n\n\nproperty card_order: int\n\n\n\n\n\nproperty active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!\n\n\n\n__hash__()\n\n\n\n\n\n__lt__(other: OptionCardSet)\n\n\n\n\n\nread(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nRead from buf.\n\n!! processed by numpydoc !!\n\n\n\nwrite(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.cards",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > cards",
        "section": "Module Contents > cards",
        "text": "property cards: List[ansys.dyna.core.lib.card_interface.CardInterface]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.option_spec",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > option_spec",
        "section": "Module Contents > option_spec",
        "text": "property option_spec: OptionSpec\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.name",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > name",
        "section": "Module Contents > name",
        "text": "property name: str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.title_order",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > title_order",
        "section": "Module Contents > title_order",
        "text": "property title_order: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.card_order",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > card_order",
        "section": "Module Contents > card_order",
        "text": "property card_order: int\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.active",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\nReturn whether the card is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.format",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.__hash__",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > __hash__",
        "section": "Module Contents > __hash__",
        "text": "__hash__()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.__lt__",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > __lt__",
        "section": "Module Contents > __lt__",
        "text": "__lt__(other: OptionCardSet)\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.read",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameter_set: ansys.dyna.core.lib.parameters.ParameterSet = None) -> bool\n\nRead from buf.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionCardSet.write",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(format: ansys.dyna.core.lib.format_type.format_type | None = None, buf: TextIO | None = None, comment: bool | None = True) -> str | None\n\nRenders the card in the dyna keyword format.\n:param buf: Buffer to write to. If None, the output is returned as a string\n:param format: format_type to use. Default to standard.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > OptionsInterface",
        "section": "Module Contents > OptionsInterface",
        "text": "class ansys.dyna.core.lib.option_card.OptionsInterface\n\nAbstract base class for option card api interface.\n\n!! processed by numpydoc !!\n\n\n\nabstractmethod get_option_spec(name: str) -> OptionSpec\n\n\n\n\n\nabstractmethod deactivate_option(name: str) -> None\n\n\n\n\n\nabstractmethod activate_option(name: str) -> None\n\n\n\n\n\nabstractmethod is_option_active(name: str) -> bool\n\n\n\n\n\nproperty option_specs: Iterable[OptionSpec]\n\nAbstractmethod\n\n\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface.get_option_spec",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > get_option_spec",
        "section": "Module Contents > get_option_spec",
        "text": "abstractmethod get_option_spec(name: str) -> OptionSpec\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface.deactivate_option",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > deactivate_option",
        "section": "Module Contents > deactivate_option",
        "text": "abstractmethod deactivate_option(name: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface.activate_option",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > activate_option",
        "section": "Module Contents > activate_option",
        "text": "abstractmethod activate_option(name: str) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface.is_option_active",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > is_option_active",
        "section": "Module Contents > is_option_active",
        "text": "abstractmethod is_option_active(name: str) -> bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionsInterface.option_specs",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > option_specs",
        "section": "Module Contents > option_specs",
        "text": "property option_specs: Iterable[OptionSpec]\n\nAbstractmethod\n\n\n\nGet the card format type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionAPI",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > OptionAPI",
        "section": "Module Contents > OptionAPI",
        "text": "class ansys.dyna.core.lib.option_card.OptionAPI(options_api: OptionsInterface, name: str)\n\nAPI for an individual option associated with a keyword.\n\n!! processed by numpydoc !!\n\n\n\nproperty active: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.OptionAPI.active",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > active",
        "section": "Module Contents > active",
        "text": "property active: bool\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.Options",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > Options",
        "section": "Module Contents > Options",
        "text": "class ansys.dyna.core.lib.option_card.Options(api: OptionsInterface)\n\nOption collection associated with an options API.\n\n!! processed by numpydoc !!\n\n\n\n__getitem__(name: str) -> OptionAPI\n\nGets the option with the given name.\n\n!! processed by numpydoc !!\n\n\n\n__repr__() -> str\n\n\n\n\n\nproperty api: OptionsInterface\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.Options.__getitem__",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > __getitem__",
        "section": "Module Contents > __getitem__",
        "text": "__getitem__(name: str) -> OptionAPI\n\nGets the option with the given name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.Options.__repr__",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/option_card/index",
        "href": "autoapi/ansys/dyna/core/lib/option_card/index.html#ansys.dyna.core.lib.option_card.Options.api",
        "title": "ansys.dyna.core.lib.option_card > Module Contents > api",
        "section": "Module Contents > api",
        "text": "property api: OptionsInterface\n\n"
    },
    {
        "objectID": "examples/ICFD/icfd_driven_cavity",
        "href": "examples/ICFD/icfd_driven_cavity.html#driven-cavity",
        "title": "Driven cavity",
        "section": "Driven cavity",
        "text": "This example shows the universally famous driven-cavity case tested with\nthe second-order steady solver and for Re=1000. The executable file\nfor LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.025 seconds)\nDownload Jupyter notebook: icfd_driven_cavity.ipynb\nDownload Python source code: icfd_driven_cavity.py\nDownload zipped: icfd_driven_cavity.zip\nGallery generated by Sphinx-Gallery\nDriven cavity\nRe=1000\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_driven_cavity.ipynb\nDownload Python source code: icfd_driven_cavity.py\nDownload zipped: icfd_driven_cavity.zip"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:23.982 total execution time for 34 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_Taylor_Bar_plot_taylor_bar.py (../../examples/Taylor_Bar/plot_taylor_bar.py)\n00:48.127\n0.0\nsphx_glr_examples_Implicit_camry_rc.py (../../examples/Implicit/camry_rc.py)\n00:13.931\n0.0\nsphx_glr_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py (../../examples/John_Reid_Pendulum/plot_john_reid_pendulum.py)\n00:09.714\n0.0\nsphx_glr_examples_John_Reid_Pipe_plot_john_pipe.py (../../examples/John_Reid_Pipe/plot_john_pipe.py)\n00:08.158\n0.0\nsphx_glr_examples_Explicit_ball_plate.py (../../examples/Explicit/ball_plate.py)\n00:01.378\n0.0\nsphx_glr_examples_ISPH_rigidtest.py (../../examples/ISPH/rigidtest.py)\n00:00.698\n0.0\nsphx_glr_examples_Explicit_belted_dummy.py (../../examples/Explicit/belted_dummy.py)\n00:00.501\n0.0\nsphx_glr_examples_ICFD_icfd_sloshing.py (../../examples/ICFD/icfd_sloshing.py)\n00:00.224\n0.0\nsphx_glr_examples_SALE_sale_efp.py (../../examples/SALE/sale_efp.py)\n00:00.222\n0.0\nsphx_glr_examples_EM_em_resistive_heating.py (../../examples/EM/em_resistive_heating.py)\n00:00.121\n0.0\nsphx_glr_examples_Airbag_airbag_deploy.py (../../examples/Airbag/airbag_deploy.py)\n00:00.105\n0.0\nsphx_glr_examples_ICFD_icfd_dem_coupling.py (../../examples/ICFD/icfd_dem_coupling.py)\n00:00.082\n0.0\nsphx_glr_examples_ICFD_icfd_weak_fsi.py (../../examples/ICFD/icfd_weak_fsi.py)\n00:00.043\n0.0\nsphx_glr_examples_ICFD_icfd_strong_fsi.py (../../examples/ICFD/icfd_strong_fsi.py)\n00:00.043\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d_multi_isopots.py (../../examples/EM/em_resistive_heating_2d_multi_isopots.py)\n00:00.041\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_morphing.py (../../examples/ICFD/icfd_mesh_morphing.py)\n00:00.039\n0.0\nsphx_glr_examples_Thermal_thermal_stress.py (../../examples/Thermal/thermal_stress.py)\n00:00.039\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d_isopots.py (../../examples/EM/em_resistive_heating_2d_isopots.py)\n00:00.038\n0.0\nsphx_glr_examples_ICFD_icfd_internal_3d_flow.py (../../examples/ICFD/icfd_internal_3d_flow.py)\n00:00.037\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_size.py (../../examples/ICFD/icfd_mesh_size.py)\n00:00.036\n0.0\nsphx_glr_examples_ICFD_icfd_thermal_flow.py (../../examples/ICFD/icfd_thermal_flow.py)\n00:00.036\n0.0\nsphx_glr_examples_ICFD_icfd_free_convection_flow.py (../../examples/ICFD/icfd_free_convection_flow.py)\n00:00.034\n0.0\nsphx_glr_examples_ICFD_icfd_mesh_adaptivity.py (../../examples/ICFD/icfd_mesh_adaptivity.py)\n00:00.033\n0.0\nsphx_glr_examples_ICFD_icfd_plate_flow.py (../../examples/ICFD/icfd_plate_flow.py)\n00:00.033\n0.0\nsphx_glr_examples_EM_em_resistive_heating_2d.py (../../examples/EM/em_resistive_heating_2d.py)\n00:00.033\n0.0\nsphx_glr_examples_ICFD_icfd_imposed_move.py (../../examples/ICFD/icfd_imposed_move.py)\n00:00.033\n0.0\nsphx_glr_examples_EM_em_rlc_isopotential.py (../../examples/EM/em_rlc_isopotential.py)\n00:00.032\n0.0\nsphx_glr_examples_ICFD_icfd_cylinderflow.py (../../examples/ICFD/icfd_cylinderflow.py)\n00:00.031\n0.0\nsphx_glr_examples_EM_em_rlc_define_func.py (../../examples/EM/em_rlc_define_func.py)\n00:00.031\n0.0\nsphx_glr_examples_NVH_nvh_frf_solid.py (../../examples/NVH/nvh_frf_solid.py)\n00:00.030\n0.0\nsphx_glr_examples_NVH_frf_plate_damping.py (../../examples/NVH/frf_plate_damping.py)\n00:00.028\n0.0\nsphx_glr_examples_ICFD_icfd_dam_break.py (../../examples/ICFD/icfd_dam_break.py)\n00:00.026\n0.0\nsphx_glr_examples_ICFD_icfd_driven_cavity.py (../../examples/ICFD/icfd_driven_cavity.py)\n00:00.025\n0.0\nsphx_glr_examples_Airbag_airbag_post.py (../../examples/Airbag/airbag_post.py)\n00:00.001\n0.0\nComputation times\n../../examples/Taylor_Bar/plot_taylor_bar.py\n../../examples/Implicit/camry_rc.py\n../../examples/John_Reid_Pendulum/plot_john_reid_pendulum.py\n../../examples/John_Reid_Pipe/plot_john_pipe.py\n../../examples/Explicit/ball_plate.py\n../../examples/ISPH/rigidtest.py\n../../examples/Explicit/belted_dummy.py\n../../examples/ICFD/icfd_sloshing.py\n../../examples/SALE/sale_efp.py\n../../examples/EM/em_resistive_heating.py\n../../examples/Airbag/airbag_deploy.py\n../../examples/ICFD/icfd_dem_coupling.py\n../../examples/ICFD/icfd_weak_fsi.py\n../../examples/ICFD/icfd_strong_fsi.py\n../../examples/EM/em_resistive_heating_2d_multi_isopots.py\n../../examples/ICFD/icfd_mesh_morphing.py\n../../examples/Thermal/thermal_stress.py\n../../examples/EM/em_resistive_heating_2d_isopots.py\n../../examples/ICFD/icfd_internal_3d_flow.py\n../../examples/ICFD/icfd_mesh_size.py\n../../examples/ICFD/icfd_thermal_flow.py\n../../examples/ICFD/icfd_free_convection_flow.py\n../../examples/ICFD/icfd_mesh_adaptivity.py\n../../examples/ICFD/icfd_plate_flow.py\n../../examples/EM/em_resistive_heating_2d.py\n../../examples/ICFD/icfd_imposed_move.py\n../../examples/EM/em_rlc_isopotential.py\n../../examples/ICFD/icfd_cylinderflow.py\n../../examples/EM/em_rlc_define_func.py\n../../examples/NVH/nvh_frf_solid.py\n../../examples/NVH/frf_plate_damping.py\n../../examples/ICFD/icfd_dam_break.py\n../../examples/ICFD/icfd_driven_cavity.py\n../../examples/Airbag/airbag_post.py"
    },
    {
        "objectID": "examples/ICFD/icfd_mesh_adaptivity",
        "href": "examples/ICFD/icfd_mesh_adaptivity.html#mesh-adaptivity",
        "title": "Mesh adaptivity",
        "section": "Mesh adaptivity",
        "text": "This example shows a simple ICFD problem with adaptivity.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.033 seconds)\nDownload Jupyter notebook: icfd_mesh_adaptivity.ipynb\nDownload Python source code: icfd_mesh_adaptivity.py\nDownload zipped: icfd_mesh_adaptivity.zip\nGallery generated by Sphinx-Gallery\nMesh adaptivity\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_mesh_adaptivity.ipynb\nDownload Python source code: icfd_mesh_adaptivity.py\nDownload zipped: icfd_mesh_adaptivity.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansysdynacorekeywordskeyword_classesmanualelement_solid_ortho",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho",
        "text": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#classes",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Classes",
        "section": "Classes",
        "text": "ElementSolidOrtho\nDYNA ELEMENT_SOLID_ORTHO keyword\nClasses\nElementSolidOrtho"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.keyword_base.KeywordBase\nDYNA ELEMENT_SOLID_ORTHO keyword\nGets the full table of elements\nModule Contents\nansys.dyna.core.lib.keyword_base.KeywordBase"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > ElementSolidOrtho",
        "section": "Module Contents > ElementSolidOrtho",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho(**kwargs)\n\nBases: ansys.dyna.core.lib.keyword_base.KeywordBase\n\nDYNA ELEMENT_SOLID_ORTHO keyword\n\n!! processed by numpydoc !!\n\n\n\nkeyword = 'ELEMENT'\n\n\n\n\n\nsubkeyword = 'SOLID_ORTHO'\n\n\n\n\n\nbefore_read(buf: TextIO) -> None\n\n\n\n\n\nset_legacy_format()\n\n\n\n\n\nproperty elements\n\nGets the full table of elements\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho.keyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > keyword",
        "section": "Module Contents > keyword",
        "text": "keyword = 'ELEMENT'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho.subkeyword",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > subkeyword",
        "section": "Module Contents > subkeyword",
        "text": "subkeyword = 'SOLID_ORTHO'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho.before_read",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > before_read",
        "section": "Module Contents > before_read",
        "text": "before_read(buf: TextIO) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho.set_legacy_format",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > set_legacy_format",
        "section": "Module Contents > set_legacy_format",
        "text": "set_legacy_format()\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/element_solid_ortho/index.html#ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho.ElementSolidOrtho.elements",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.element_solid_ortho > Module Contents > elements",
        "section": "Module Contents > elements",
        "text": "property elements\n\nGets the full table of elements\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index.html#ansysdynacorekeywordskeyword_classesmanualsection_tshell",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell",
        "section": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell",
        "text": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index.html#classes",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell > Classes",
        "section": "Classes",
        "text": "SectionTShell\nDYNA SECTION_TSHELL keyword\nClasses\nSectionTShell"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index.html#module-contents",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.keywords.keyword_classes.auto.section_tshell.SectionTShell\nDYNA SECTION_TSHELL keyword\nModule Contents\nansys.dyna.core.keywords.keyword_classes.auto.section_tshell.SectionTShell"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index.html#ansys.dyna.core.keywords.keyword_classes.manual.section_tshell.SectionTShell",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell > Module Contents > SectionTShell",
        "section": "Module Contents > SectionTShell",
        "text": "class ansys.dyna.core.keywords.keyword_classes.manual.section_tshell.SectionTShell(**kwargs)\n\nBases: ansys.dyna.core.keywords.keyword_classes.auto.section_tshell.SectionTShell\n\nDYNA SECTION_TSHELL keyword\n\n!! processed by numpydoc !!\n\n\n\nERR = 'nip must be equal to a non-negative integer if icomp is 1'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index",
        "href": "autoapi/ansys/dyna/core/keywords/keyword_classes/manual/section_tshell/index.html#ansys.dyna.core.keywords.keyword_classes.manual.section_tshell.SectionTShell.ERR",
        "title": "ansys.dyna.core.keywords.keyword_classes.manual.section_tshell > Module Contents > ERR",
        "section": "Module Contents > ERR",
        "text": "ERR = 'nip must be equal to a non-negative integer if icomp is 1'\n\n"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyDYNA.\nThe following contribution information is specific to PyDYNA.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest PyDYNA release in development mode, run these commands:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyDYNA Issues\npage to report bugs and request new features. When possible,\nuse these issue templates:\nBug, problem, error: For filing a bug report\nDocumentation issue: For requesting modifications to the documentation\nAdding an example: For proposing a new example\nNew feature: For requesting enhancements to the code\nIf your issue does not fit into one of these template categories, you can click\nthe link for opening a blank issue.\nTo reach the project support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PyDYNA is hosted at\nPyDYNA documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release to\nviewing the documentation for the development version or previously released versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyDYNA follows the PEP8 standard as outlined in the PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it is not possible for you to push code that fails the style checks:\nAdhere to code style"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansysdynacorepredynamech",
        "title": "ansys.dyna.core.pre.dynamech",
        "section": "ansys.dyna.core.pre.dynamech",
        "text": "Module for setting up explicit or implicit analysis.\nansys.dyna.core.pre.dynamech"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#classes",
        "title": "ansys.dyna.core.pre.dynamech > Classes",
        "section": "Classes",
        "text": "AnalysisType\nCreate a collection of name/value pairs.\nDynaMech\nDefines a Mechanical analysis.\nAirbag\nDefines an airbag or control volume.\nClasses\nAnalysisType\nDynaMech\nAirbag"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nBases: ansys.dyna.core.pre.dynabase.DynaBase\nDefines a Mechanical analysis.\nSet miscellaneous output parameters.\nPrint suppression during the input phase flag for the D3HSP file.\nThe default is 0. Options are:\nEQ.0: No suppression.\nEQ.1: Nodal coordinates, element connectivities, rigid wall definitions,\nnodal SPCs, initial velocities, initial strains, adaptive constraints, and\nSPR2/SPR3 constraints are not printed.\nPrint suppression during the input phase flag for the echo file.\nThe default is 0. Options are:\nEQ.0: All data is printed.\nEQ.1: Nodal printing is suppressed.\nEQ.2: Element printing is suppressed.\nEQ.3: Both nodal and element printing is suppressed.\nTrue when successful, False when failed.\nDefine initial nodal point velocities using a nodal set ID.\nNodal set ID.\nInitial translational velocity in the x,y,z-direction.\nInitial rotational velocity about the x,y,z-axis.\nTrue when successful, False when failed.\nDefine orientation vectors for discrete springs and dampers.\nOrientation vector ID.\nOptions are:\nEQ.0: Deflections/rotations are measured and forces/moments are applied\nalong the following orientation vector.\nEQ.1: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the plane normal\nto the following orientation vector.\nEQ.2: Deflections/rotations are measured and forces/moments are applied\nalong a vector defined by the following two nodes.\nEQ.3: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the\nplane normal to the a vector defined by the following two nodes.\nx,y,z : x,y,z-value of the orientation vector.\nNode 1 ID.\nNode 2 ID.\nTrue when successful, False when failed.\nDefine a set of shell elements with optional identical or unique attributes.\nAvailable options. Choices are <BLANK>,``LIST``, and GENERAL.\nTitle for the shell set.\nSet ID.\nList of shell element IDs.\nTrue when successful, False when failed.\nDefine a set of solid elements.\nTitle for the set of solid elements.\nSet ID.\nSolid element IDs.\nTrue when successful, False when failed.\nDefine section properties for solid continuum and fluid elements.\nTitle for section solid.\nSection ID. SECID is referenced on the \\*PART card.\nA unique number must be specified.\nElement formulation options.\nTrue when successful, False when failed.\nDefined spring and damper elements for translation and rotation.\nSection ID.\nDisplacement/rotation. The default is 0. Options are:\nEQ.0: Material describes a translational spring/damper.\nEQ.1: Material describes a torsional spring/damper.\nDynamic magnification factor. The default is 0.\nTest velocity. The default is 0.\nClearance. The default is 0.\nFailure deflection. The default is 0.\nDeflection limit in compression. The default is 0.\nDeflection limit in tension. The default is 0.\nTrue when successful, False when failed.\nDefine hourglass and bulk viscosity properties.\nHourglass ID. A unique number or label must be specified.\nHourglass control type.\nHourglass coefficient. The default is 0.1.\nQuadratic bulk viscosity coefficient. The default is 1.5.\nLinear bulk viscosity coefficient. The default is 0.06.\nHourglass coefficient for shell bending. The default is 1e-09.\nHourglass coefficient for shell warping. The default is 1e-09.\nTrue when successful, False when failed.\nSave keyword files.\nTrue when successful, False when failed.\nBases: ansys.dyna.core.pre.dynabase.BaseObj\nDefines an airbag or control volume.\nSet. Options are:\nEQ.0: Segment set ID.\nEQ.1: Part set ID.\nHeat capacity at constant volume. The default is 0.\nHeat capacity at constant pressure. The default is 0.\nTemperature of the input gas. The default is 0.\nLoad curve ID specifying the input mass flow rate.\nThe default is 0.\nShape factor for exit hole. The default is 0.\nAmbient pressure. The default is 0.\nAmbient density. The default is 0.\nTrue when successful, False when failed..\nCreate an airbag.\nModule Contents\nansys.dyna.core.pre.dynabase.Enum\nansys.dyna.core.pre.dynabase.DynaBase\npython:int\noptional\n0\npython:int\noptional\n0\nTrue\nFalse\npython:int\nVelocity\nRotVelocity\nTrue\nFalse\npython:int\npython:int\npython:list\npython:int\npython:int\nTrue\nFalse\npython:str\n<BLANK>\nGENERAL\npython:str\npython:int\npython:list\nTrue\nFalse\npython:str\npython:int\npython:list\nTrue\nFalse\npython:str\npython:int\nSECID\n\\*PART\npython:int\nTrue\nFalse\npython:int\npython:int\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\nTrue\nFalse\npython:int\npython:int\npython:float\noptional\n0.1\npython:float\noptional\n1.5\npython:float\noptional\n0.06\npython:float\noptional\n1e-09\npython:float\noptional\n1e-09\nTrue\nFalse\nTrue\nFalse\nansys.dyna.core.pre.dynabase.BaseObj\nSegmentSet\nPartSet\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:int\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\nTrue\nFalse"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.AnalysisType",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > AnalysisType",
        "section": "Module Contents > AnalysisType",
        "text": "class ansys.dyna.core.pre.dynamech.AnalysisType(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nEXPLICIT = 1\n\n\n\n\n\nIMPLICIT = 2\n\n\n\n\n\nNONE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.AnalysisType.EXPLICIT",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > EXPLICIT",
        "section": "Module Contents > EXPLICIT",
        "text": "EXPLICIT = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.AnalysisType.IMPLICIT",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > IMPLICIT",
        "section": "Module Contents > IMPLICIT",
        "text": "IMPLICIT = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.AnalysisType.NONE",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > NONE",
        "section": "Module Contents > NONE",
        "text": "NONE = 3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > DynaMech",
        "section": "Module Contents > DynaMech",
        "text": "class ansys.dyna.core.pre.dynamech.DynaMech(analysis=AnalysisType.EXPLICIT)\n\nBases: ansys.dyna.core.pre.dynabase.DynaBase\n\nDefines a Mechanical analysis.\n\n!! processed by numpydoc !!\n\n\n\ncasetype\n\n\n\n\n\nanalysis = 1\n\n\n\n\n\ncreate_control_output(npopt=0, neecho=0)\n\nSet miscellaneous output parameters.\n\nParameters\n\nnpopt\n\npython:int, optional\n\nPrint suppression during the input phase flag for the D3HSP file.\nThe default is 0. Options are:\n\nEQ.0: No suppression.\n\nEQ.1: Nodal coordinates, element connectivities, rigid wall definitions,\nnodal SPCs, initial velocities, initial strains, adaptive constraints, and\nSPR2/SPR3 constraints are not printed.\n\nneecho\n\npython:int, optional\n\nPrint suppression during the input phase flag for the echo file.\nThe default is 0. Options are:\n\nEQ.0: All data is printed.\n\nEQ.1: Nodal printing is suppressed.\n\nEQ.2: Element printing is suppressed.\n\nEQ.3: Both nodal and element printing is suppressed.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nset_init_velocity(translational=Velocity(0, 0, 0), rotational=RotVelocity(0, 0, 0))\n\nDefine initial nodal point velocities using a nodal set ID.\n\nParameters\n\nnsid\n\npython:int\n\nNodal set ID.\n\ntranslational\n\nVelocity\n\nInitial translational velocity in the x,y,z-direction.\n\nrotational\n\nRotVelocity\n\nInitial rotational velocity about the x,y,z-axis.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_defineorientation(vid, iop, vector, node1, node2)\n\nDefine orientation vectors for discrete springs and dampers.\n\nParameters\n\nvid\n\npython:int\n\nOrientation vector ID.\n\niop\n\npython:int\n\nOptions are:\n\nEQ.0: Deflections/rotations are measured and forces/moments are applied\nalong the following orientation vector.\n\nEQ.1: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the plane normal\nto the following orientation vector.\n\nEQ.2: Deflections/rotations are measured and forces/moments are applied\nalong a vector defined by the following two nodes.\n\nEQ.3: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the\nplane normal to the a vector defined by the following two nodes.\n\nvector\n\npython:list [x,y,z]\n\nx,y,z : x,y,z-value of the orientation vector.\n\nnode1\n\npython:int\n\nNode 1 ID.\n\nnode2\n\npython:int\n\nNode 2 ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_shellset(option, title, sid, eids)\n\nDefine a set of shell elements with optional identical or unique attributes.\n\nParameters\n\noption\n\npython:str\n\nAvailable options. Choices are <BLANK>,``LIST``, and GENERAL.\n\ntitle\n\npython:str\n\nTitle for the shell set.\n\nsid\n\npython:int\n\nSet ID.\n\neids\n\npython:list\n\nList of shell element IDs.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_solidset(title, sid, ki)\n\nDefine a set of solid elements.\n\nParameters\n\ntitle\n\npython:str\n\nTitle for the set of solid elements.\n\nsid\n\npython:int\n\nSet ID.\n\nki\n\npython:list\n\nSolid element IDs.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_section_solid(title, secid, elform)\n\nDefine section properties for solid continuum and fluid elements.\n\nParameters\n\ntitle\n\npython:str\n\nTitle for section solid.\n\nsecid\n\npython:int\n\nSection ID. SECID is referenced on the \\*PART card.\nA unique number must be specified.\n\nelform\n\npython:int\n\nElement formulation options.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_section_discrete(secid, dro=0, kd=0, v0=0, cl=0, fd=0, cdl=0, tdl=0)\n\nDefined spring and damper elements for translation and rotation.\n\nParameters\n\nsecid\n\npython:int\n\nSection ID.\n\ndro\n\npython:int, optional\n\nDisplacement/rotation. The default is 0. Options are:\n\nEQ.0: Material describes a translational spring/damper.\n\nEQ.1: Material describes a torsional spring/damper.\n\nkd\n\npython:float, optional\n\nDynamic magnification factor. The default is 0.\n\nv0\n\npython:float, optional\n\nTest velocity. The default is 0.\n\ncl\n\npython:float, optional\n\nClearance. The default is 0.\n\nfd\n\npython:float, optional\n\nFailure deflection. The default is 0.\n\ncdl\n\npython:float, optional\n\nDeflection limit in compression. The default is 0.\n\ntd1\n\npython:float, optional\n\nDeflection limit in tension. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\ncreate_hourglass(ghid, ihq, qm=0.1, q1=1.5, q2=0.06, qb=1e-09, qw=1e-09)\n\nDefine hourglass and bulk viscosity properties.\n\nParameters\n\nghid\n\npython:int\n\nHourglass ID. A unique number or label must be specified.\n\nihq\n\npython:int\n\nHourglass control type.\n\nqm\n\npython:float, optional\n\nHourglass coefficient. The default is 0.1.\n\nq1\n\npython:float, optional\n\nQuadratic bulk viscosity coefficient. The default is 1.5.\n\nq2\n\npython:float, optional\n\nLinear bulk viscosity coefficient. The default is 0.06.\n\nqb\n\npython:float, optional\n\nHourglass coefficient for shell bending. The default is 1e-09.\n\nqw\n\npython:float, optional\n\nHourglass coefficient for shell warping. The default is 1e-09.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nsave_file(defaultsetting=1)\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.casetype",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > casetype",
        "section": "Module Contents > casetype",
        "text": "casetype\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.analysis",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > analysis",
        "section": "Module Contents > analysis",
        "text": "analysis = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_control_output",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_control_output",
        "section": "Module Contents > create_control_output",
        "text": "create_control_output(npopt=0, neecho=0)\n\nSet miscellaneous output parameters.\n\nParameters\n\nnpopt\n\npython:int, optional\n\nPrint suppression during the input phase flag for the D3HSP file.\nThe default is 0. Options are:\n\nEQ.0: No suppression.\n\nEQ.1: Nodal coordinates, element connectivities, rigid wall definitions,\nnodal SPCs, initial velocities, initial strains, adaptive constraints, and\nSPR2/SPR3 constraints are not printed.\n\nneecho\n\npython:int, optional\n\nPrint suppression during the input phase flag for the echo file.\nThe default is 0. Options are:\n\nEQ.0: All data is printed.\n\nEQ.1: Nodal printing is suppressed.\n\nEQ.2: Element printing is suppressed.\n\nEQ.3: Both nodal and element printing is suppressed.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.set_init_velocity",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > set_init_velocity",
        "section": "Module Contents > set_init_velocity",
        "text": "set_init_velocity(translational=Velocity(0, 0, 0), rotational=RotVelocity(0, 0, 0))\n\nDefine initial nodal point velocities using a nodal set ID.\n\nParameters\n\nnsid\n\npython:int\n\nNodal set ID.\n\ntranslational\n\nVelocity\n\nInitial translational velocity in the x,y,z-direction.\n\nrotational\n\nRotVelocity\n\nInitial rotational velocity about the x,y,z-axis.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_defineorientation",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_defineorientation",
        "section": "Module Contents > create_defineorientation",
        "text": "create_defineorientation(vid, iop, vector, node1, node2)\n\nDefine orientation vectors for discrete springs and dampers.\n\nParameters\n\nvid\n\npython:int\n\nOrientation vector ID.\n\niop\n\npython:int\n\nOptions are:\n\nEQ.0: Deflections/rotations are measured and forces/moments are applied\nalong the following orientation vector.\n\nEQ.1: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the plane normal\nto the following orientation vector.\n\nEQ.2: Deflections/rotations are measured and forces/moments are applied\nalong a vector defined by the following two nodes.\n\nEQ.3: Deflections/rotations are measured and forces/moments are applied\nalong the axis between the two spring/damper nodes projected onto the\nplane normal to the a vector defined by the following two nodes.\n\nvector\n\npython:list [x,y,z]\n\nx,y,z : x,y,z-value of the orientation vector.\n\nnode1\n\npython:int\n\nNode 1 ID.\n\nnode2\n\npython:int\n\nNode 2 ID.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_shellset",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_shellset",
        "section": "Module Contents > create_shellset",
        "text": "create_shellset(option, title, sid, eids)\n\nDefine a set of shell elements with optional identical or unique attributes.\n\nParameters\n\noption\n\npython:str\n\nAvailable options. Choices are <BLANK>,``LIST``, and GENERAL.\n\ntitle\n\npython:str\n\nTitle for the shell set.\n\nsid\n\npython:int\n\nSet ID.\n\neids\n\npython:list\n\nList of shell element IDs.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_solidset",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_solidset",
        "section": "Module Contents > create_solidset",
        "text": "create_solidset(title, sid, ki)\n\nDefine a set of solid elements.\n\nParameters\n\ntitle\n\npython:str\n\nTitle for the set of solid elements.\n\nsid\n\npython:int\n\nSet ID.\n\nki\n\npython:list\n\nSolid element IDs.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_section_solid",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_section_solid",
        "section": "Module Contents > create_section_solid",
        "text": "create_section_solid(title, secid, elform)\n\nDefine section properties for solid continuum and fluid elements.\n\nParameters\n\ntitle\n\npython:str\n\nTitle for section solid.\n\nsecid\n\npython:int\n\nSection ID. SECID is referenced on the \\*PART card.\nA unique number must be specified.\n\nelform\n\npython:int\n\nElement formulation options.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_section_discrete",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_section_discrete",
        "section": "Module Contents > create_section_discrete",
        "text": "create_section_discrete(secid, dro=0, kd=0, v0=0, cl=0, fd=0, cdl=0, tdl=0)\n\nDefined spring and damper elements for translation and rotation.\n\nParameters\n\nsecid\n\npython:int\n\nSection ID.\n\ndro\n\npython:int, optional\n\nDisplacement/rotation. The default is 0. Options are:\n\nEQ.0: Material describes a translational spring/damper.\n\nEQ.1: Material describes a torsional spring/damper.\n\nkd\n\npython:float, optional\n\nDynamic magnification factor. The default is 0.\n\nv0\n\npython:float, optional\n\nTest velocity. The default is 0.\n\ncl\n\npython:float, optional\n\nClearance. The default is 0.\n\nfd\n\npython:float, optional\n\nFailure deflection. The default is 0.\n\ncdl\n\npython:float, optional\n\nDeflection limit in compression. The default is 0.\n\ntd1\n\npython:float, optional\n\nDeflection limit in tension. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.create_hourglass",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create_hourglass",
        "section": "Module Contents > create_hourglass",
        "text": "create_hourglass(ghid, ihq, qm=0.1, q1=1.5, q2=0.06, qb=1e-09, qw=1e-09)\n\nDefine hourglass and bulk viscosity properties.\n\nParameters\n\nghid\n\npython:int\n\nHourglass ID. A unique number or label must be specified.\n\nihq\n\npython:int\n\nHourglass control type.\n\nqm\n\npython:float, optional\n\nHourglass coefficient. The default is 0.1.\n\nq1\n\npython:float, optional\n\nQuadratic bulk viscosity coefficient. The default is 1.5.\n\nq2\n\npython:float, optional\n\nLinear bulk viscosity coefficient. The default is 0.06.\n\nqb\n\npython:float, optional\n\nHourglass coefficient for shell bending. The default is 1e-09.\n\nqw\n\npython:float, optional\n\nHourglass coefficient for shell warping. The default is 1e-09.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.DynaMech.save_file",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > save_file",
        "section": "Module Contents > save_file",
        "text": "save_file(defaultsetting=1)\n\nSave keyword files.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > Airbag",
        "section": "Module Contents > Airbag",
        "text": "class ansys.dyna.core.pre.dynamech.Airbag(set, heat_capacity_at_constant_volume=0, heat_capacity_at_constant_pressure=0, input_gas_temperature=0, input_mass_flow_rate=Curve(x=[], y=[]), shape_factor_for_exit_hole=0, ambient_pressure=0, ambient_density=0)\n\nBases: ansys.dyna.core.pre.dynabase.BaseObj\n\nDefines an airbag or control volume.\n\nParameters\n\nSet\n\nSegmentSet or PartSet\n\nSet. Options are:\n\nEQ.0: Segment set ID.\n\nEQ.1: Part set ID.\n\nheat_capacity_at_constant_volume\n\npython:float, optional\n\nHeat capacity at constant volume. The default is 0.\n\nheat_capacity_at_constant_pressure\n\npython:float, optional\n\nHeat capacity at constant pressure. The default is 0.\n\ninput_gas_temperature\n\npython:float, optional\n\nTemperature of the input gas. The default is 0.\n\ninput_mass_flow_rate\n\npython:int, optional\n\nLoad curve ID specifying the input mass flow rate.\nThe default is 0.\n\nshape_factor_for_exit_hole\n\npython:float, optional\n\nShape factor for exit hole. The default is 0.\n\nambient_pressure\n\npython:float, optional\n\nAmbient pressure. The default is 0.\n\nambient_density\n\npython:float, optional\n\nAmbient density. The default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed..\n\n!! processed by numpydoc !!\n\n\n\nstub\n\n\n\n\n\ncv = 0\n\n\n\n\n\ncp = 0\n\n\n\n\n\nt = 0\n\n\n\n\n\nlcid\n\n\n\n\n\nmu = 0\n\n\n\n\n\npe = 0\n\n\n\n\n\nro = 0\n\n\n\n\n\nsid\n\n\n\n\n\ntype = 'airbag'\n\n\n\n\n\ncreate()\n\nCreate an airbag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.stub",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > stub",
        "section": "Module Contents > stub",
        "text": "stub\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.cv",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > cv",
        "section": "Module Contents > cv",
        "text": "cv = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.cp",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > cp",
        "section": "Module Contents > cp",
        "text": "cp = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.t",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > t",
        "section": "Module Contents > t",
        "text": "t = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.lcid",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > lcid",
        "section": "Module Contents > lcid",
        "text": "lcid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.mu",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > mu",
        "section": "Module Contents > mu",
        "text": "mu = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.pe",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > pe",
        "section": "Module Contents > pe",
        "text": "pe = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.ro",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.sid",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > sid",
        "section": "Module Contents > sid",
        "text": "sid\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.type",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > type",
        "section": "Module Contents > type",
        "text": "type = 'airbag'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamech/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamech/index.html#ansys.dyna.core.pre.dynamech.Airbag.create",
        "title": "ansys.dyna.core.pre.dynamech > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create()\n\nCreate an airbag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/ICFD/icfd_plate_flow",
        "href": "examples/ICFD/icfd_plate_flow.html#plate-flow",
        "title": "Plate flow",
        "section": "Plate flow",
        "text": "This example shows a simple ICFD input deck with a coarse mesh.\nThe executable file for LS-DYNA is ls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.033 seconds)\nDownload Jupyter notebook: icfd_plate_flow.ipynb\nDownload Python source code: icfd_plate_flow.py\nDownload zipped: icfd_plate_flow.zip\nGallery generated by Sphinx-Gallery\nPlate flow\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_plate_flow.ipynb\nDownload Python source code: icfd_plate_flow.py\nDownload zipped: icfd_plate_flow.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansysdynacorelibkeyword_base",
        "title": "ansys.dyna.core.lib.keyword_base",
        "section": "ansys.dyna.core.lib.keyword_base",
        "text": "ansys.dyna.core.lib.keyword_base"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#classes",
        "title": "ansys.dyna.core.lib.keyword_base > Classes",
        "section": "Classes",
        "text": "KeywordBase\nBase class for all keywords.\nClasses\nKeywordBase"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#module-contents",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents",
        "section": "Module Contents",
        "text": "Bases: ansys.dyna.core.lib.cards.Cards\nBase class for all keywords.\n_cards\nkeyword\nsubkeyword\nGet or set the “user comment” for this keyword.\nGet the deck that this keyword is associated to.\nGet or set the format for this keyword.\nGet the title of this keyword.\nGets the cards of the keyword\nReturns a console-friendly representation of the keyword data as it would appear in the .k file\nRenders the keyword in the dyna keyword format.\nOptional - buffer to write to.\nReturn the string representation of the keyword.\nLoad the keyword from string.\nReturn self to support chaining\nModule Contents\nansys.dyna.core.lib.cards.Cards"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > KeywordBase",
        "section": "Module Contents > KeywordBase",
        "text": "class ansys.dyna.core.lib.keyword_base.KeywordBase(**kwargs)\n\nBases: ansys.dyna.core.lib.cards.Cards\n\nBase class for all keywords.\n\nDerived class must provide::\n\n_cards\n\nkeyword\n\nsubkeyword\n\n!! processed by numpydoc !!\n\n\n\nproperty user_comment: str\n\nGet or set the “user comment” for this keyword.\n\n!! processed by numpydoc !!\n\n\n\nproperty deck: ansys.dyna.core.lib.deck.Deck | None\n\nGet the deck that this keyword is associated to.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nGet or set the format for this keyword.\n\n!! processed by numpydoc !!\n\n\n\nget_title(format_symbol: str = '') -> str\n\nGet the title of this keyword.\n\n!! processed by numpydoc !!\n\n\n\nproperty cards: List[ansys.dyna.core.lib.card_interface.CardInterface]\n\nGets the cards of the keyword\n\n!! processed by numpydoc !!\n\n\n\n__repr__() -> str\n\nReturns a console-friendly representation of the keyword data as it would appear in the .k file\n\n!! processed by numpydoc !!\n\n\n\nwrite(buf: TextIO | None = None, format: ansys.dyna.core.lib.format_type.format_type | None = None, deck_format: ansys.dyna.core.lib.format_type.format_type = format_type.default) -> str\n\nRenders the keyword in the dyna keyword format.\n\nParameters\n\nbuf: IO\n\nOptional - buffer to write to.\n\nReturns\n\n\n\n_______\n\n\n\nIf `buf` is None, the output is returned as a string\n\n\n\n!! processed by numpydoc !!\n\n\n\ndumps() -> str\n\nReturn the string representation of the keyword.\n\n!! processed by numpydoc !!\n\n\n\nbefore_read(buf: TextIO) -> None\n\n\n\n\n\nread(buf: TextIO, parameters: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\n\n\n\n\nloads(value: str, parameters: ansys.dyna.core.lib.parameters.ParameterSet = None) -> Any\n\nLoad the keyword from string.\n\nReturn self to support chaining\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.user_comment",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > user_comment",
        "section": "Module Contents > user_comment",
        "text": "property user_comment: str\n\nGet or set the “user comment” for this keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.deck",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > deck",
        "section": "Module Contents > deck",
        "text": "property deck: ansys.dyna.core.lib.deck.Deck | None\n\nGet the deck that this keyword is associated to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.format",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nGet or set the format for this keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.get_title",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > get_title",
        "section": "Module Contents > get_title",
        "text": "get_title(format_symbol: str = '') -> str\n\nGet the title of this keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.cards",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > cards",
        "section": "Module Contents > cards",
        "text": "property cards: List[ansys.dyna.core.lib.card_interface.CardInterface]\n\nGets the cards of the keyword\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.__repr__",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nReturns a console-friendly representation of the keyword data as it would appear in the .k file\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.write",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(buf: TextIO | None = None, format: ansys.dyna.core.lib.format_type.format_type | None = None, deck_format: ansys.dyna.core.lib.format_type.format_type = format_type.default) -> str\n\nRenders the keyword in the dyna keyword format.\n\nParameters\n\nbuf: IO\n\nOptional - buffer to write to.\n\nReturns\n\n\n\n_______\n\n\n\nIf `buf` is None, the output is returned as a string\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.dumps",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > dumps",
        "section": "Module Contents > dumps",
        "text": "dumps() -> str\n\nReturn the string representation of the keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.before_read",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > before_read",
        "section": "Module Contents > before_read",
        "text": "before_read(buf: TextIO) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.read",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > read",
        "section": "Module Contents > read",
        "text": "read(buf: TextIO, parameters: ansys.dyna.core.lib.parameters.ParameterSet = None) -> None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/keyword_base/index",
        "href": "autoapi/ansys/dyna/core/lib/keyword_base/index.html#ansys.dyna.core.lib.keyword_base.KeywordBase.loads",
        "title": "ansys.dyna.core.lib.keyword_base > Module Contents > loads",
        "section": "Module Contents > loads",
        "text": "loads(value: str, parameters: ansys.dyna.core.lib.parameters.ParameterSet = None) -> Any\n\nLoad the keyword from string.\n\nReturn self to support chaining\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/Implicit/index",
        "href": "examples/Implicit/index.html#implicit-examples",
        "title": "Implicit examples",
        "section": "Implicit examples",
        "text": "These examples show how to create and use implicit models.\nsphx_glr_examples_Implicit_camry_rc.py\nImplicit examples"
    },
    {
        "objectID": "examples/John_Reid_Pendulum/sg_execution_times",
        "href": "examples/John_Reid_Pendulum/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:09.714 total execution time for 1 file from examples/John_Reid_Pendulum:\nExample\nTime\nMem (MB)\nsphx_glr_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py (plot_john_reid_pendulum.py)\n00:09.714\n0.0\nComputation times\nplot_john_reid_pendulum.py"
    },
    {
        "objectID": "examples/EM/em_rlc_isopotential",
        "href": "examples/EM/em_rlc_isopotential.html#rlc-circuit-by-isopotential",
        "title": "RLC circuit by isopotential",
        "section": "RLC circuit by isopotential",
        "text": "This example shows how to use the corresponding contype in the\nconnect_isopotential() method to define an RLC circuit as an\ninlet boundary condition. The executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.032 seconds)\nDownload Jupyter notebook: em_rlc_isopotential.ipynb\nDownload Python source code: em_rlc_isopotential.py\nDownload zipped: em_rlc_isopotential.zip\nGallery generated by Sphinx-Gallery\nRLC circuit by isopotential\ncontype\nconnect_isopotential()\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: em_rlc_isopotential.ipynb\nDownload Python source code: em_rlc_isopotential.py\nDownload zipped: em_rlc_isopotential.zip"
    },
    {
        "objectID": "examples/ICFD/icfd_internal_3d_flow",
        "href": "examples/ICFD/icfd_internal_3d_flow.html#internal-3d-flow",
        "title": "Internal 3D flow",
        "section": "Internal 3D flow",
        "text": "This example shows a simple 3D ICFD problem.\nThe executable file for LS-DYNA is\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe.\nTotal running time of the script: (0 minutes 0.037 seconds)\nDownload Jupyter notebook: icfd_internal_3d_flow.ipynb\nDownload Python source code: icfd_internal_3d_flow.py\nDownload zipped: icfd_internal_3d_flow.zip\nGallery generated by Sphinx-Gallery\nInternal 3D flow\nls-dyna_smp_d_R13.1_138-g8429c8a10f_winx64_ifort190.exe\nDownload Jupyter notebook: icfd_internal_3d_flow.ipynb\nDownload Python source code: icfd_internal_3d_flow.py\nDownload zipped: icfd_internal_3d_flow.zip"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansysdynacorepredynamaterial",
        "title": "ansys.dyna.core.pre.dynamaterial",
        "section": "ansys.dyna.core.pre.dynamaterial",
        "text": "Module for creating a material.\nansys.dyna.core.pre.dynamaterial"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#classes",
        "title": "ansys.dyna.core.pre.dynamaterial > Classes",
        "section": "Classes",
        "text": "Air\nDefines an air material.\nLiner\nDefines a liner material.\nHighExplosive\nDefines a high-explosive material.\nVacuum\nDefines a vacuum material.\nMatNull\nDefines a null material.\nEMEOSTabulated1\nDefines electrical conductivity or permeability.\nEMMATTYPE\nCreate a collection of name/value pairs.\nMatAdditional\nDefines additional properties for a material.\nMatElastic\nDefines an isotropic hypoelastic material.\nMatPlasticKinematic\nDefine material of modelling isotropic and kinematic hardening plasticity.\nMatElasticPlasticThermal\nDefines temperature-dependent material coefficients.\nMatRigid\nDefines a rigid material.\nMatShapeMemory\nDescribe the superelastic response present in shape-memory alloys,\nMatCrushableFoam\nDefine material of modelling crushable foam.\nMatOgdenRubber\nProvides the Ogden rubber model.\nMatThermalIsotropic\nDefines isotropic thermal properties.\nMatThermalOrthotropic\nDefines orthotropic thermal properties.\nMatRigidDiscrete\nDefines a rigid material for shells or solids.\nMatPiecewiseLinearPlasticity\nDefines an elasto-plastic material with an arbitrary stress.\nMatModifiedPiecewiseLinearPlasticity\nDefines an elasto-plastic material supporting an arbitrary stress.\nMatSpotweld\nDefines a spotweld material.\nMatFabric\nDefine an airbag material.\nMatSpringNonlinearElastic\nProvides a nonlinear elastic translational and rotational spring with an arbitrary force.\nMatDamperViscous\nProvides a linear translational or rotational damper located between two nodes.\nMatDamperNonlinearViscous\nProvides a viscous translational damper with an arbitrary force.\nMatSPHIncompressibleFluid\nDefines an ISPH (incompressible smooth particle hyrodynamics) fluid material.\nMatSPHIncompressibleStructure\nDefines an ISPH structure material.\nClasses\nAir\nLiner\nHighExplosive\nVacuum\nMatNull\nEMEOSTabulated1\nEMMATTYPE\nMatAdditional\nMatElastic\nMatPlasticKinematic\nMatElasticPlasticThermal\nMatRigid\nMatShapeMemory\nMatCrushableFoam\nMatOgdenRubber\nMatThermalIsotropic\nMatThermalOrthotropic\nMatRigidDiscrete\nMatPiecewiseLinearPlasticity\nMatModifiedPiecewiseLinearPlasticity\nMatSpotweld\nMatFabric\nMatSpringNonlinearElastic\nMatDamperViscous\nMatDamperNonlinearViscous\nMatSPHIncompressibleFluid\nMatSPHIncompressibleStructure"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#module-contents",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents",
        "section": "Module Contents",
        "text": "Defines an air material.\nMaterial name.\nMass density. The default is 0.00128.\npressure cutoff. The default is 1e-09.\nInitial internal energy per unit reference volume.\nThe default is 2.5331e-06.\nInitial relative volume. The default is 1.0.\nSix polynomial equation coefficient. The default is\n[0, 0, 0, 0, 0.4, 0.4, 0]).\nTrue when successful, False when failed.\nCreate an air material.\nDefines a liner material.\nMass density. The default is 8.96.\nInitial internal energy per unit reference volume.\nThe default is 0.\nTrue when successful, False when failed.\nCreate a liner material.\nDefines a high-explosive material.\nMass density. The default is 8.96.\nTrue when successful, False when failed.\nCreate a high-explosive material.\nDefines a vacuum material.\nEstimated material density. The default is 1e-09.\nTrue when successful, False when failed.\nCreate a null material.\nDefines a null material.\nYoung’s modulus and Poisson’s ratio are used to set the contact stiffness.\nMass density. The default is 0.\nCreate a null material.\nDefines electrical conductivity or permeability.\nCreate an EM EOS tabulated1.\nBases: ansys.dyna.core.pre.dynabase.Enum\nCreate a collection of name/value pairs.\nExample enumeration:\nAccess them by:\nattribute access:\nvalue lookup:\nname lookup:\nEnumerations can be iterated over, and know how many members they have:\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\nDefines additional properties for a material.\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\nDefine two conductivities per EM node for special applications (Randles Batmac).\nconductivities of the positive current collector materials\nconductivities of the negative current collector materials\nDefine isotropic thermal properties.\nDefine additional properties for a material.\nMaterial ID.\nBases: MatAdditional\nDefines an isotropic hypoelastic material.\nCreate an elastic material.\nDefine material of modelling isotropic and kinematic hardening plasticity.\nCreate plastic kinematic material.\nBases: MatAdditional\nDefines temperature-dependent material coefficients.\nCreate elastic plastic thermal material.\nBases: MatAdditional\nDefines a rigid material.\nParts made from a rigid material are considered to belong to a rigid body.\nCreate rigid material.\nDescribe the superelastic response present in shape-memory alloys,\nthe peculiar material ability to undergo large deformations\nwith a full recovery in loading-unloading cycles.\nCreate shape memory material.\nBases: MatAdditional\nDefine material of modelling crushable foam.\nCreate crushable foam material.\nProvides the Ogden rubber model.\nCreate ogden rubber material.\nDefines isotropic thermal properties.\nCreate isotropic thermal material.\nDefines orthotropic thermal properties.\nCreate orthotropic thermal material.\nDefines a rigid material for shells or solids.\nCreate a rigid material.\nDefines an elasto-plastic material with an arbitrary stress.\nThe arbitrary stress is defined as a function of strain curve\nthat can also have an arbitrary strain rate dependency.\nCreate a piecewise linear plasticity material.\nDefines an elasto-plastic material supporting an arbitrary stress.\nThe arbitrary stress is defined as a function of strain curve and arbitrary\nstrain rate dependency.\nCreate a modified piecewise linear plasticity.\nDefines a spotweld material.\nCreate a spotweld material.\nDefine an airbag material.\nMass density. The default is 0.\nYoung’s modulus-longitudinal direction. The default is 0.\nYoung’s modulus-transverse direction. The default is 0.\nMinor Poisson’s ratio ba direction. The default is 0.35.\nMajor Poisson’s ratio ab direction. The default is 0.35.\nShear modulus in the ab direction. The default is 0.\nCreate an airbag material.\nProvides a nonlinear elastic translational and rotational spring with an arbitrary force.\nThe arbitrary force is defined as a function of displacement. The moment is defined\nas a function of rotation.\nLoad curve describing force as a function of displacement or moment as a function of rotation relationship.\nCreate material spring nonlinear elastic.\nProvides a linear translational or rotational damper located between two nodes.\nCreate a material damper viscous.\nProvides a viscous translational damper with an arbitrary force.\nThe arbitrary force is defined as a function of velocity dependency or a rotational\ndamper with an arbitrary moment as a function of rotational velocity dependency.\nLoad curve defining force as a function of rate-of-displacement\nrelationship or a moment as a function of rate-of-rotation relationship.\nCreate a material damper nonlinear viscous.\nDefines an ISPH (incompressible smooth particle hyrodynamics) fluid material.\nMass density. The default is 0.\nCreate an ISPH fluid material.\nDefines an ISPH structure material.\nMass density. The default is 0.\nCreate an ISPH structure material.\nModule Contents\npython:str\npython:float\noptional\n0.00128\npython:float\noptional\n1e-09\npython:float\noptional\n2.5331e-06\npython:float\noptional\n1.0\npython:list\noptional\n[0, 0, 0, 0, 0.4, 0.4, 0])\nTrue\nFalse\npython:float\noptional\n8.96\npython:float\noptional\npython:float\noptional\npython:float\noptional\npython:list\noptional\npython:int\noptional\npython:int\noptional\npython:float\noptional\npython:float\noptional\npython:float\noptional\npython:list\noptional\npython:float\noptional\npython:float\noptional\n0\nTrue\nFalse\npython:float\noptional\n8.96\npython:float\noptional\npython:float\noptional\npython:list\noptional\nTrue\nFalse\npython:float\n1e-09\nTrue\nFalse\npython:float\noptional\n0\nCurve\nansys.dyna.core.pre.dynabase.Enum\npython:float\npython:float\nMatAdditional\nMatAdditional\nMatAdditional\nMatAdditional\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0\npython:float\noptional\n0.35\npython:float\noptional\n0.35\npython:float\noptional\n0\nCurve\nCurve\npython:float\noptional\n0\npython:float\noptional\n0"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > Air",
        "section": "Module Contents > Air",
        "text": "class ansys.dyna.core.pre.dynamaterial.Air(mass_density=0.00128, pressure_cutoff=-1e-09, initial_internal_energy=2.5331e-06, initial_relative_volume=1.0, equation_coefficient=[0, 0, 0, 0, 0.4, 0.4, 0])\n\nDefines an air material.\n\nParameters\n\nname\n\npython:str\n\nMaterial name.\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 0.00128.\n\npressure_cutoff\n\npython:float, optional\n\npressure cutoff. The default is 1e-09.\n\ninitial_internal_energy\n\npython:float, optional\n\nInitial internal energy per unit reference volume.\nThe default is 2.5331e-06.\n\ninitial_relative_volume\n\npython:float, optional\n\nInitial relative volume. The default is 1.0.\n\nequation_coefficient\n\npython:list, optional\n\nSix polynomial equation coefficient. The default is\n[0, 0, 0, 0, 0.4, 0.4, 0]).\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nmass_density = 0.00128\n\n\n\n\n\npressure_cutoff = -1e-09\n\n\n\n\n\ninitial_internal_energy = 2.5331e-06\n\n\n\n\n\ninitial_relative_volume = 1.0\n\n\n\n\n\nequation_coefficient = [0, 0, 0, 0, 0.4, 0.4, 0]\n\n\n\n\n\ncreate(stub)\n\nCreate an air material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.mass_density",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > mass_density",
        "section": "Module Contents > mass_density",
        "text": "mass_density = 0.00128\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.pressure_cutoff",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pressure_cutoff",
        "section": "Module Contents > pressure_cutoff",
        "text": "pressure_cutoff = -1e-09\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.initial_internal_energy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > initial_internal_energy",
        "section": "Module Contents > initial_internal_energy",
        "text": "initial_internal_energy = 2.5331e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.initial_relative_volume",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > initial_relative_volume",
        "section": "Module Contents > initial_relative_volume",
        "text": "initial_relative_volume = 1.0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.equation_coefficient",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > equation_coefficient",
        "section": "Module Contents > equation_coefficient",
        "text": "equation_coefficient = [0, 0, 0, 0, 0.4, 0.4, 0]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Air.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an air material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > Liner",
        "section": "Module Contents > Liner",
        "text": "class ansys.dyna.core.pre.dynamaterial.Liner(mass_density=8.96, shear_modulus=0.46, youngs_modulus=0, poissons_ratio=0.34, constants=[0.0009, 0.00292, 0.31, 0.025, 1.09], melt_temperature=1356, room_temperature=293, strain_rate=1e-06, specific_heat=3.83e-06, tensile_failure_stress=-0.012, spall_type=2, iteration_option=0, failure_parameters=[0.54, 4.89, 3.03, 0.014, 1.12], equation_constants=[0.394, 1.489, 0, 0, 2.02], volume_correction_coefficient=0.47, initial_internal_energy=0)\n\nDefines a liner material.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 8.96.\n\nshear_modulus\n\npython:float, optional\n\n\n\nyoungs_modulus\n\npython:float, optional\n\n\n\npoissons_ratio\n\npython:float optional\n\n\n\nconstants\n\npython:list, optional\n\n\n\nmelt_temperature\n\npython:int, optional\n\n\n\nroom_temperature\n\npython:int, optional\n\n\n\nstrain_rate\n\npython:float, optional\n\n\n\nspecific_heat\n\npython:float, optional\n\n\n\ntensile_failure_stress\n\npython:float, optional\n\n\n\nspall_type, int, optional\n\n\n\niteration_option ; int, optional\n\n\n\nfailure_parameters\n\npython:list, optional\n\n\n\nequation_constants, list, optional\n\n\n\nvolume_correction_coefficient\n\npython:float, optional\n\n\n\ninitial_internal_energy\n\npython:float, optional\n\nInitial internal energy per unit reference volume.\nThe default is 0.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nmass_density = 8.96\n\n\n\n\n\nshear_modulus = 0.46\n\n\n\n\n\nyoungs_modulus = 0\n\n\n\n\n\npoissons_ratio = 0.34\n\n\n\n\n\nconstants = [0.0009, 0.00292, 0.31, 0.025, 1.09]\n\n\n\n\n\nmelt_temperature = 1356\n\n\n\n\n\nroom_temperature = 293\n\n\n\n\n\nstrain_rate = 1e-06\n\n\n\n\n\nspecific_heat = 3.83e-06\n\n\n\n\n\ntensile_failure_stress = -0.012\n\n\n\n\n\nspall_type = 2\n\n\n\n\n\niteration_option = 0\n\n\n\n\n\nfailure_parameters = [0.54, 4.89, 3.03, 0.014, 1.12]\n\n\n\n\n\nequation_constants = [0.394, 1.489, 0, 0, 2.02]\n\n\n\n\n\nvolume_correction_coefficient = 0.47\n\n\n\n\n\ninitial_internal_energy = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a liner material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.mass_density",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > mass_density",
        "section": "Module Contents > mass_density",
        "text": "mass_density = 8.96\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.shear_modulus",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > shear_modulus",
        "section": "Module Contents > shear_modulus",
        "text": "shear_modulus = 0.46\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.youngs_modulus",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > youngs_modulus",
        "section": "Module Contents > youngs_modulus",
        "text": "youngs_modulus = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.poissons_ratio",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > poissons_ratio",
        "section": "Module Contents > poissons_ratio",
        "text": "poissons_ratio = 0.34\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.constants",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > constants",
        "section": "Module Contents > constants",
        "text": "constants = [0.0009, 0.00292, 0.31, 0.025, 1.09]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.melt_temperature",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > melt_temperature",
        "section": "Module Contents > melt_temperature",
        "text": "melt_temperature = 1356\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.room_temperature",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > room_temperature",
        "section": "Module Contents > room_temperature",
        "text": "room_temperature = 293\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.strain_rate",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > strain_rate",
        "section": "Module Contents > strain_rate",
        "text": "strain_rate = 1e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.specific_heat",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > specific_heat",
        "section": "Module Contents > specific_heat",
        "text": "specific_heat = 3.83e-06\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.tensile_failure_stress",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tensile_failure_stress",
        "section": "Module Contents > tensile_failure_stress",
        "text": "tensile_failure_stress = -0.012\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.spall_type",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > spall_type",
        "section": "Module Contents > spall_type",
        "text": "spall_type = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.iteration_option",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > iteration_option",
        "section": "Module Contents > iteration_option",
        "text": "iteration_option = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.failure_parameters",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > failure_parameters",
        "section": "Module Contents > failure_parameters",
        "text": "failure_parameters = [0.54, 4.89, 3.03, 0.014, 1.12]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.equation_constants",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > equation_constants",
        "section": "Module Contents > equation_constants",
        "text": "equation_constants = [0.394, 1.489, 0, 0, 2.02]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.volume_correction_coefficient",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > volume_correction_coefficient",
        "section": "Module Contents > volume_correction_coefficient",
        "text": "volume_correction_coefficient = 0.47\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.initial_internal_energy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > initial_internal_energy",
        "section": "Module Contents > initial_internal_energy",
        "text": "initial_internal_energy = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Liner.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a liner material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > HighExplosive",
        "section": "Module Contents > HighExplosive",
        "text": "class ansys.dyna.core.pre.dynamaterial.HighExplosive(mass_density=1.835, detonation_velocity=0.88, chapman_jouget_pressure=0.37, jwl_equation_parameters=[8.261, 0.1724, 4.55, 1.32, 0.38, 0.102, 1.0])\n\nDefines a high-explosive material.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 8.96.\n\ndetonation_velocity\n\npython:float, optional\n\n\n\nchapman_jouget_pressure\n\npython:float, optional\n\n\n\njwl_equation_parameters\n\npython:list, optional\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nmass_density = 1.835\n\n\n\n\n\ndetonation_velocity = 0.88\n\n\n\n\n\nchapman_jouget_pressure = 0.37\n\n\n\n\n\njwl_equation_parameters = [8.261, 0.1724, 4.55, 1.32, 0.38, 0.102, 1.0]\n\n\n\n\n\ncreate(stub)\n\nCreate a high-explosive material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive.mass_density",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > mass_density",
        "section": "Module Contents > mass_density",
        "text": "mass_density = 1.835\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive.detonation_velocity",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > detonation_velocity",
        "section": "Module Contents > detonation_velocity",
        "text": "detonation_velocity = 0.88\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive.chapman_jouget_pressure",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > chapman_jouget_pressure",
        "section": "Module Contents > chapman_jouget_pressure",
        "text": "chapman_jouget_pressure = 0.37\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive.jwl_equation_parameters",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > jwl_equation_parameters",
        "section": "Module Contents > jwl_equation_parameters",
        "text": "jwl_equation_parameters = [8.261, 0.1724, 4.55, 1.32, 0.38, 0.102, 1.0]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.HighExplosive.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a high-explosive material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Vacuum",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > Vacuum",
        "section": "Module Contents > Vacuum",
        "text": "class ansys.dyna.core.pre.dynamaterial.Vacuum(estimated_material_density=1e-09)\n\nDefines a vacuum material.\n\nParameters\n\nestimated_material_density\n\npython:float\n\nEstimated material density. The default is 1e-09.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!\n\n\n\nestimated_material_density = 1e-09\n\n\n\n\n\ncreate(stub)\n\nCreate a null material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Vacuum.estimated_material_density",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > estimated_material_density",
        "section": "Module Contents > estimated_material_density",
        "text": "estimated_material_density = 1e-09\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.Vacuum.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a null material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatNull",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatNull",
        "section": "Module Contents > MatNull",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatNull(mass_density=0, pressure_cutoff=0)\n\nDefines a null material.\n\nYoung’s modulus and Poisson’s ratio are used to set the contact stiffness.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 0.\n\npressure_cutoff\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\npc = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a null material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatNull.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatNull.pc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pc",
        "section": "Module Contents > pc",
        "text": "pc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatNull.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a null material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMEOSTabulated1",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > EMEOSTabulated1",
        "section": "Module Contents > EMEOSTabulated1",
        "text": "class ansys.dyna.core.pre.dynamaterial.EMEOSTabulated1(curve=None)\n\nDefines electrical conductivity or permeability.\n\nParameters\n\ncurve\n\nCurve\n\n\n\n!! processed by numpydoc !!\n\n\n\ncurve = None\n\n\n\n\n\ncreate(stub)\n\nCreate an EM EOS tabulated1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMEOSTabulated1.curve",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > curve",
        "section": "Module Contents > curve",
        "text": "curve = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMEOSTabulated1.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an EM EOS tabulated1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMMATTYPE",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > EMMATTYPE",
        "section": "Module Contents > EMMATTYPE",
        "text": "class ansys.dyna.core.pre.dynamaterial.EMMATTYPE(*args, **kwds)\n\nBases: ansys.dyna.core.pre.dynabase.Enum\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details.\n\n!! processed by numpydoc !!\n\n\n\nAIR_OR_VACUUM = 0\n\n\n\n\n\nINSULATOR = 1\n\n\n\n\n\nCONDUCTOR = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMMATTYPE.AIR_OR_VACUUM",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > AIR_OR_VACUUM",
        "section": "Module Contents > AIR_OR_VACUUM",
        "text": "AIR_OR_VACUUM = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMMATTYPE.INSULATOR",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > INSULATOR",
        "section": "Module Contents > INSULATOR",
        "text": "INSULATOR = 1\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.EMMATTYPE.CONDUCTOR",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > CONDUCTOR",
        "section": "Module Contents > CONDUCTOR",
        "text": "CONDUCTOR = 2\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatAdditional",
        "section": "Module Contents > MatAdditional",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatAdditional\n\nDefines additional properties for a material.\n\n!! processed by numpydoc !!\n\n\n\nem = False\n\n\n\n\n\nem_mat_type = 0\n\n\n\n\n\nem_eos = None\n\n\n\n\n\nthermal_isotropic = False\n\n\n\n\n\nset_electromagnetic_property(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_em_permeability_equal(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_em_permeability_different(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None, murel=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\nmurel\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_em_conducting_shells_3d(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_em_resistive_heating_2d(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\n!! processed by numpydoc !!\n\n\n\nset_em_randles_batmac(positive_current_collector_conductivity=0, negative_current_collector_conductivity=0)\n\nDefine two conductivities per EM node for special applications (Randles Batmac).\n\nParameters\n\npositive_current_collector_conductivity\n\npython:float\n\nconductivities of the positive current collector materials\n\nnegative_current_collector_conductivity\n\npython:float\n\nconductivities of the negative current collector materials\n\n!! processed by numpydoc !!\n\n\n\nset_thermal_isotropic(density=0, generation_rate=0, generation_rate_multiplier=0, specific_heat=0, conductivity=0)\n\nDefine isotropic thermal properties.\n\nParameters\n\ndensity\n\n\n\ngeneration_rate\n\n\n\ngeneration_rate_multiplier\n\n\n\nspecific_heat\n\n\n\nconductivity\n\n\n\n!! processed by numpydoc !!\n\n\n\ncreate(stub, matid)\n\nDefine additional properties for a material.\n\nParameters\n\nmatid\n\nMaterial ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.em",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > em",
        "section": "Module Contents > em",
        "text": "em = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.em_mat_type",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > em_mat_type",
        "section": "Module Contents > em_mat_type",
        "text": "em_mat_type = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.em_eos",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > em_eos",
        "section": "Module Contents > em_eos",
        "text": "em_eos = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.thermal_isotropic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > thermal_isotropic",
        "section": "Module Contents > thermal_isotropic",
        "text": "thermal_isotropic = False\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_electromagnetic_property",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_electromagnetic_property",
        "section": "Module Contents > set_electromagnetic_property",
        "text": "set_electromagnetic_property(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_em_permeability_equal",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_em_permeability_equal",
        "section": "Module Contents > set_em_permeability_equal",
        "text": "set_em_permeability_equal(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_em_permeability_different",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_em_permeability_different",
        "section": "Module Contents > set_em_permeability_different",
        "text": "set_em_permeability_different(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0, eos=None, murel=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\neos\n\n\n\nmurel\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_em_conducting_shells_3d",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_em_conducting_shells_3d",
        "section": "Module Contents > set_em_conducting_shells_3d",
        "text": "set_em_conducting_shells_3d(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_em_resistive_heating_2d",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_em_resistive_heating_2d",
        "section": "Module Contents > set_em_resistive_heating_2d",
        "text": "set_em_resistive_heating_2d(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=0)\n\nDefine the electromagnetic material type and properties\nfor a material whose permeability equals the free space permeability.\n\nParameters\n\nmaterial_type\n\n\n\ninitial_conductivity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_em_randles_batmac",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_em_randles_batmac",
        "section": "Module Contents > set_em_randles_batmac",
        "text": "set_em_randles_batmac(positive_current_collector_conductivity=0, negative_current_collector_conductivity=0)\n\nDefine two conductivities per EM node for special applications (Randles Batmac).\n\nParameters\n\npositive_current_collector_conductivity\n\npython:float\n\nconductivities of the positive current collector materials\n\nnegative_current_collector_conductivity\n\npython:float\n\nconductivities of the negative current collector materials\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.set_thermal_isotropic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > set_thermal_isotropic",
        "section": "Module Contents > set_thermal_isotropic",
        "text": "set_thermal_isotropic(density=0, generation_rate=0, generation_rate_multiplier=0, specific_heat=0, conductivity=0)\n\nDefine isotropic thermal properties.\n\nParameters\n\ndensity\n\n\n\ngeneration_rate\n\n\n\ngeneration_rate_multiplier\n\n\n\nspecific_heat\n\n\n\nconductivity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatAdditional.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub, matid)\n\nDefine additional properties for a material.\n\nParameters\n\nmatid\n\nMaterial ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElastic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatElastic",
        "section": "Module Contents > MatElastic",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatElastic(mass_density=0, young_modulus=0, poisson_ratio=0.3)\n\nBases: MatAdditional\n\nDefines an isotropic hypoelastic material.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\ncreate(stub)\n\nCreate an elastic material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElastic.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElastic.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElastic.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElastic.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an elastic material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatPlasticKinematic",
        "section": "Module Contents > MatPlasticKinematic",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic(mass_density=0, young_modulus=0, poisson_ratio=0.3, yield_stress=0, tangent_modulus=0, hardening=0)\n\nDefine material of modelling isotropic and kinematic hardening plasticity.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\nsigy = 0\n\n\n\n\n\netan = 0\n\n\n\n\n\nbeta = 0\n\n\n\n\n\ncreate(stub)\n\nCreate plastic kinematic material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.sigy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigy",
        "section": "Module Contents > sigy",
        "text": "sigy = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.etan",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > etan",
        "section": "Module Contents > etan",
        "text": "etan = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.beta",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > beta",
        "section": "Module Contents > beta",
        "text": "beta = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPlasticKinematic.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate plastic kinematic material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatElasticPlasticThermal",
        "section": "Module Contents > MatElasticPlasticThermal",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal(mass_density=0, temperatures=None, young_modulus=None, poisson_ratio=None, thermal_expansion=None, yield_stress=None)\n\nBases: MatAdditional\n\nDefines temperature-dependent material coefficients.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\nti = None\n\n\n\n\n\nei = None\n\n\n\n\n\npri = None\n\n\n\n\n\nalphai = None\n\n\n\n\n\nsigyi = None\n\n\n\n\n\ncreate(stub)\n\nCreate elastic plastic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.ti",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ti",
        "section": "Module Contents > ti",
        "text": "ti = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.ei",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ei",
        "section": "Module Contents > ei",
        "text": "ei = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.pri",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pri",
        "section": "Module Contents > pri",
        "text": "pri = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.alphai",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > alphai",
        "section": "Module Contents > alphai",
        "text": "alphai = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.sigyi",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigyi",
        "section": "Module Contents > sigyi",
        "text": "sigyi = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatElasticPlasticThermal.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate elastic plastic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatRigid",
        "section": "Module Contents > MatRigid",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatRigid(mass_density=0, young_modulus=0, poisson_ratio=0.3, center_of_mass_constraint=0, translational_constraint=0, rotational_constraint=0)\n\nBases: MatAdditional\n\nDefines a rigid material.\n\nParts made from a rigid material are considered to belong to a rigid body.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\ncmo = 0\n\n\n\n\n\ncon1 = 0\n\n\n\n\n\ncon2 = 0\n\n\n\n\n\ncreate(stub)\n\nCreate rigid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.cmo",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > cmo",
        "section": "Module Contents > cmo",
        "text": "cmo = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.con1",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > con1",
        "section": "Module Contents > con1",
        "text": "con1 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.con2",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > con2",
        "section": "Module Contents > con2",
        "text": "con2 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigid.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate rigid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatShapeMemory",
        "section": "Module Contents > MatShapeMemory",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatShapeMemory(mass_density=0, young_modulus=0, poisson_ratio=0.3, effective_stress=None, forward_phase_transformation_start=None, forward_phase_transformation_final=None, reverse_phase_transformation_start=None, reverse_phase_transformation_final=None, recoverable_strain=0)\n\nDescribe the superelastic response present in shape-memory alloys,\nthe peculiar material ability to undergo large deformations\nwith a full recovery in loading-unloading cycles.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\nlcss = None\n\n\n\n\n\nparams\n\n\n\n\n\ncreate(stub)\n\nCreate shape memory material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.lcss",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > lcss",
        "section": "Module Contents > lcss",
        "text": "lcss = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.params",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > params",
        "section": "Module Contents > params",
        "text": "params\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatShapeMemory.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate shape memory material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatCrushableFoam",
        "section": "Module Contents > MatCrushableFoam",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatCrushableFoam(mass_density=0, young_modulus=0, poisson_ratio=0.3, yield_stress_curve=None, tensile_stress_cutoff=0)\n\nBases: MatAdditional\n\nDefine material of modelling crushable foam.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\nlcid = None\n\n\n\n\n\ntsl = 0\n\n\n\n\n\ncreate(stub)\n\nCreate crushable foam material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.lcid",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > lcid",
        "section": "Module Contents > lcid",
        "text": "lcid = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.tsl",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tsl",
        "section": "Module Contents > tsl",
        "text": "tsl = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatCrushableFoam.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate crushable foam material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatOgdenRubber",
        "section": "Module Contents > MatOgdenRubber",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatOgdenRubber(mass_density=0, poisson_ratio=0.3, limit_stress=0, shear_modulus=None, exponent=None)\n\nProvides the Ogden rubber model.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\nsigf = 0\n\n\n\n\n\nmu = None\n\n\n\n\n\nalpha = None\n\n\n\n\n\ncreate(stub)\n\nCreate ogden rubber material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.sigf",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigf",
        "section": "Module Contents > sigf",
        "text": "sigf = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.mu",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > mu",
        "section": "Module Contents > mu",
        "text": "mu = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.alpha",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > alpha",
        "section": "Module Contents > alpha",
        "text": "alpha = None\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatOgdenRubber.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate ogden rubber material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatThermalIsotropic",
        "section": "Module Contents > MatThermalIsotropic",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic(density=0, generation_rate=0, generation_rate_multiplier=0, specific_heat=0, conductivity=0)\n\nDefines isotropic thermal properties.\n\n!! processed by numpydoc !!\n\n\n\ntro = 0\n\n\n\n\n\ntgrlc = 0\n\n\n\n\n\ntgmult = 0\n\n\n\n\n\nhc = 0\n\n\n\n\n\ntc = 0\n\n\n\n\n\ncreate(stub)\n\nCreate isotropic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.tro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tro",
        "section": "Module Contents > tro",
        "text": "tro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.tgrlc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tgrlc",
        "section": "Module Contents > tgrlc",
        "text": "tgrlc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.tgmult",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tgmult",
        "section": "Module Contents > tgmult",
        "text": "tgmult = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.hc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > hc",
        "section": "Module Contents > hc",
        "text": "hc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.tc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > tc",
        "section": "Module Contents > tc",
        "text": "tc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalIsotropic.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate isotropic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatThermalOrthotropic",
        "section": "Module Contents > MatThermalOrthotropic",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic(specific_heat=0, conductivity_x=0, conductivity_y=0, conductivity_z=0)\n\nDefines orthotropic thermal properties.\n\n!! processed by numpydoc !!\n\n\n\nhc = 0\n\n\n\n\n\nk1 = 0\n\n\n\n\n\nk2 = 0\n\n\n\n\n\nk3 = 0\n\n\n\n\n\ncreate(stub)\n\nCreate orthotropic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic.hc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > hc",
        "section": "Module Contents > hc",
        "text": "hc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic.k1",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > k1",
        "section": "Module Contents > k1",
        "text": "k1 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic.k2",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > k2",
        "section": "Module Contents > k2",
        "text": "k2 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic.k3",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > k3",
        "section": "Module Contents > k3",
        "text": "k3 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatThermalOrthotropic.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate orthotropic thermal material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatRigidDiscrete",
        "section": "Module Contents > MatRigidDiscrete",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete(mass_density=0, young_modulus=0, poisson_ratio=0.3)\n\nDefines a rigid material for shells or solids.\n\nParameters\n\nmass_density\n\n\n\nyoung_modulus\n\n\n\npoisson_ratio\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\ncreate(stub)\n\nCreate a rigid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatRigidDiscrete.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a rigid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatPiecewiseLinearPlasticity",
        "section": "Module Contents > MatPiecewiseLinearPlasticity",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity(mass_density=0, young_modulus=0, poisson_ratio=0.3, yield_stress=0, tangent_modulus=0)\n\nDefines an elasto-plastic material with an arbitrary stress.\n\nThe arbitrary stress is defined as a function of strain curve\nthat can also have an arbitrary strain rate dependency.\n\nParameters\n\nmass_density\n\n\n\nyoung_modulus\n\n\n\npoisson_ratio\n\n\n\nyield_stress\n\n\n\ntangent_modulus\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0.3\n\n\n\n\n\nsigy = 0\n\n\n\n\n\netan = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a piecewise linear plasticity material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0.3\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.sigy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigy",
        "section": "Module Contents > sigy",
        "text": "sigy = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.etan",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > etan",
        "section": "Module Contents > etan",
        "text": "etan = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatPiecewiseLinearPlasticity.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a piecewise linear plasticity material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatModifiedPiecewiseLinearPlasticity",
        "section": "Module Contents > MatModifiedPiecewiseLinearPlasticity",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity(mass_density=0, young_modulus=0, poisson_ratio=0, yield_stress=0, tangent_modulus=0, plastic_strain_to_failure=0, integration_points_number=0)\n\nDefines an elasto-plastic material supporting an arbitrary stress.\n\nThe arbitrary stress is defined as a function of strain curve and arbitrary\nstrain rate dependency.\n\nParameters\n\nmass_density\n\n\n\nyoung_modulus\n\n\n\npoisson_ratio\n\n\n\nyield_stress\n\n\n\ntangent_modulus\n\n\n\nplastic_strain_to_failure\n\n\n\nintegration_points_number\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0\n\n\n\n\n\nsigy = 0\n\n\n\n\n\netan = 0\n\n\n\n\n\nfail = 0\n\n\n\n\n\nnumint = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a modified piecewise linear plasticity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.sigy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigy",
        "section": "Module Contents > sigy",
        "text": "sigy = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.etan",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > etan",
        "section": "Module Contents > etan",
        "text": "etan = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.fail",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > fail",
        "section": "Module Contents > fail",
        "text": "fail = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.numint",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > numint",
        "section": "Module Contents > numint",
        "text": "numint = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatModifiedPiecewiseLinearPlasticity.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a modified piecewise linear plasticity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatSpotweld",
        "section": "Module Contents > MatSpotweld",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatSpotweld(mass_density=0, young_modulus=0, poisson_ratio=0, yield_stress=0, plastic_hardening_modulus=0, axial_force_resultant_at_failure=0, force_resultant_nrs_at_failure=0, force_resultant_nrt_at_failure=0)\n\nDefines a spotweld material.\n\nParameters\n\nmass_density\n\n\n\nyoung_modulus\n\n\n\npoisson_ratio\n\n\n\nyield_stress\n\n\n\nplastic_hardening_modulus\n\n\n\naxial_force_resultant_at_failure\n\n\n\nforce_resultant_nrs_at_failure\n\n\n\nforce_resultant_nrt_at_failure\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\ne = 0\n\n\n\n\n\npr = 0\n\n\n\n\n\nsigy = 0\n\n\n\n\n\neh = 0\n\n\n\n\n\nnrr = 0\n\n\n\n\n\nnrs = 0\n\n\n\n\n\nnrt = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a spotweld material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.e",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > e",
        "section": "Module Contents > e",
        "text": "e = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.pr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > pr",
        "section": "Module Contents > pr",
        "text": "pr = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.sigy",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > sigy",
        "section": "Module Contents > sigy",
        "text": "sigy = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.eh",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > eh",
        "section": "Module Contents > eh",
        "text": "eh = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.nrr",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > nrr",
        "section": "Module Contents > nrr",
        "text": "nrr = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.nrs",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > nrs",
        "section": "Module Contents > nrs",
        "text": "nrs = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.nrt",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > nrt",
        "section": "Module Contents > nrt",
        "text": "nrt = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpotweld.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a spotweld material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatFabric",
        "section": "Module Contents > MatFabric",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatFabric(mass_density=0, young_modulus_longitudinal_direction=0, young_modulus_transverse_direction=0, minor_poisson_ratio=0.35, major_poisson_ratio=0.35, shear_modulus=0)\n\nDefine an airbag material.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 0.\n\nyoung_modulus_longitudinal_direction\n\npython:float, optional\n\nYoung’s modulus-longitudinal direction. The default is 0.\n\nyoung_modulus_transverse_direction\n\npython:float, optional\n\nYoung’s modulus-transverse direction. The default is 0.\n\nminor_poisson_ratio\n\npython:float, optional\n\nMinor Poisson’s ratio ba direction. The default is 0.35.\n\nmajor_poisson_ratio\n\npython:float, optional\n\nMajor Poisson’s ratio ab direction. The default is 0.35.\n\nshear_modulus\n\npython:float, optional\n\nShear modulus in the ab direction. The default is 0.\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\nea = 0\n\n\n\n\n\neb = 0\n\n\n\n\n\nprba = 0.35\n\n\n\n\n\nprab = 0.35\n\n\n\n\n\ngab = 0\n\n\n\n\n\ncreate(stub)\n\nCreate an airbag material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.ea",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ea",
        "section": "Module Contents > ea",
        "text": "ea = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.eb",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > eb",
        "section": "Module Contents > eb",
        "text": "eb = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.prba",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > prba",
        "section": "Module Contents > prba",
        "text": "prba = 0.35\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.prab",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > prab",
        "section": "Module Contents > prab",
        "text": "prab = 0.35\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.gab",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > gab",
        "section": "Module Contents > gab",
        "text": "gab = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatFabric.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an airbag material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpringNonlinearElastic",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatSpringNonlinearElastic",
        "section": "Module Contents > MatSpringNonlinearElastic",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatSpringNonlinearElastic(curve)\n\nProvides a nonlinear elastic translational and rotational spring with an arbitrary force.\n\nThe arbitrary force is defined as a function of displacement. The moment is defined\nas a function of rotation.\n\nParameters\n\ncurve\n\nCurve\n\nLoad curve describing force as a function of displacement or moment as a function of rotation relationship.\n\n!! processed by numpydoc !!\n\n\n\ncurve\n\n\n\n\n\ncreate(stub)\n\nCreate material spring nonlinear elastic.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpringNonlinearElastic.curve",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > curve",
        "section": "Module Contents > curve",
        "text": "curve\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSpringNonlinearElastic.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate material spring nonlinear elastic.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperViscous",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatDamperViscous",
        "section": "Module Contents > MatDamperViscous",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatDamperViscous(damping_constant=0)\n\nProvides a linear translational or rotational damper located between two nodes.\n\nParameters\n\ndamping_constant\n\n\n\n!! processed by numpydoc !!\n\n\n\ndc = 0\n\n\n\n\n\ncreate(stub)\n\nCreate a material damper viscous.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperViscous.dc",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > dc",
        "section": "Module Contents > dc",
        "text": "dc = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperViscous.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a material damper viscous.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperNonlinearViscous",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatDamperNonlinearViscous",
        "section": "Module Contents > MatDamperNonlinearViscous",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatDamperNonlinearViscous(curve)\n\nProvides a viscous translational damper with an arbitrary force.\n\nThe arbitrary force is defined as a function of velocity dependency or a rotational\ndamper with an arbitrary moment as a function of rotational velocity dependency.\n\nParameters\n\ncurve\n\nCurve\n\nLoad curve defining force as a function of rate-of-displacement\nrelationship or a moment as a function of rate-of-rotation relationship.\n\n!! processed by numpydoc !!\n\n\n\ncurve\n\n\n\n\n\ncreate(stub)\n\nCreate a material damper nonlinear viscous.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperNonlinearViscous.curve",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > curve",
        "section": "Module Contents > curve",
        "text": "curve\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatDamperNonlinearViscous.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate a material damper nonlinear viscous.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatSPHIncompressibleFluid",
        "section": "Module Contents > MatSPHIncompressibleFluid",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid(mass_density=0, dynamic_viscosity=0, tension_coefficient1=0, tension_coefficient2=0)\n\nDefines an ISPH (incompressible smooth particle hyrodynamics) fluid material.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 0.\n\ndynamic_viscosity\n\n\n\ntension_coefficient1\n\n\n\ntension_coefficient2\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\nmu = 0\n\n\n\n\n\ngamma1 = 0\n\n\n\n\n\ngamma2 = 0\n\n\n\n\n\ncreate(stub)\n\nCreate an ISPH fluid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid.mu",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > mu",
        "section": "Module Contents > mu",
        "text": "mu = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid.gamma1",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > gamma1",
        "section": "Module Contents > gamma1",
        "text": "gamma1 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid.gamma2",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > gamma2",
        "section": "Module Contents > gamma2",
        "text": "gamma2 = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleFluid.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an ISPH fluid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > MatSPHIncompressibleStructure",
        "section": "Module Contents > MatSPHIncompressibleStructure",
        "text": "class ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure(mass_density=0, adhesion_coefficient=0, roughness_coefficient=0, adhesion_scaling_coefficient=0)\n\nDefines an ISPH structure material.\n\nParameters\n\nmass_density\n\npython:float, optional\n\nMass density. The default is 0.\n\nadhension_coefficient\n\n\n\nroughness_coefficient\n\n\n\nadhesion_scaling_coefficient\n\n\n\n!! processed by numpydoc !!\n\n\n\nro = 0\n\n\n\n\n\nbeta = 0\n\n\n\n\n\nrough = 0\n\n\n\n\n\nadh = 0\n\n\n\n\n\ncreate(stub)\n\nCreate an ISPH structure material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure.ro",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > ro",
        "section": "Module Contents > ro",
        "text": "ro = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure.beta",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > beta",
        "section": "Module Contents > beta",
        "text": "beta = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure.rough",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > rough",
        "section": "Module Contents > rough",
        "text": "rough = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure.adh",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > adh",
        "section": "Module Contents > adh",
        "text": "adh = 0\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/pre/dynamaterial/index",
        "href": "autoapi/ansys/dyna/core/pre/dynamaterial/index.html#ansys.dyna.core.pre.dynamaterial.MatSPHIncompressibleStructure.create",
        "title": "ansys.dyna.core.pre.dynamaterial > Module Contents > create",
        "section": "Module Contents > create",
        "text": "create(stub)\n\nCreate an ISPH structure material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started/SERVER_SOLVER_README",
        "href": "getting-started/SERVER_SOLVER_README.html#start-pydyna-solver-server-locally",
        "title": "Start PyDYNA solver server locally",
        "section": "Start PyDYNA solver server locally",
        "text": "Start PyDYNA solver server locally"
    },
    {
        "objectID": "getting-started/SERVER_SOLVER_README",
        "href": "getting-started/SERVER_SOLVER_README.html#prerequisites",
        "title": "Start PyDYNA solver server locally > Prerequisites",
        "section": "Prerequisites",
        "text": "Prerequisites"
    },
    {
        "objectID": "getting-started/SERVER_SOLVER_README",
        "href": "getting-started/SERVER_SOLVER_README.html#start-server-on-windows",
        "title": "Start PyDYNA solver server locally > Start server on Windows",
        "section": "Start server on Windows",
        "text": "If you want to start the server on Windows,please ensure that you have installed the ANSYS locally.\nStart server on Windows"
    },
    {
        "objectID": "getting-started/SERVER_SOLVER_README",
        "href": "getting-started/SERVER_SOLVER_README.html#start-server-on-linuxcentos7",
        "title": "Start PyDYNA solver server locally > Start server on Linux(Centos7)",
        "section": "Start server on Linux(Centos7)",
        "text": "If you want to start the server on Linux,please ensure that you have installed the Open MPI package.\nset environment variable for Open MPI\nStart server on Linux(Centos7)"
    },
    {
        "objectID": "getting-started/SERVER_SOLVER_README",
        "href": "getting-started/SERVER_SOLVER_README.html#run-an-example-on-the-client-side",
        "title": "Start PyDYNA solver server locally > Run an example on the client side",
        "section": "Run an example on the client side",
        "text": "The function of DynaSolver() can download and start the solver server automatically.\nRun an example on the client side"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#ansysdynacorelibformat_type",
        "title": "ansys.dyna.core.lib.format_type",
        "section": "ansys.dyna.core.lib.format_type",
        "text": "Format type for dyna keywords.\nansys.dyna.core.lib.format_type"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#classes",
        "title": "ansys.dyna.core.lib.format_type > Classes",
        "section": "Classes",
        "text": "format_type\n\nClasses\nformat_type"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#module-contents",
        "title": "ansys.dyna.core.lib.format_type > Module Contents",
        "section": "Module Contents",
        "text": "Module Contents"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#ansys.dyna.core.lib.format_type.format_type",
        "title": "ansys.dyna.core.lib.format_type > Module Contents > format_type",
        "section": "Module Contents > format_type",
        "text": "class ansys.dyna.core.lib.format_type.format_type\n\n\n\ndefault = 's'\n\n\n\n\n\nstandard = 'k'\n\n\n\n\n\nlong = 'y'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#ansys.dyna.core.lib.format_type.format_type.default",
        "title": "ansys.dyna.core.lib.format_type > Module Contents > default",
        "section": "Module Contents > default",
        "text": "default = 's'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#ansys.dyna.core.lib.format_type.format_type.standard",
        "title": "ansys.dyna.core.lib.format_type > Module Contents > standard",
        "section": "Module Contents > standard",
        "text": "standard = 'k'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/format_type/index",
        "href": "autoapi/ansys/dyna/core/lib/format_type/index.html#ansys.dyna.core.lib.format_type.format_type.long",
        "title": "ansys.dyna.core.lib.format_type > Module Contents > long",
        "section": "Module Contents > long",
        "text": "long = 'y'\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansysdynacorelibdeck",
        "title": "ansys.dyna.core.lib.deck",
        "section": "ansys.dyna.core.lib.deck",
        "text": "Module provides a collection of keywords that can read and write to a keyword file.\nansys.dyna.core.lib.deck"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#classes",
        "title": "ansys.dyna.core.lib.deck > Classes",
        "section": "Classes",
        "text": "Deck\nProvides a collection of keywords that can read and write to a keyword file.\nClasses\nDeck"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#module-contents",
        "title": "ansys.dyna.core.lib.deck > Module Contents",
        "section": "Module Contents",
        "text": "Provides a collection of keywords that can read and write to a keyword file.\nComment header of the keyword database.\nTitle of the keyword database.\nFormat type of the deck.\nAdd two decks together.\nClear all keywords from the deck.\nRegisters an ImportHandler object\nAdd a keyword to the collection.\nKeyword. The keyword can be KeywordBase, EncryptedKeyword,\nor a string.\nThe default is False.\nRemove a keyword from the collection by index.\nList of all keywords.\nList of keywords as a raw string.\nList of keywords as a raw string.\nList of processed keywords.\nAdd a list of keywords to the deck.\nList of keywords.\nGet a new deck that is flattened copy of self.\nA flattened deck is one where the *INCLUDE keywords are replaced\nby the contents of the file that is included.\ncwd is a working directory used to resolve the filename\nIf recurse is true, *INCLUDE keywords within included decks\nare expanded, recursively.\nGet the keyword file representation of all keywords as a string.\nKeyword file representation of all keywords as a string.\nWrite the card in the dyna keyword format.\nBuffer to write to. The default is None,\nin which case the output is returned as a string.\nFormat to write in. The default is None.\nLoad all keywords from the keyword file as a string.\nWhen adding all keywords from the file, this method\noverwrites the title and user comment, if any.\nthe context\nValidate the collection of keywords.\nGet all keywords for a given type.\nKeyword type.\nGet all SECTION_ keywords in the deck.\n>>>deck.get_kwds_by_type(“SECTION”)\nGet all keywords for a given full type.\nKeyword type.\nKeyword subtype.\nGet all *SECTION_SHELL keyword instances in the deck.\n>>>deck.get_kwds_by_full_type(“SECTION”, “SHELL”)\nGet the SECTION keyword in the collection for a given section ID.\nSection ID.\nIf multiple SECTION keywords use the given section ID.\nGet a list of keywords.\nThe type of keyword to get. For example, “SECTION” returns all section keywords.\nThe filter to apply to the result. Only keywords which pass the filter will be returned.\nImport a keyword file.\nFull path for the keyword file.\nString encoding used to read the keyword file.\nExport the keyword file to a new keyword file.\nFull path for the new keyword file.\nGet a console-friendly representation of a list of all keywords in the deck.\nPlot the node and element of the mesh using PyVista.\nKeyword arguments. Use * cwd (int) if the deck and include files are in\na separate directory.\nModule Contents\nUnion\nKeywordBase\nEncryptedKeyword\npython:str\nKeywordBase\nEncryptedKeyword\noptional\nFalse\npython:int\npython:list\nof\npython:int\nmandatory\npython:list\npython:str\noptional\nNone\noptional\nNone\npython:str\npython:str\ntyping.Iterator\nKeywordBase\npython:str\npython:str\ntyping.Iterator\nKeywordBase\npython:int\nSECTION\nkeyword\nNone\nif\nthere\nis\nno\nSECTION\nkeyword\nthat\nmatches\nthe\nsection\nException\npython:str\npython:str\nint"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck",
        "title": "ansys.dyna.core.lib.deck > Module Contents > Deck",
        "section": "Module Contents > Deck",
        "text": "class ansys.dyna.core.lib.deck.Deck(title: str = None, **kwargs)\n\nProvides a collection of keywords that can read and write to a keyword file.\n\n!! processed by numpydoc !!\n\n\n\nproperty comment_header: str | None\n\nComment header of the keyword database.\n\n!! processed by numpydoc !!\n\n\n\nproperty title: str | None\n\nTitle of the keyword database.\n\n!! processed by numpydoc !!\n\n\n\nproperty format: ansys.dyna.core.lib.format_type.format_type\n\nFormat type of the deck.\n\n!! processed by numpydoc !!\n\n\n\n__add__(other)\n\nAdd two decks together.\n\n!! processed by numpydoc !!\n\n\n\nclear()\n\nClear all keywords from the deck.\n\n!! processed by numpydoc !!\n\n\n\nproperty transform_handler: ansys.dyna.core.lib.transform.TransformHandler\n\n\n\n\n\nregister_import_handler(import_handler: ansys.dyna.core.lib.import_handler.ImportHandler) -> None\n\nRegisters an ImportHandler object\n\n!! processed by numpydoc !!\n\n\n\nproperty parameters: ansys.dyna.core.lib.parameters.ParameterSet\n\n\n\n\n\nappend(keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str, check=False) -> None\n\nAdd a keyword to the collection.\n\nParameters\n\nkeyword\n\nUnion[KeywordBase, EncryptedKeyword, python:str]\n\nKeyword. The keyword can be KeywordBase, EncryptedKeyword,\nor a string.\n\ncheck\n\nbool, optional\n\nThe default is False.\n\n!! processed by numpydoc !!\n\n\n\nremove(index: int | list[int]) -> None\n\nRemove a keyword from the collection by index.\n\nParameters\n\nindex\n\npython:int or python:list of python:int, mandatory\n\n\n\n!! processed by numpydoc !!\n\n\n\nproperty all_keywords: List[str | ansys.dyna.core.lib.keyword_base.KeywordBase | ansys.dyna.core.lib.encrypted_keyword.EncryptedKeyword]\n\nList of all keywords.\n\n!! processed by numpydoc !!\n\n\n\nproperty string_keywords: List[str]\n\nList of keywords as a raw string.\n\n!! processed by numpydoc !!\n\n\n\nproperty encrypted_keywords: List[str]\n\nList of keywords as a raw string.\n\n!! processed by numpydoc !!\n\n\n\nproperty keywords\n\nList of processed keywords.\n\n!! processed by numpydoc !!\n\n\n\nextend(kwlist: list) -> None\n\nAdd a list of keywords to the deck.\n\nParameters\n\nkwlist\n\npython:list\n\nList of keywords.\n\n!! processed by numpydoc !!\n\n\n\nexpand(cwd=None, recurse=True)\n\nGet a new deck that is flattened copy of self.\n\nA flattened deck is one where the *INCLUDE keywords are replaced\nby the contents of the file that is included.\ncwd is a working directory used to resolve the filename\nIf recurse is true, *INCLUDE keywords within included decks\nare expanded, recursively.\n\n!! processed by numpydoc !!\n\n\n\ndumps() -> str\n\nGet the keyword file representation of all keywords as a string.\n\nReturns\n\npython:str\n\nKeyword file representation of all keywords as a string.\n\n!! processed by numpydoc !!\n\n\n\nwrite(buf: TextIO | None = None, format: ansys.dyna.core.lib.format_type.format_type | None = None)\n\nWrite the card in the dyna keyword format.\n\nParameters\n\nbuf\n\noptional\n\nBuffer to write to. The default is None,\nin which case the output is returned as a string.\n\nformat\n\noptional\n\nFormat to write in. The default is None.\n\n!! processed by numpydoc !!\n\n\n\nloads(value: str, context: ansys.dyna.core.lib.import_handler.ImportContext | None = None) -> ansys.dyna.keywords.lib.deck_loader.DeckLoaderResult\n\nLoad all keywords from the keyword file as a string.\n\nWhen adding all keywords from the file, this method\noverwrites the title and user comment, if any.\n\nParameters\n\nvalue\n\npython:str\n\n\n\ncontext: ImportContext\n\nthe context\n\n!! processed by numpydoc !!\n\n\n\nvalidate() -> None\n\nValidate the collection of keywords.\n\n!! processed by numpydoc !!\n\n\n\nget_kwds_by_type(str_type: str) -> Iterator[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet all keywords for a given type.\n\nParameters\n\nstr_type\n\npython:str\n\nKeyword type.\n\nReturns\n\ntyping.Iterator[KeywordBase]\n\n\n\nExamples\n\nGet all SECTION_ keywords in the deck.\n\n>>>deck.get_kwds_by_type(“SECTION”)\n\n!! processed by numpydoc !!\n\n\n\nget_kwds_by_full_type(str_type: str, str_subtype: str) -> Iterator[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet all keywords for a given full type.\n\nParameters\n\nstr_type\n\npython:str\n\nKeyword type.\n\nstr_subtype\n\npython:str\n\nKeyword subtype.\n\nReturns\n\ntyping.Iterator[KeywordBase]\n\n\n\nExamples\n\nGet all *SECTION_SHELL keyword instances in the deck.\n\n>>>deck.get_kwds_by_full_type(“SECTION”, “SHELL”)\n\n!! processed by numpydoc !!\n\n\n\nget_section_by_id(id: int) -> ansys.dyna.core.lib.keyword_base.KeywordBase | None\n\nGet the SECTION keyword in the collection for a given section ID.\n\nParameters\n\nid\n\npython:int\n\nSection ID.\n\nReturns\n\nSECTION keyword or None if there is no SECTION keyword that matches the section ID.\n\n\n\nRaises\n\nException\n\nIf multiple SECTION keywords use the given section ID.\n\n!! processed by numpydoc !!\n\n\n\nget(**kwargs) -> List[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet a list of keywords.\n\nParameters\n\n:Keyword Arguments:\n\n\n\n* *type* (``str``) –\n\nThe type of keyword to get. For example, “SECTION” returns all section keywords.\n\n* *filter* (``callable``) –\n\nThe filter to apply to the result. Only keywords which pass the filter will be returned.\n\n!! processed by numpydoc !!\n\n\n\nimport_file(path: str, encoding: str = 'utf-8') -> ansys.dyna.keywords.lib.deck_loader.DeckLoaderResult\n\nImport a keyword file.\n\nParameters\n\npath\n\npython:str\n\nFull path for the keyword file.\n\nencoding: str\n\nString encoding used to read the keyword file.\n\n!! processed by numpydoc !!\n\n\n\nexport_file(path: str, encoding='utf-8') -> None\n\nExport the keyword file to a new keyword file.\n\nParameters\n\npath\n\npython:str\n\nFull path for the new keyword file.\n\n!! processed by numpydoc !!\n\n\n\nproperty keyword_names: List[str]\n\n\n\n\n\n__repr__() -> str\n\nGet a console-friendly representation of a list of all keywords in the deck.\n\n!! processed by numpydoc !!\n\n\n\nplot(**args)\n\nPlot the node and element of the mesh using PyVista.\n\nParameters\n\n**args\n\nKeyword arguments. Use * cwd (int) if the deck and include files are in\na separate directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.comment_header",
        "title": "ansys.dyna.core.lib.deck > Module Contents > comment_header",
        "section": "Module Contents > comment_header",
        "text": "property comment_header: str | None\n\nComment header of the keyword database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.title",
        "title": "ansys.dyna.core.lib.deck > Module Contents > title",
        "section": "Module Contents > title",
        "text": "property title: str | None\n\nTitle of the keyword database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.format",
        "title": "ansys.dyna.core.lib.deck > Module Contents > format",
        "section": "Module Contents > format",
        "text": "property format: ansys.dyna.core.lib.format_type.format_type\n\nFormat type of the deck.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.__add__",
        "title": "ansys.dyna.core.lib.deck > Module Contents > __add__",
        "section": "Module Contents > __add__",
        "text": "__add__(other)\n\nAdd two decks together.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.clear",
        "title": "ansys.dyna.core.lib.deck > Module Contents > clear",
        "section": "Module Contents > clear",
        "text": "clear()\n\nClear all keywords from the deck.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.transform_handler",
        "title": "ansys.dyna.core.lib.deck > Module Contents > transform_handler",
        "section": "Module Contents > transform_handler",
        "text": "property transform_handler: ansys.dyna.core.lib.transform.TransformHandler\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.register_import_handler",
        "title": "ansys.dyna.core.lib.deck > Module Contents > register_import_handler",
        "section": "Module Contents > register_import_handler",
        "text": "register_import_handler(import_handler: ansys.dyna.core.lib.import_handler.ImportHandler) -> None\n\nRegisters an ImportHandler object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.parameters",
        "title": "ansys.dyna.core.lib.deck > Module Contents > parameters",
        "section": "Module Contents > parameters",
        "text": "property parameters: ansys.dyna.core.lib.parameters.ParameterSet\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.append",
        "title": "ansys.dyna.core.lib.deck > Module Contents > append",
        "section": "Module Contents > append",
        "text": "append(keyword: ansys.dyna.core.lib.keyword_base.KeywordBase | str, check=False) -> None\n\nAdd a keyword to the collection.\n\nParameters\n\nkeyword\n\nUnion[KeywordBase, EncryptedKeyword, python:str]\n\nKeyword. The keyword can be KeywordBase, EncryptedKeyword,\nor a string.\n\ncheck\n\nbool, optional\n\nThe default is False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.remove",
        "title": "ansys.dyna.core.lib.deck > Module Contents > remove",
        "section": "Module Contents > remove",
        "text": "remove(index: int | list[int]) -> None\n\nRemove a keyword from the collection by index.\n\nParameters\n\nindex\n\npython:int or python:list of python:int, mandatory\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.all_keywords",
        "title": "ansys.dyna.core.lib.deck > Module Contents > all_keywords",
        "section": "Module Contents > all_keywords",
        "text": "property all_keywords: List[str | ansys.dyna.core.lib.keyword_base.KeywordBase | ansys.dyna.core.lib.encrypted_keyword.EncryptedKeyword]\n\nList of all keywords.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.string_keywords",
        "title": "ansys.dyna.core.lib.deck > Module Contents > string_keywords",
        "section": "Module Contents > string_keywords",
        "text": "property string_keywords: List[str]\n\nList of keywords as a raw string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.encrypted_keywords",
        "title": "ansys.dyna.core.lib.deck > Module Contents > encrypted_keywords",
        "section": "Module Contents > encrypted_keywords",
        "text": "property encrypted_keywords: List[str]\n\nList of keywords as a raw string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.keywords",
        "title": "ansys.dyna.core.lib.deck > Module Contents > keywords",
        "section": "Module Contents > keywords",
        "text": "property keywords\n\nList of processed keywords.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.extend",
        "title": "ansys.dyna.core.lib.deck > Module Contents > extend",
        "section": "Module Contents > extend",
        "text": "extend(kwlist: list) -> None\n\nAdd a list of keywords to the deck.\n\nParameters\n\nkwlist\n\npython:list\n\nList of keywords.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.expand",
        "title": "ansys.dyna.core.lib.deck > Module Contents > expand",
        "section": "Module Contents > expand",
        "text": "expand(cwd=None, recurse=True)\n\nGet a new deck that is flattened copy of self.\n\nA flattened deck is one where the *INCLUDE keywords are replaced\nby the contents of the file that is included.\ncwd is a working directory used to resolve the filename\nIf recurse is true, *INCLUDE keywords within included decks\nare expanded, recursively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.dumps",
        "title": "ansys.dyna.core.lib.deck > Module Contents > dumps",
        "section": "Module Contents > dumps",
        "text": "dumps() -> str\n\nGet the keyword file representation of all keywords as a string.\n\nReturns\n\npython:str\n\nKeyword file representation of all keywords as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.write",
        "title": "ansys.dyna.core.lib.deck > Module Contents > write",
        "section": "Module Contents > write",
        "text": "write(buf: TextIO | None = None, format: ansys.dyna.core.lib.format_type.format_type | None = None)\n\nWrite the card in the dyna keyword format.\n\nParameters\n\nbuf\n\noptional\n\nBuffer to write to. The default is None,\nin which case the output is returned as a string.\n\nformat\n\noptional\n\nFormat to write in. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.loads",
        "title": "ansys.dyna.core.lib.deck > Module Contents > loads",
        "section": "Module Contents > loads",
        "text": "loads(value: str, context: ansys.dyna.core.lib.import_handler.ImportContext | None = None) -> ansys.dyna.keywords.lib.deck_loader.DeckLoaderResult\n\nLoad all keywords from the keyword file as a string.\n\nWhen adding all keywords from the file, this method\noverwrites the title and user comment, if any.\n\nParameters\n\nvalue\n\npython:str\n\n\n\ncontext: ImportContext\n\nthe context\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.validate",
        "title": "ansys.dyna.core.lib.deck > Module Contents > validate",
        "section": "Module Contents > validate",
        "text": "validate() -> None\n\nValidate the collection of keywords.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.get_kwds_by_type",
        "title": "ansys.dyna.core.lib.deck > Module Contents > get_kwds_by_type",
        "section": "Module Contents > get_kwds_by_type",
        "text": "get_kwds_by_type(str_type: str) -> Iterator[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet all keywords for a given type.\n\nParameters\n\nstr_type\n\npython:str\n\nKeyword type.\n\nReturns\n\ntyping.Iterator[KeywordBase]\n\n\n\nExamples\n\nGet all SECTION_ keywords in the deck.\n\n>>>deck.get_kwds_by_type(“SECTION”)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.get_kwds_by_full_type",
        "title": "ansys.dyna.core.lib.deck > Module Contents > get_kwds_by_full_type",
        "section": "Module Contents > get_kwds_by_full_type",
        "text": "get_kwds_by_full_type(str_type: str, str_subtype: str) -> Iterator[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet all keywords for a given full type.\n\nParameters\n\nstr_type\n\npython:str\n\nKeyword type.\n\nstr_subtype\n\npython:str\n\nKeyword subtype.\n\nReturns\n\ntyping.Iterator[KeywordBase]\n\n\n\nExamples\n\nGet all *SECTION_SHELL keyword instances in the deck.\n\n>>>deck.get_kwds_by_full_type(“SECTION”, “SHELL”)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.get_section_by_id",
        "title": "ansys.dyna.core.lib.deck > Module Contents > get_section_by_id",
        "section": "Module Contents > get_section_by_id",
        "text": "get_section_by_id(id: int) -> ansys.dyna.core.lib.keyword_base.KeywordBase | None\n\nGet the SECTION keyword in the collection for a given section ID.\n\nParameters\n\nid\n\npython:int\n\nSection ID.\n\nReturns\n\nSECTION keyword or None if there is no SECTION keyword that matches the section ID.\n\n\n\nRaises\n\nException\n\nIf multiple SECTION keywords use the given section ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.get",
        "title": "ansys.dyna.core.lib.deck > Module Contents > get",
        "section": "Module Contents > get",
        "text": "get(**kwargs) -> List[ansys.dyna.core.lib.keyword_base.KeywordBase]\n\nGet a list of keywords.\n\nParameters\n\n:Keyword Arguments:\n\n\n\n* *type* (``str``) –\n\nThe type of keyword to get. For example, “SECTION” returns all section keywords.\n\n* *filter* (``callable``) –\n\nThe filter to apply to the result. Only keywords which pass the filter will be returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.import_file",
        "title": "ansys.dyna.core.lib.deck > Module Contents > import_file",
        "section": "Module Contents > import_file",
        "text": "import_file(path: str, encoding: str = 'utf-8') -> ansys.dyna.keywords.lib.deck_loader.DeckLoaderResult\n\nImport a keyword file.\n\nParameters\n\npath\n\npython:str\n\nFull path for the keyword file.\n\nencoding: str\n\nString encoding used to read the keyword file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.export_file",
        "title": "ansys.dyna.core.lib.deck > Module Contents > export_file",
        "section": "Module Contents > export_file",
        "text": "export_file(path: str, encoding='utf-8') -> None\n\nExport the keyword file to a new keyword file.\n\nParameters\n\npath\n\npython:str\n\nFull path for the new keyword file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.keyword_names",
        "title": "ansys.dyna.core.lib.deck > Module Contents > keyword_names",
        "section": "Module Contents > keyword_names",
        "text": "property keyword_names: List[str]\n\n"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.__repr__",
        "title": "ansys.dyna.core.lib.deck > Module Contents > __repr__",
        "section": "Module Contents > __repr__",
        "text": "__repr__() -> str\n\nGet a console-friendly representation of a list of all keywords in the deck.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "autoapi/ansys/dyna/core/lib/deck/index",
        "href": "autoapi/ansys/dyna/core/lib/deck/index.html#ansys.dyna.core.lib.deck.Deck.plot",
        "title": "ansys.dyna.core.lib.deck > Module Contents > plot",
        "section": "Module Contents > plot",
        "text": "plot(**args)\n\nPlot the node and element of the mesh using PyVista.\n\nParameters\n\n**args\n\nKeyword arguments. Use * cwd (int) if the deck and include files are in\na separate directory.\n\n!! processed by numpydoc !!"
    }
]