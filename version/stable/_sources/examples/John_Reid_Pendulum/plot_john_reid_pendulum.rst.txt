
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/John_Reid_Pendulum/plot_john_reid_pendulum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py:


John Reid pendulum example
--------------------------
This example is inspired by John Reid's "Pendulum" example on the
`LS-DYNA Knowledge Base <_ls_dyna_knowledge_base>`_ site. It shows how
to use PyDyna to create a keyword file for LS-DYNA and solve it within
a Pythonic environment.

.. LINKS AND REFERENCES
.. _ls_dyna_knowledge_base: https://lsdyna.ansys.com/knowledge-base/

.. GENERATED FROM PYTHON SOURCE LINES 36-39

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Import required packages, including those for the keywords, deck, and solver.

.. GENERATED FROM PYTHON SOURCE LINES 39-61

.. code-block:: Python


    import os
    import shutil
    import tempfile

    import pandas as pd

    from ansys.dyna.core import Deck
    from ansys.dyna.core import keywords as kwd
    from ansys.dyna.core.pre.examples.download_utilities import EXAMPLES_PATH, DownloadManager
    from ansys.dyna.core.run import run_dyna

    mesh_file_name = "nodes.k"
    mesh_file = DownloadManager().download_file(
        mesh_file_name, "ls-dyna", "John_Reid_Pendulum", destination=os.path.join(EXAMPLES_PATH, "John_Reid_Pendulum")
    )

    rundir = tempfile.TemporaryDirectory()

    dynafile = "pendulum.k"









.. GENERATED FROM PYTHON SOURCE LINES 62-66

Create a deck and keywords
~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a deck, which is the container for all the keywords.
Then, create and append individual keywords to the deck.

.. GENERATED FROM PYTHON SOURCE LINES 66-168

.. code-block:: Python



    def write_deck(filepath):
        deck = Deck()

        # Append control keywords
        deck.extend(
            [
                kwd.ControlTermination(endtim=11.0),
                kwd.ControlEnergy(hgen=2, rwen=2),
                kwd.ControlOutput(npopt=1, neecho=3),
                kwd.ControlShell(istupd=1, theory=2),
            ]
        )

        # Append database keywords
        deck.extend(
            [
                kwd.DatabaseBinaryD3Plot(dt=1.00),
                kwd.DatabaseExtentBinary(ieverp=1),
                kwd.DatabaseBinaryD3Thdt(dt=999999),
                kwd.DatabaseGlstat(dt=0.10),
                kwd.DatabaseMatsum(dt=0.10),
                kwd.DatabaseNodout(dt=0.10),
                kwd.DatabaseHistoryNode(id1=350, id2=374, id3=678, id4=713),
                kwd.DatabaseRbdout(dt=0.10),
                kwd.DatabaseRcforc(dt=0.10),
            ]
        )

        # Define contacts
        deck.extend([kwd.ContactAutomaticSingleSurface(ssid=0, fs=0.08, fd=0.08), kwd.ControlContact(shlthk=2)])

        # Define gravity
        curve1 = kwd.DefineCurve(lcid=1)
        curve1.curves = pd.DataFrame({"a1": [0.00, 10000.00], "o1": [1.000, 1.000]})

        deck.extend([kwd.LoadBodyY(lcid=1, sf=0.00981), curve1])

        # Define boundary conditions

        # BoundarySpcNode edited needs to redo code gen
        BoundarySpcNode = kwd.BoundarySpcNode()
        BoundarySpcNode.nodes = pd.DataFrame(
            {
                "nid": [45004, 45005, 45010, 45011],
                "cid": [0, 0, 0, 0],
                "dofx": [1, 1, 1, 1],
                "dofy": [1, 1, 1, 1],
                "dofz": [1, 1, 1, 1],
                "dofrx": [0, 0, 0, 0],
                "dofry": [0, 0, 0, 0],
                "dofrz": [0, 0, 0, 0],
            }
        )

        deck.extend(
            [
                BoundarySpcNode,
                kwd.InitialVelocity(boxid=5, vx=0.0, vy=-12.0, vz=0.0),
                kwd.DefineBox(boxid=5, xmn=-120.0, xmx=-80.0, ymn=80.0, ymx=120.0, zmn=-30.0, zmx=30.0),
            ]
        )

        # Define parts and materials

        spherePart = kwd.Part()
        spherePart.parts = pd.DataFrame({"heading": ["sphere1", "sphere2"], "pid": [1, 2], "secid": [1, 2], "mid": [1, 1]})
        beamPart = kwd.Part(heading="Pendulum Wires - Elastic Beams", pid=45, secid=45, mid=45)

        deck.extend(
            [
                spherePart,
                # Aluminium
                kwd.MatPlasticKinematic(mid=1, ro=2.7e-6, e=68.9, pr=0.330, sigy=0.286, etan=0.00689),
                # Sections
                kwd.SectionShell(secid=1, elfrom=2, t1=1.0, t2=1.0, t3=1.0, t4=1.0),
                kwd.SectionShell(secid=2, elfrom=2, t1=1.0, t2=1.0, t3=1.0, t4=1.0),
                # Pendu Wires
                beamPart,
                kwd.SectionBeam(secid=45, elform=3, shrf=1.00000, qr_irid=1.0, a=10.0),
                kwd.MatElastic(mid=45, ro=7.86e-6, e=210.0, pr=0.30),
            ]
        )

        # Define deformable switching
        deck.extend([kwd.DeformableToRigid(pid=1), kwd.DeformableToRigid(pid=2)])

        # Define nodes and elements
        deck.append(kwd.Include(filename=mesh_file_name))

        deck.export_file(filepath)
        return deck


    def run_post(filepath):
        pass


    shutil.copy(mesh_file, os.path.join(rundir.name, mesh_file_name))
    deck = write_deck(os.path.join(rundir.name, dynafile))








.. GENERATED FROM PYTHON SOURCE LINES 169-173

View the model
~~~~~~~~~~~~~~
You can use the PyVista ``plot`` method in the ``deck`` class to view
the model.

.. GENERATED FROM PYTHON SOURCE LINES 173-176

.. code-block:: Python


    deck.plot(cwd=rundir.name)




.. image-sg:: /examples/John_Reid_Pendulum/images/sphx_glr_plot_john_reid_pendulum_001.png
   :alt: plot john reid pendulum
   :srcset: /examples/John_Reid_Pendulum/images/sphx_glr_plot_john_reid_pendulum_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 177-180

Run the Dyna solver
~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: Python


    filepath = run_dyna(dynafile, working_directory=rundir.name)
    run_post(rundir.name)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     License option : check ansys licenses only


     ***************************************************************
     *            ANSYS LEGAL NOTICES                              *
     ***************************************************************
     *                                                             *
     * Copyright 1971-2023 ANSYS, Inc.  All rights reserved.       *
     * Unauthorized use, distribution or duplication is            *
     * prohibited.                                                 *
     *                                                             *
     * Ansys is a registered trademark of ANSYS, Inc. or its       *
     * subsidiaries in the United States or other countries.       *
     * See the ANSYS, Inc. online documentation or the ANSYS, Inc. *
     * documentation CD or online help for the complete Legal      *
     * Notice.                                                     *
     *                                                             *
     ***************************************************************
     *                                                             *
     * THIS ANSYS SOFTWARE PRODUCT AND PROGRAM DOCUMENTATION       *
     * INCLUDE TRADE SECRETS AND CONFIDENTIAL AND PROPRIETARY      *
     * PRODUCTS OF ANSYS, INC., ITS SUBSIDIARIES, OR LICENSORS.    *
     * The software products and documentation are furnished by    *
     * ANSYS, Inc. or its subsidiaries under a software license    *
     * agreement that contains provisions concerning               *
     * non-disclosure, copying, length and nature of use,          *
     * compliance with exporting laws, warranties, disclaimers,    *
     * limitations of liability, and remedies, and other           *
     * provisions.  The software products and documentation may be *
     * used, disclosed, transferred, or copied only in accordance  *
     * with the terms and conditions of that software license      *
     * agreement.                                                  *
     *                                                             *
     * ANSYS, Inc. is a UL registered                              *
     * ISO 9001:2015 company.                                      *
     *                                                             *
     ***************************************************************
     *                                                             *
     * This product is subject to U.S. laws governing export and   *
     * re-export.                                                  *
     *                                                             *
     * For U.S. Government users, except as specifically granted   *
     * by the ANSYS, Inc. software license agreement, the use,     *
     * duplication, or disclosure by the United States Government  *
     * is subject to restrictions stated in the ANSYS, Inc.        *
     * software license agreement and FAR 12.212 (for non-DOD      *
     * licenses).                                                  *
     *                                                             *
     ***************************************************************

          Date: 07/15/2025      Time: 07:47:51  
          ___________________________________________________ 
         |                                                   |
         |  LS-DYNA, A Program for Nonlinear Dynamic         |
         |  Analysis of Structures in Three Dimensions       |
         |  Date    : 10/16/2023    Time: 19:29:09           |
         |  Version : smp d R14                              |
         |  Revision: R14.1-205-geb5348f751                  |
         |  AnLicVer: 2024 R1 (20231025+2752148)             |
         |                                                   |
         |  Features enabled in this version:                |
         |    Shared Memory Parallel                         |
         |    CESE CHEMISTRY EM ICFD STOCHASTIC_PARTICLES    |
         |    FFTW (multi-dimensional FFTW Library)          |
         |    ARPACK (nonsymmetric eigensolver library)      |
         |    ANSYSLIC enabled                               |
         |                                                   |
         |  Platform   : Xeon64 System                       |
         |  OS Level   : Linux 3.10.0 uum                    |
         |  Compiler   : Intel Fortran Compiler 19.0 SSE2    |
         |  Hostname   : 5c71ab528d80                        |
         |  Precision  : Double precision (I8R8)             |
         |                                                   |
         |  Unauthorized use infringes Ansys Inc. copyrights |
         |___________________________________________________|

     >ncpu=1 i=pendulum.k memory=20m
    [license/info] Successfully checked out 1 of "dyna_solver_core".
    [license/info] --> Checkout ID: 5c71ab528d80-root-8-000004 (days left: 273)
    [license/info] --> Customer ID: 0
    [license/info] Successfully started "LSDYNA (Core-based License)".

     Executing with ANSYS license

     Command line options: ncpu=1 
                           i=pendulum.k 
                           memory=20m

     Input file: pendulum.k                                                                      

     The native file format       : 64-bit small endian
     Memory size from command line:    20000000

     on UNIX computers note the following change:

     ctrl-c interrupts ls-dyna and prompts for a sense  switch.
     type the desired sense switch: sw1., sw2., etc. to continue
     the execution.  ls-dyna will respond as explained in the users manual

        type                      response
       -----   ------------------------------------------------------------
       quit    ls-dyna terminates.
       stop    ls-dyna terminates.
       sw1.    a restart file is written and ls-dyna terminates.
       sw2.    ls-dyna responds with time and cycle numbers.    
       sw3.    a restart file is written and ls-dyna continues calculations.
       sw4.    a plot state is written and ls-dyna continues calculations.
       sw5.    ls-dyna enters interactive graphics phase.
       swa.    ls-dyna flushes all output i/o buffers.
       swb.    a dynain is written and ls-dyna continues calculations.
       swc.    a restart and dynain are written and ls-dyna continues calculations.
       swd.    a restart and dynain are written and ls-dyna terminates.
       swe.    stop dynamic relaxation just as though convergence
       endtime=time change the termination time
       lpri    toggle implicit lin. alg. solver output on/off.
       nlpr    toggle implicit nonlinear solver output on/off.
       iter    toggle implicit output to d3iter database on/off.
       prof    output timing data to messag and continue.
       conv    force implicit nonlinear convergence for current time step.
       ttrm    terminate implicit time step, reduce time step, retry time step.
       rtrm    terminate implicit at end of current time step.


     ********  notice  ********  notice  ********  notice  ********
     *                                                            *
     * This is the LS-DYNA Finite Element code.                   *
     *                                                            *
     * Neither LST nor the authors assume any responsibility for  *
     * the validity, accuracy, or applicability of any results    *
     * obtained from this system. Users must verify their own     *
     * results.                                                   *
     *                                                            *
     * LST endeavors to make the LS-DYNA code as complete,        *
     * accurate and easy to use as possible.                      *
     * Suggestions and comments are welcomed.  Please report any  *
     * errors encountered in either the documentation or results  *
     * immediately to LST through your site focus.                *
     *                                                            *
     * Copyright (C) 1990-2021                                    *
     * by Livermore Software Technology, LLC                      *
     * All rights reserved                                        *
     *                                                            *
     ********  notice  ********  notice  ********  notice  ********

     Beginning of keyword reader                                   07/15/25 07:47:52

                                                                   07/15/25 07:47:52
     Open include file: nodes.k
  

     Memory required to process keyword     :     256550  
     Additional dynamic memory required     :    2135813  


     input of data is completed

     initial kinetic energy = 0.17315762E+01
 
     *** Warning 30131 (INI+131)
         total number of massless nodes = 8

     The LS-DYNA time step size should not exceed     6.171E-04
     to avoid contact instabilities.  If the step size is
     bigger then scale the penalty of the offending surface.

     Memory required to begin solution      :     257K
     Additional dynamically allocated memory:    2223K
                                       Total:    2480K

     initialization completed
           1 t 0.0000E+00 dt 1.81E-02 flush i/o buffers            07/15/25 07:47:52
           1 t 0.0000E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:52
     cpu time per zone cycle............       105 nanoseconds
     average cpu time per zone cycle....       339 nanoseconds
     average clock time per zone cycle..       731 nanoseconds

     estimated total cpu time          =         0 sec (       0 hrs  0 mins)
     estimated cpu time to complete    =         0 sec (       0 hrs  0 mins)
     estimated total clock time        =         1 sec (       0 hrs  0 mins)
     estimated clock time to complete  =         0 sec (       0 hrs  0 mins)
     termination time                  = 1.100E+01
          56 t 9.9766E-01 dt 1.81E-02 write d3plot file            07/15/25 07:47:52
         111 t 1.9953E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:52
         166 t 2.9930E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:52
         221 t 3.9906E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         276 t 4.9883E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         331 t 5.9860E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         386 t 6.9836E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         442 t 7.9994E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         497 t 8.9971E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         552 t 9.9948E+00 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
         607 t 1.0992E+01 dt 1.81E-02 write d3plot file            07/15/25 07:47:53
 
     *** termination time reached ***
         607 t 1.1011E+01 dt 1.81E-02 write d3dump01 file          07/15/25 07:47:53
         607 t 1.1011E+01 dt 1.81E-02 write d3plot file            07/15/25 07:47:53

     N o r m a l    t e r m i n a t i o n                          07/15/25 07:47:53

     Memory required to complete solution   :     257K
     Additional dynamically allocated memory:    2223K
                                       Total:    2480K

     T i m i n g   i n f o r m a t i o n
                            CPU(seconds)   %CPU  Clock(seconds) %Clock
      ----------------------------------------------------------------
      Keyword Processing ... 1.0776E-02    6.68     1.0778E-02    0.55
        KW Reading ......... 4.4991E-03    2.79     4.5000E-03    0.23
        KW Writing ......... 1.3707E-03    0.85     1.3710E-03    0.07
      Initialization ....... 7.7244E-02   47.89     1.8848E+00   95.57
        Init Proc Phase 1 .. 4.4756E-03    2.77     6.5150E-03    0.33
        Init Proc Phase 2 .. 1.0733E-03    0.67     2.3490E-03    0.12
      Init solver .......... 6.9941E-05    0.04     7.0000E-05    0.00
      Element processing ... 7.5881E-03    4.70     7.5900E-03    0.38
        Shells ............. 6.9723E-04    0.43     7.0600E-04    0.04
        Beams .............. 1.4956E-03    0.93     1.4680E-03    0.07
        ISO Shells ......... 4.3206E-04    0.27     4.4800E-04    0.02
        E Other ............ 1.5545E-03    0.96     1.5480E-03    0.08
      Binary databases ..... 6.3695E-03    3.95     6.3890E-03    0.32
      ASCII database ....... 9.6312E-03    5.97     9.6070E-03    0.49
      Contact algorithm .... 1.2470E-02    7.73     1.2455E-02    0.63
        Interf. ID         1 9.5577E-03    5.93     9.4820E-03    0.48
      Rigid Bodies ......... 1.0585E-02    6.56     1.0501E-02    0.53
      Time step size ....... 6.3410E-04    0.39     6.3600E-04    0.03
      Group force file ..... 5.0085E-04    0.31     5.2500E-04    0.03
      Others ............... 1.5752E-03    0.98     1.5760E-03    0.08
      Misc. 1 .............. 9.5792E-03    5.94     1.3050E-02    0.66
        Scale Masses ....... 4.7509E-04    0.29     4.7000E-04    0.02
        Force Constraints .. 4.7536E-04    0.29     4.8000E-04    0.02
        Force to Accel ..... 9.2728E-04    0.57     9.1400E-04    0.05
        Update RB nodes .... 3.1790E-03    1.97     3.1180E-03    0.16
      Misc. 2 .............. 2.7199E-03    1.69     2.7110E-03    0.14
      Misc. 3 .............. 3.7476E-03    2.32     3.7280E-03    0.19
      Misc. 4 .............. 7.8019E-03    4.84     7.8040E-03    0.40
        Timestep Init ...... 1.3241E-03    0.82     1.2830E-03    0.07
        Apply Loads ........ 1.3531E-03    0.84     1.3520E-03    0.07
        Compute exwork ..... 3.7002E-03    2.29     3.6830E-03    0.19
      ----------------------------------------------------------------
      T o t a l s            1.6129E-01  100.00     1.9722E+00  100.00

     Problem time       =    1.1011E+01
     Problem cycle      =       607
     Total CPU time     =         0 seconds (   0 hours  0 minutes  0 seconds)
     CPU time per zone cycle  =        155.557 nanoseconds
     Clock time per zone cycle=        162.711 nanoseconds

     Number of CPU's    1
     NLQ used/max     192/  192
     Start time   07/15/2025 07:47:52  
     End time     07/15/2025 07:47:53  
     Elapsed time       1 second  for     607 cycles using  1 SMP thread 
                 (      0 hour   0 minute   1 second )

     N o r m a l    t e r m i n a t i o n                          07/15/25 07:47:53





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.737 seconds)


.. _sphx_glr_download_examples_John_Reid_Pendulum_plot_john_reid_pendulum.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_john_reid_pendulum.ipynb <plot_john_reid_pendulum.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_john_reid_pendulum.py <plot_john_reid_pendulum.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_john_reid_pendulum.zip <plot_john_reid_pendulum.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
