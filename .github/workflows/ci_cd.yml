name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'
  PACKAGE_NAME: 'ansys-dyna-core'
  PACKAGE_NAMESPACE: 'ansys.dyna.core'
  DOCUMENTATION_CNAME: "dyna.docs.pyansys.com"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.MAIN_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install packages for documentation build
        run: |
          sudo apt-get install xvfb pandoc
          pip install --upgrade build
          pip install .[doc]

      - name: Run server
        run: |
          cd src/ansys/dyna/core/pre/Server
          python kwserver.py > server_output_docs.txt &
          sleep 10
          cd -

      - name: Build the documentation
        run: |
          xvfb-run make -C doc html

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Upload the server logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-logs-docs
          path: src/ansys/dyna/core/pre/Server/server_output_docs.txt

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10'] #, '3.11'] # --> At some point we should include Py3.11

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: Testing
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install ansys-dyna-core (with test requirements)
        run: |
          pip install -e .[tests]

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          Start-Job -ScriptBlock {cd ${{ github.workspace }}\src\ansys\dyna\core\pre\Server\;python kwserver.py >> server_output.txt}
          Start-Sleep -Seconds 10
          pytest

      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: |
          cd src/ansys/dyna/core/pre/Server
          python kwserver.py > server_output.txt &
          sleep 10
          cd -
          pytest

      - name: Upload the server logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-logs-${{ runner.os }}
          path: src/ansys/dyna/core/pre/Server/server_output.txt

      - name: Upload coverage results
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

  package:
    name: Package library
    needs: [docs, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the private PyPI repository
        uses: pyansys/actions/release-pypi-private@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: Release to GitHub
        uses: pyansys/actions/release-github@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: pyansys/actions/doc-deploy-stable@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
