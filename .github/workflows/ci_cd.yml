name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # style:
  #   name: Code style
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}
  #         cache: 'pip'
  #         cache-dependency-path: 'pyproject.toml'

  #     - name: Install pre-commit
  #       run: pip install pre-commit

  #     - name: Run pre-commit
  #       run: pre-commit run --all-files --show-diff-on-failure


  # docs-style:
  #   name: Documentation Style Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Running Vale
  #       uses: errata-ai/vale-action@reviewdog
  #       env:
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  #       with:
  #         files: doc
  #         reporter: github-pr-check
  #         level: error
  #         filter_mode: nofilter
  #         fail_on_error: true
  #         vale_flags: "--config=doc/.vale.ini"

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    # needs: [style]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7']
        # python-version: ['3.7', '3.8', '3.9']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'setup.py'

      - name: Install packages for building
        run: |
          pip install --upgrade build wheel
          pip install .

      - name: Smoke test
        run: python -c "from ansys.dyna.solver._version import __version__; print(__version__)"

      - name: Store version
        run: |
          echo "::set-output name=PYDYNA_VERSION::$(python -c "from ansys.dyna.solver._version import __version__; print(__version__)")"
        id: version

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    # needs: [docs-style]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.MAIN_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'

      - name: Install packages for documentation build
        run: |
          sudo apt-get install xvfb pandoc
          pip install --upgrade build
          pip install -r requirements_docs.txt

      - name: Build the documentation
        run: |
          xvfb-run make -C doc html

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v3
        with:
          name: HTML-Documentation
          path: doc/_build/html
          retention-days: 7

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    # needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'

      - name: Zip HTML Documentation
        uses: vimtor/action-zip@v1
        with:
          files: HTML-Documentation
          dest: pydyna-Documentation-HTML.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # needs: [package]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: HTML-Documentation
          path: HTML-Documentation

      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Deploy documentation to pydyna-dev-docs repository
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          repository-name: pyansys/pydyna-dev-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: HTML-Documentation
          clean: true
          single-commit: true

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: HTML-Documentation
          path: HTML-Documentation

      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}
      - name: Deploy documentation to pydyna-docs repository
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          repository-name: pyansys/pydyna-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          branch: gh-pages
          folder: HTML-Documentation
          clean: true
          single-commit: true
