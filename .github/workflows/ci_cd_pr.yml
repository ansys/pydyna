name: CI
on:
  pull_request:
  workflow_dispatch:
    inputs:
      PyDynaRunContainer:
        description: 'Run container name'
        required: false
        default: ghcr.io/ansys/pydyna-run:latest
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'ansys-dyna-core'
  PACKAGE_NAMESPACE: 'ansys.dyna.core'
  DOCUMENTATION_CNAME: "dyna.docs.pyansys.com"
  PYDYNA_RUN_CONTAINER: ${{ github.event.inputs.PyDynaRunContainer || 'ghcr.io/ansys/pydyna-run:latest'}}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  labeler:
    name: "Labels"
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

     - name: "Update labels"
       uses: micnncim/action-label-syncer@3abd5ab72fda571e69fffd97bd4e0033dd5f495c # v1.3.0
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  changelog-fragment:
    name: "Create changelog fragment"
    runs-on: ubuntu-latest
    needs: labeler
    permissions:
      contents: write
      pull-requests: write
    steps:

      - uses: ansys/actions/check-pr-title@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ansys/actions/doc-changelog@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        if: ${{ github.event_name == 'pull_request' }}
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          use-conventional-commits: true
          use-default-towncrier-config: true
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  pr-name:
    if: github.event_name == 'pull_request'
    name: Check the name of the PR
    runs-on: ubuntu-latest
    steps:
      - name: Check commit name
        uses: ansys/actions/check-pr-title@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  codegen-testing:
    name: Build and Testing for codegen
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install library
        run: pip install -e .[codegen]

      - name: Generate codegen
        run: |
          python codegen/generate.py -c
          python codegen/generate.py

      - name: Run codegen testing
        run: |
          if git -C src/ansys/dyna/core/keywords/keyword_classes/auto diff --relative --exit-code; then
            echo "CHANGES=false" >> "$GITHUB_ENV"
          else
            echo "CHANGES=true" >> "$GITHUB_ENV"
          fi
      - name: Exit on changes
        if: ${{ env.CHANGES == 'true' }}
        run: exit 1

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc:
    name: "Documentation build"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: "Checkout project"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Set up Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: "Install system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install xvfb pandoc texlive-latex-extra latexmk

      - name: "Install python dependencies"
        run: |
          python -m pip install .[doc]
          # optional dependency for `run_dyna` to work with docker.
          # TODO - consider adding to pyproject.toml under an option
          python -m pip install docker
      - name: "Login to GitHub container registry"
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Licensing
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV

      - name: Install DPF
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{secrets.PYANSYS_CI_BOT_TOKEN}}
          ANSYS_VERSION : "242"

      - name: LS-DYNA Keyword server activation
        run: |
          docker pull ghcr.io/ansys/ls-pre:latest
          docker run -d --name kw_server -p 50051:50051 ghcr.io/ansys/ls-pre:latest && echo "Keyword server active on port 50051."

      - name: Pull PyDyna-run image
        run: |
          docker pull ghcr.io/ansys/pydyna-run:latest

      - name: "Build the html documentation"
        env:
          ANSYSLI_SERVERS: 2325@${{secrets.LICENSE_SERVER}}
          ANSYSLMD_LICENSE_FILE: 1055@${{secrets.LICENSE_SERVER}}
          LSTC_LICENSE: ansys
          PYDYNA_RUN_CONTAINER: ${{ env.PYDYNA_RUN_CONTAINER }}
        run: |
          xvfb-run make -C doc html

      - name: "Upload html documentation"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: "Build the pdf documentation"
        env:
          ANSYSLI_SERVERS: 2325@${{secrets.LICENSE_SERVER}}
          ANSYSLMD_LICENSE_FILE: 1055@${{secrets.LICENSE_SERVER}}
          LSTC_LICENSE: ansys
          PYDYNA_RUN_CONTAINER: ${{ env.PYDYNA_RUN_CONTAINER }}
          PYDYNA_RUN_STREAM: "0"
          extra_mem_bot: 20000000
          extra_mem_top: 30000000
        run: |
          xvfb-run make -C doc pdf


      - name: "Upload pdf documentation"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: documentation-pdf
          path: doc/_build/latex/*.pdf
          retention-days: 7

      - name: Extract the server logs
        if: always()
        run: |
          docker logs kw_server > server_output.txt

      - name: "Upload the server logs"
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: server_output_docs.txt
          path: server_output.txt

  smoke-tests:
    name: "Build wheelhouse for ${{ matrix.os }} and Python ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Testing"
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Set up Python"
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: "Login to GitHub container registry"
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Pull and start LS-DYNA keyword server"
        run: |
          docker pull ghcr.io/ansys/ls-pre:latest
          docker run -d --name kw_server -p 50051:50051 ghcr.io/ansys/ls-pre:latest && echo "Keyword server active on port 50051."

      - name: "Install package dependencies"
        run: |
          pip install -e .[tests]

      - name: "Run tests"
        run: |
          pytest

      - name: "Extract the server logs"
        if: always()
        run: |
          docker logs kw_server > server_output.txt

      - name: "Upload the server logs"
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: server_output_tests.txt
          path: server_output.txt

      - name: "Upload coverage results"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

  run-testing:
    name: Test the "run" subpackage
    runs-on: ubuntu-latest
    needs: [code-style]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Set up Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: "Install python dependencies"
        run: |
          python -m pip install docker # todo make this an option?
          python -m pip install .[tests]

      - name: Pull PyDyna-run image
        run: |
          docker pull ${{ env.PYDYNA_RUN_CONTAINER }}

      - name: Unit testing
        env:
          PYDYNA_RUN_CONTAINER: ${{ env.PYDYNA_RUN_CONTAINER }}
          ANSYSLI_SERVERS: 2325@${{secrets.LICENSE_SERVER}}
          ANSYSLMD_LICENSE_FILE: 1055@${{secrets.LICENSE_SERVER}}
          LSTC_LICENSE: ansys
        run: |
          pytest -m run

  build-library:
    name: "Build library"
    needs: [doc, tests, run-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/build-library@3e17ebb494f3333996ba36bbbadd47a6ff24ec0e # v9.0.15
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}