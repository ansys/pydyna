
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/EM/em_railgun.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_EM_em_railgun.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_EM_em_railgun.py:


Railgun example
===============

This example demonstrates how to create an EM Railgun input deck. 

LS-DYNA version : ls-dyna_smp_d_R13.0_365-gf8a97bda2a_winx64_ifort190.exe

.. GENERATED FROM PYTHON SOURCE LINES 8-94




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    length: 1






|

.. code-block:: default


    import os
    import sys

    from ansys.dyna.core.pre.dynasolution import DynaSolution
    from ansys.dyna.core.pre.dynaem import (
        DynaEM,
        Circuit,
        CircuitType,
        SegmentSet,
        NodeSet,
        Curve,
        SolidPart,
        SolidFormulation,
        EMContact,
        BEMSOLVER,
        FEMSOLVER,
    )
    from ansys.dyna.core.pre.dynamaterial import MatElastic, MatRigid, EMMATTYPE
    from em_railgun_data import *
    from ansys.dyna.core.pre import examples

    hostname = "localhost"
    if len(sys.argv) > 1:
        hostname = sys.argv[1]

    em_solution = DynaSolution(hostname)
    fns = []
    path = examples.em_railgun + os.sep
    fns.append(path + "em_railgun.k")
    em_solution.open_files(fns)
    em_solution.set_termination(termination_time=3e-4)
    em_solution.create_database_binary(dt=5e-6)

    railgun = DynaEM()
    em_solution.add(railgun)

    railgun.analysis.set_timestep(timestep=5e-6)
    railgun.analysis.set_solver_bem(solver=BEMSOLVER.PCG)
    railgun.analysis.set_solver_fem(solver=FEMSOLVER.DIRECT_SOLVER, relative_tol=1e-3)

    circuit = Circuit(
        circuit_type=CircuitType.IMPOSED_CURRENT_VS_TIME,
        loadcurve=Curve(x=[0, 8e-5, 2e-4, 4e-4, 6e-4, 1e-3], y=[0, 350, 450, 310, 230, 125], sfo=2e6),
    )
    circuit.set_current(
        current=SegmentSet(cur), current_inlet=SegmentSet(inlet), current_outlet=SegmentSet(outlet)
    )
    railgun.add(circuit)

    matelastic = MatElastic(mass_density=2.64e-3, young_modulus=9.7e10, poisson_ratio=0.31)
    matelastic.set_electromagnetic_property(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=25)
    matrigid = MatRigid(
        mass_density=2.64e-3,
        young_modulus=9.7e10,
        poisson_ratio=0.31,
        center_of_mass_constraint=1,
        translational_constraint=7,
        rotational_constraint=7,
    )
    matrigid.set_electromagnetic_property(material_type=EMMATTYPE.CONDUCTOR, initial_conductivity=25)

    coil = SolidPart(1)
    coil.set_material(matelastic)
    coil.set_element_formulation(SolidFormulation.CONSTANT_STRESS_SOLID_ELEMENT)
    railgun.parts.add(coil)

    workpiece1 = SolidPart(2)
    workpiece1.set_material(matrigid)
    workpiece1.set_element_formulation(SolidFormulation.CONSTANT_STRESS_SOLID_ELEMENT)
    railgun.parts.add(workpiece1)

    workpiece2 = SolidPart(3)
    workpiece2.set_material(matrigid)
    workpiece2.set_element_formulation(SolidFormulation.CONSTANT_STRESS_SOLID_ELEMENT)
    railgun.parts.add(workpiece2)

    railgun.boundaryconditions.create_spc(NodeSet(spc1), tx=False, ty=False, rz=False, death=0)
    railgun.boundaryconditions.create_spc(NodeSet(spc2), tx=False, ty=False, rz=False, death=0)

    contact = EMContact()
    railgun.contacts.add(contact)

    railgun.set_rogowsky_coil_to_output_current(SegmentSet(cur))

    em_solution.save_file()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.754 seconds)


.. _sphx_glr_download_examples_EM_em_railgun.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: em_railgun.py <em_railgun.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: em_railgun.ipynb <em_railgun.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
